import{_ as s,c as n,o as a,d as p}from"./app.58c7925b.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Problem/链表/链表相交.md"}'),l={name:"Problem/链表/链表相交.md"},o=p(`<p><strong>题目：</strong></p><p>链表相交: <a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/" target="_blank" rel="noreferrer">https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/</a></p><p><strong>description:</strong></p><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p><p><strong>解题思路：</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getIntersectionNode</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">headA</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">headB</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 交点不是数值相等，而是指针相等</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> pA </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> headA,</span></span>
<span class="line"><span style="color:#F6F6F4;">    pB </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> headB;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (pA </span><span style="color:#F286C4;">!==</span><span style="color:#F6F6F4;"> pB) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    pA </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> pA </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> headB </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> pA.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">    pB </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> pB </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> headA </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> pB.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> pA;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light" tabindex="0"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getIntersectionNode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">headA</span><span style="color:#24292E;">, </span><span style="color:#E36209;">headB</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 交点不是数值相等，而是指针相等</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> pA </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> headA,</span></span>
<span class="line"><span style="color:#24292E;">    pB </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> headB;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (pA </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> pB) {</span></span>
<span class="line"><span style="color:#24292E;">    pA </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pA </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> headB </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pA.next;</span></span>
<span class="line"><span style="color:#24292E;">    pB </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pB </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> headA </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> pB.next;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> pA;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span></code></pre></div>`,6),e=[o];function t(c,r,F,y,i,d){return a(),n("div",null,e)}const _=s(l,[["render",t]]);export{A as __pageData,_ as default};
