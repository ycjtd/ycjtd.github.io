import{_ as i,c as l,o as t,a as e}from"./app.d0de5917.js";const s="/assets/image.1a4dc4d6.png",h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"浏览器事件循环","slug":"浏览器事件循环","link":"#浏览器事件循环","children":[]}],"relativePath":"BackEnd/NodeJS/事件循环.md"}'),o={name:"BackEnd/NodeJS/事件循环.md"},a=e('<h3 id="浏览器事件循环" tabindex="-1">浏览器事件循环 <a class="header-anchor" href="#浏览器事件循环" aria-hidden="true">#</a></h3><p>事件循环主要是为了实现 js 的异步概念</p><p>js 是单线程的</p><p>进程：计算机分配任务的最小单位 进程中包含多个进程</p><p><strong>浏览器的进程</strong></p><ul><li>每一个页面都是进程（互不影响）</li><li>浏览器也有一个主进程（用户界面）</li><li>渲染进程每个页面里都有一个渲染进程（浏览器内核） <ul><li>GUI 渲染线程（用于渲染页面）</li><li>js 引擎线程 他和页面渲染时互斥</li><li>事件触发线程 独立的线程 EventLoop</li><li>事件 click setTimeout ajax 也是一个独立线程</li></ul></li><li>网络进程（处理请求）</li><li>GPU 进程 3d 绘制</li><li>第三方插件的进程</li></ul><p><strong>EventLoop 整体流程图</strong></p><p><img src="'+s+'" alt="Alt text"></p><p><strong>执行步骤：</strong></p><ol><li>js 执行的时候，从上到下，遇到函数会创建执行上下文放入到执行栈中，执行完毕后会出栈，可能会发生异步事件 内部会调用浏览器 Api</li><li>当我们执行上下文栈都执行完毕后，等会可能 api 执行完成或者时间到达，维护一个事件&quot;队列&quot; 先进先出</li><li>不停的扫描队列，将队列中的任务拿出来放到上下文执行栈中执行，事件循环线程就是做这件事情的，检查当前执行栈是否为空，如果为空，从事件队列中取出一个来执行</li><li>当代码执行时还会有一些任务 promise 为例，微任务，每次执行宏任务的时候，都会单独创建一个微任务 队列 先进先出</li><li>微任务执行完毕后，浏览器会检查是否需要重新渲染，浏览器有刷新频率（16.6ms）</li><li>每次循环一次，都会执行一个宏任务并清空对应的微任务队列，每次循环完毕后，都要看看是否要渲染，如果需要渲染才渲染</li><li>如果微任务在执行过程中再次生成微任务，会在本轮直接清空</li></ol><p><strong>常见宏任务</strong></p><ul><li>script 脚本</li><li>界面渲染</li><li>setTimeout</li><li>setInterval</li><li>poseMessage</li><li>MessageChannel</li><li>setImmediate</li></ul><p><strong>常见微任务</strong></p><ul><li>promise.then</li><li>mutationObserver</li><li>事件</li><li>ajax</li></ul>',14),n=[a];function r(p,_,c,d,u,m){return t(),l("div",null,n)}const f=i(o,[["render",r]]);export{h as __pageData,f as default};
