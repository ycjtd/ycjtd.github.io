import{_ as e,c as t,o as r,d as a}from"./app.72c7cb6e.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"对生命周期的理解","slug":"对生命周期的理解","link":"#对生命周期的理解","children":[]},{"level":3,"title":"什么时候使用 beforeDestory","slug":"什么时候使用-beforedestory","link":"#什么时候使用-beforedestory","children":[]},{"level":3,"title":"Vue 的父组件和子组件生命周期钩子函数执行顺序","slug":"vue-的父组件和子组件生命周期钩子函数执行顺序","link":"#vue-的父组件和子组件生命周期钩子函数执行顺序","children":[]},{"level":3,"title":"在那个生命周期中调用异步请求","slug":"在那个生命周期中调用异步请求","link":"#在那个生命周期中调用异步请求","children":[]}],"relativePath":"Interview/Vue/生命周期.md"}'),d={name:"Interview/Vue/生命周期.md"},p=a('<h3 id="对生命周期的理解" tabindex="-1">对生命周期的理解 <a class="header-anchor" href="#对生命周期的理解" aria-hidden="true">#</a></h3><p>Vue 的生命周期即一个 Vue 实例从被创建到被销毁的过程 可以分为 8 个阶段： beforeCreate：实例创建前 created：实例创建完成 beforeMount：挂载前 mounted：挂载完成 beforeUpdate：更新前 updated：更新完成 beforeDestory：销毁前 destoryed：销毁完成</p><ul><li><p>beforeCreate</p><p>new Vue 之后触发的第一个钩子，在当前阶段中 data、methods、computed 和 watch 上的数据和方法都不能被访问</p><p>beforeCreate 钩子调用是在 initState 之前的，initState 作用是对 props、data、methods、computed、watch 等属性进行初始化处理</p></li><li><p>created</p><p>实例被创建后发生，当前阶段已经完成了数据观测、可以使用数据、更改数据，在这里更改数据不会触发 updated 函数，可以做一些初始化数据的获取，当前阶段不能和 DOM 进行交互，但是可以通过 vm.$nextTick 来访问 DOM</p><p>initState 之后触发钩子函数，所以可以访问到 data、props、methods 等属性</p></li><li><p>beforeMount</p><p>实例挂载之前发生，在这之前 template 模板已经导入渲染函数编译，当前阶段虚拟 DOM 已经创建完成，即将开始渲染，在此时也可以对数据进行更改，不会触发 updated</p></li><li><p>mounted</p><p>挂载完成之后发生，真实 Dom 已经挂载完毕，数据完成双向绑定，可以访问到 dom 节点，使用$refs 属性对 dom 进行操作，也可以向后台发送请求，拿到返回数据</p></li><li><p>beforeUpdate</p><p>更新之前发生，也就是响应式数据发生更新，虚拟 dom 重新渲染之前被触发，可以在当前阶段进行数据更改，不会造成重新渲染</p></li><li><p>updated</p><p>更新完成之后发生，当前阶段 dom 已完成更新，需要注意的是在此期间应该避免更改数据，因为可能会导致无限循环的更新</p></li><li><p>beforeDestory</p><p>实例销毁之前发生，在当前阶段实例完全可以被使用，可以在这个阶段进行清除定时器等工作</p></li><li><p>destoryed</p><p>实例销毁之后发生，此阶段组件已被拆解，数据绑定被卸除，监听被移出，子组件实例也被销毁</p><p>在编写生命周期函数的时候不用使用箭头函数，因为底层代码 callHook 中，使用了 apply 和 call 改变了 this 指向</p></li></ul><h3 id="什么时候使用-beforedestory" tabindex="-1">什么时候使用 beforeDestory <a class="header-anchor" href="#什么时候使用-beforedestory" aria-hidden="true">#</a></h3><p>在 vue 实例销毁之前被调用，可以执行一些清理和释放资源的工作</p><ul><li>清理定时器，避免内存泄露和不必要的开销</li><li>取消异步操作，确保在销毁实例时不会触发不必要的回调或产生不稳定的行为</li><li>清理订阅，如果使用了观察者模式或者订阅发布模式，可以在这里取消订阅，确保不再接收到不需要的事件获取数据更新</li><li>销毁第三方库实例，如果在 vue 中使用了第三方库，比如地图库、图表库，可以在这里销毁这些库的实例，释放资源和避免内存泄露</li></ul><h3 id="vue-的父组件和子组件生命周期钩子函数执行顺序" tabindex="-1">Vue 的父组件和子组件生命周期钩子函数执行顺序 <a class="header-anchor" href="#vue-的父组件和子组件生命周期钩子函数执行顺序" aria-hidden="true">#</a></h3><ul><li><p>加载渲染过程</p><p>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p></li><li><p>子组件更新过程</p><p>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p></li><li><p>父组件更新过程</p><p>父 beforeUpdate -&gt; 父 updated</p></li><li><p>销毁过程</p><p>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p></li></ul><h3 id="在那个生命周期中调用异步请求" tabindex="-1">在那个生命周期中调用异步请求 <a class="header-anchor" href="#在那个生命周期中调用异步请求" aria-hidden="true">#</a></h3><p>可以在 created 和 mounted 生命周期中调用异步请求，如果需要在组件实例被创建时立即获取数据并且不依赖于 DOM 元素，可以使用 created；如果需要等待 DOM 准备好才执行一些操作，使用 mounted</p>',10),o=[p];function i(l,n,s,u,c,h){return r(),t("div",null,o)}const b=e(d,[["render",i]]);export{_ as __pageData,b as default};
