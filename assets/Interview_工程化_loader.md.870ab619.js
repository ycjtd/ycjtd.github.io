import{_ as s,c as a,o as l,d as e}from"./app.78019af7.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"loader 是什么","slug":"loader-是什么","link":"#loader-是什么","children":[]},{"level":3,"title":"手写一个 loader","slug":"手写一个-loader","link":"#手写一个-loader","children":[]},{"level":3,"title":"loader 的执行顺序","slug":"loader-的执行顺序","link":"#loader-的执行顺序","children":[]},{"level":3,"title":"常见的 loader","slug":"常见的-loader","link":"#常见的-loader","children":[]}],"relativePath":"Interview/工程化/loader.md"}'),n={name:"Interview/工程化/loader.md"},o=e(`<h3 id="loader-是什么" tabindex="-1">loader 是什么 <a class="header-anchor" href="#loader-是什么" aria-hidden="true">#</a></h3><p>webpack 只能处理 js 格式的资源，任何非 js 文件都必须被对应的 loader 处理转换成 js 代码</p><h3 id="手写一个-loader" tabindex="-1">手写一个 loader <a class="header-anchor" href="#手写一个-loader" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7B7F8B;">// 作用：将css内容，通过style标签插入到页面中</span></span>
<span class="line"><span style="color:#7B7F8B;">// source为要处理的css源文件</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">loader</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">source</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> style </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\`</span></span>
<span class="line"><span style="color:#E7EE98;">    let style = document.createElement(&#39;style&#39;);</span></span>
<span class="line"><span style="color:#E7EE98;">    style.setAttribute(&quot;type&quot;, &quot;text/css&quot;);</span></span>
<span class="line"><span style="color:#E7EE98;">    style.innerHTML = </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">source</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">;</span></span>
<span class="line"><span style="color:#E7EE98;">    document.head.appendChild(style)\`</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> style;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">module</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> loader;</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 作用：将css内容，通过style标签插入到页面中</span></span>
<span class="line"><span style="color:#6A737D;">// source为要处理的css源文件</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loader</span><span style="color:#24292E;">(</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> style </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">    let style = document.createElement(&#39;style&#39;);</span></span>
<span class="line"><span style="color:#032F62;">    style.setAttribute(&quot;type&quot;, &quot;text/css&quot;);</span></span>
<span class="line"><span style="color:#032F62;">    style.innerHTML = \${</span><span style="color:#24292E;">source</span><span style="color:#032F62;">};</span></span>
<span class="line"><span style="color:#032F62;">    document.head.appendChild(style)\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> style;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loader;</span></span>
<span class="line"></span></code></pre></div><h3 id="loader-的执行顺序" tabindex="-1">loader 的执行顺序 <a class="header-anchor" href="#loader-的执行顺序" aria-hidden="true">#</a></h3><p>相同优先级的 loader 链，执行顺序为从右到左，从下到上</p><h3 id="常见的-loader" tabindex="-1">常见的 loader <a class="header-anchor" href="#常见的-loader" aria-hidden="true">#</a></h3><ul><li>style-loader：把 css 注入到 JavaScript 中，通过 DOM 操作去加载 css</li><li>css-loader：加载 css</li><li>sass-loader：把 sass/scss 代码转换成 css</li><li>url-loader：和 file-loader 类似，区别是用户可以设置一个阈值，大于阈值交给 file-loader 处理，小于阈值返回文件的 base64 编码</li><li>vue-loader：加载 Vue.js 单文件组件</li><li>raw-loader：加载文件原始内容（utf-8）</li><li>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件</li><li>image-loader:加载并且压缩图片文件</li><li>json-loader:加载 JSON 文件</li><li>babel-loader：把 ES6 转换成 ES5</li><li>ts-loader：将 typescript 转换成 JavaScript</li></ul>`,8),p=[o];function t(r,c,i,d,y,F){return l(),a("div",null,p)}const E=s(n,[["render",t]]);export{h as __pageData,E as default};
