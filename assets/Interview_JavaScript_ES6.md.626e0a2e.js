import{_ as o,c as t,o as e,d as r}from"./app.58c7925b.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/JavaScript/ES6.md"}'),s={name:"Interview/JavaScript/ES6.md"},c=r("<ol><li><strong>块级作用域</strong>：引入<code>let</code>和<code>const</code>关键字，允许在块级作用域中声明变量，解决了变量提升和作用域污染的问题。</li><li><strong>箭头函数</strong>：使用箭头(<code>=&gt;</code>)定义函数，简化了函数的书写，并且自动绑定了<code>this</code>。</li><li><strong>模板字符串</strong>：使用反引号（`）包裹字符串，可以在字符串中使用变量和表达式，实现更灵活的字符串拼接和格式化。</li><li><strong>解构赋值</strong>：通过解构赋值语法，可以从数组或对象中提取值，并赋给对应的变量，简化了变量赋值的操作。</li><li><strong>默认参数</strong>：函数可以定义默认参数值，简化了函数调用时传参的操作。</li><li><strong>扩展运算符</strong>：使用三个点（<code>...</code>）进行数组和对象的展开操作，可以将一个数组或对象拆分为独立的元素，或者将多个数组或对象合并为一个。</li><li><strong>Promise</strong>：引入了<code>Promise</code>对象，用于更好地处理异步操作，解决了回调地狱的问题，并提供了更清晰的异步编程模式。</li><li><strong>类和模块化</strong>：ES6 引入了类的概念，可以使用<code>class</code>关键字定义类，实现了更接近传统面向对象编程的方式。同时，ES6 还提供了模块化的支持，可以使用<code>import</code>和<code>export</code>语法导入和导出模块。</li><li><strong>模块化</strong>：引入了模块化的概念，可以使用<code>import</code>和<code>export</code>语法导入和导出模块，提供了更好的代码组织和模块复用的方式。</li><li><strong>迭代器和生</strong>成器**：引入了迭代器和生成器的概念，可以通过自定义迭代器来遍历数据集合，并使用生成器函数来生成迭代器。</li><li><strong>管道操作符</strong>：提案阶段的特性，引入了管道操作符(<code>|&gt;</code>)，可以将表达式的结果作为参数传递给下一个表达式，简化了函数调用和方法链的写法。</li></ol>",1),i=[c];function n(d,l,a,_,g,p){return e(),t("div",null,i)}const f=o(s,[["render",n]]);export{S as __pageData,f as default};
