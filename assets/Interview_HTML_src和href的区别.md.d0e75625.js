import{_ as e,c,o,d as t}from"./app.a84b4934.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/HTML/src和href的区别.md"}'),r={name:"Interview/HTML/src和href的区别.md"},d=t("<p><strong>src</strong></p><ul><li>src 用于替换的当前元素</li><li><code>src</code>用于指定外部资源的地址，通常用于引入外部文件，如图片、音频、视频、脚本等，指向的内容会嵌入到文档中当前标签所在的位置。</li><li>常用于<code>&lt;img&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;iframe&gt;</code>, <code>&lt;audio&gt;</code>, <code>&lt;video&gt;</code>等标签，用于加载外部资源。</li><li>当浏览器解析到带有<code>src</code>属性的标签时，会立即请求指定地址的资源，暂停其它资源的下载和处理，直到将该资源加载、编译、执行完毕。因此，<code>src</code>属性会影响页面的加载和渲染速度。这也是为什么将 js 放在底部而不是头部。</li></ul><p><strong>href</strong></p><ul><li><code>href</code>指向网络资源所在位置，建立和当前元素或当前文档之间的链接</li><li>常用于<code>&lt;a&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;area&gt;</code>等标签，用于定义超链接和外部样式表。</li><li>当浏览器解析到带有<code>href</code>属性的标签时，不会立即请求资源，而是将链接添加到文档的超链接列表中。当用户点击链接时，才会根据<code>href</code>属性的值请求相应的资源。</li><li>如果使用 link 来引入 css 文件，会并行下载资源而且不会停止对当前文档的处理，这也是为什么建议使用 link 方式来加载 css，而不是@import 的方式。</li></ul>",4),i=[d];function l(s,_,a,n,p,f){return o(),c("div",null,i)}const m=e(r,[["render",l]]);export{h as __pageData,m as default};
