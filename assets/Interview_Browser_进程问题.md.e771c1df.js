import{_ as e,c as i,o as l,d as t}from"./app.72c7cb6e.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"什么是并行处理","slug":"什么是并行处理","link":"#什么是并行处理","children":[]},{"level":3,"title":"线程 VS 进程","slug":"线程-vs-进程","link":"#线程-vs-进程","children":[]},{"level":3,"title":"多进程架构","slug":"多进程架构","link":"#多进程架构","children":[]}],"relativePath":"Interview/Browser/进程问题.md"}'),r={name:"Interview/Browser/进程问题.md"},a=t('<h3 id="什么是并行处理" tabindex="-1">什么是并行处理 <a class="header-anchor" href="#什么是并行处理" aria-hidden="true">#</a></h3><p>并行处理就是同一时刻处理多个任务。</p><h3 id="线程-vs-进程" tabindex="-1">线程 VS 进程 <a class="header-anchor" href="#线程-vs-进程" aria-hidden="true">#</a></h3><p><strong>进程</strong>：一个进程就是一个程序的运行实例。启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码，运行中的数据和一个执行任务的主线程，这样一个运行环境叫做进程。（管理任务和资源分配的基本单位）。 <strong>线程</strong>是进程内的最小执行单位，是进程的一部分，一个进程可以包含多个线程。每个线程都有自己的独立执行路径和栈空间。</p><p>进程和线程的特点</p><ul><li>进程中的任一线程执行出错，都会导致整个进程奔溃</li><li>线程之间共享进程中的数据。</li><li>当一个进程关闭后，操作系统会回收进程所占用的内存</li><li>进程之间的内容相互隔离</li></ul><h3 id="多进程架构" tabindex="-1">多进程架构 <a class="header-anchor" href="#多进程架构" aria-hidden="true">#</a></h3><ul><li>浏览器进程：主要负责界面显示、用户交互、子进程管理、同时提供存储功能</li><li>渲染进程：将 HTML、CSS、JS 转换为用户可以与之交互的网页。</li><li>GPU 进程：绘制</li><li>网络进程：负责页面的网络资源加载。</li><li>插件进程：负责插件的运行，通过插件进程进行隔离，保证插件进行奔溃不会对浏览器和页面造成影响</li></ul>',8),s=[a];function n(d,o,_,c,h,p){return l(),i("div",null,s)}const f=e(r,[["render",n]]);export{v as __pageData,f as default};
