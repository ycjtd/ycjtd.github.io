const e={map:'[{"后端学习积累与总结":["0.0"],"node":["1.0","15.5"],"解决了什么问题":["1.1"],"js":["1.2","67.1","103.0","104.0","106.0","107.0","108.0","112.0","113.0","114.0","115.0","116.0","117.0","118.0","120.0","121.0","122.0","123.0"],"同步异步和阻塞非阻塞":["1.3"],"浏览器事件循环":["2.0"],"test1":["3.0"],"编程踩坑积累与总结":["4.0","5.0","9.0","152.0","154.0"],"testdddd":["6.0"],"移动端响应式":["7.0"],"响应式布局常用方法":["7.1"],"css":["8.0","12.0","21.0","82.2","155.8"],"水平布局":["8.1"],"文本":["8.2"],"单个块级元素":["8.3"],"多个块级元素":["8.4"],"使用绝对定位":["8.5"],"任意个元素":["8.6","8.11"],"垂直居中":["8.7"],"单行":["8.8","40.0"],"多行文本":["8.9"],"单个块元素":["8.10"],"水平垂直居中":["8.12"],"行内":["8.13"],"tabel":["8.14"],"绝对定位":["8.15","8.21"],"绝对居中":["8.16"],"flex":["8.17","8.22","8.24","8.27","24.4","25.0"],"两列布局":["8.18"],"float":["8.19","8.20","8.23","8.26"],"三列布局":["8.25"],"cdn":["13.0","80.9"],"是浏览器的核心部分":["14.0"],"参考文章":["15.0"],"什么是同源策略":["15.1"],"跨域解决方案":["15.2"],"jsonp":["15.3"],"cors":["15.4"],"用户输入":["16.0"],"什么是并行处理":["17.0"],"线程":["17.1"],"多进程架构":["17.2"],"是匹配元素之后的选择器":["18.0"],"是什么":["19.0"],"触发条件":["19.1"],"作用":["19.2"],"怎么修改":["20.0"],"产生原因":["20.1"],"解决方案":["20.2"],"合并压缩":["23.0"],"inline":["24.0","24.2"],"block":["24.1"],"none":["24.3"],"采用":["26.0"],"容器属性":["26.1"],"容器成员属性":["26.2"],"margin":["28.0"],"absolute":["29.0"],"fixed":["29.1"],"relative":["29.2"],"static":["29.3"],"inherit":["29.4"],"rem":["30.0"],"图像质量":["31.0"],"transition":["32.0"],"一栏固定宽度":["33.0"],"伪类":["34.0"],"dns":["37.0"],"fouc":["38.0"],"多数显示屏默认频率是":["39.0"],"为什么要清除浮动":["43.0"],"怎么清除":["43.1"],"原理":["44.0","102.1"],"实现":["44.1"],"在标准的":["45.0"],"原因":["46.0"],"解决":["46.1"],"id":["47.0"],"优先级":["47.1"],"前者是标准浏览器中的用法":["48.0"],"为什么需要":["49.0","76.4","92.9"],"a":["50.0"],"h5":["51.0"],"优点":["52.0","73.1"],"定义表单控件的关系":["53.0"],"相同点":["54.0"],"src":["55.0"],"怎么实现浏览器内多个标签的通信":["56.0"],"websocket":["56.1"],"localstorage":["56.2","80.6"],"cookie":["56.3","80.5"],"对语义化的理解":["57.0"],"你是怎么理解语义化的":["57.1"],"常见的语义化标签有哪些":["57.2"],"面试":["58.0"],"作为浏览器脚本语言":["60.0"],"this":["61.0"],"如何阻止事件冒泡和默认事件":["62.0"],"事件捕获和冒泡":["62.1"],"什么是作用域":["63.0"],"作用域的类型":["63.1"],"函数作用域":["63.2"],"块作用域":["63.3"],"var":["63.4"],"作用域链":["63.5"],"闭包":["63.6"],"原型的作用":["64.0"],"原型链":["64.1"],"原型链和作用域链的区别":["64.2"],"proto":["64.3"],"什么是内存泄漏":["65.0"],"内存泄漏的常见原因":["65.1"],"标记清除方法":["65.2"],"引用计数法":["65.3"],"怎么防止内存泄漏":["65.4"],"什么是执行上下文":["66.0"],"执行上下文分类":["66.1"],"执行上下文的特点":["66.2"],"什么是执行栈":["66.3"],"执行上下文的生命周期":["66.4"],"什么是变量对象":["66.5"],"javascript":["67.0","67.7"],"为什么要新增":["67.2","67.4"],"如果想要复用一个":["67.3"],"null":["67.5","67.6"],"判断数据类型的方法":["67.8"],"怎么判断一个数组":["67.9"],"如何判断一个对象是否为空":["67.10"],"为什么没":["67.11"],"isnan":["67.12"],"object":["67.13"],"为什么":["67.14","94.11","95.1","95.3"],"如何让":["67.15"],"quot":["67.16"],"set":["67.17"],"ajax":["68.0","95.6"],"axios":["68.1"],"检查浏览器中是否缓存过该域名对应的":["70.0"],"区别":["72.0"],"https":["72.1","72.3","87.3"],"混合加密":["72.2"],"对称加密和非对称加密":["72.4"],"怎么实现":["72.5"],"http1":["73.0"],"缺点":["73.2"],"性能":["73.3"],"如何优化":["73.4"],"http2":["73.5"],"有什么优点":["73.6"],"host":["74.0"],"概念":["75.0"],"为什么会有":["76.0"],"什么是":["76.1"],"tcp":["76.2","76.3","76.8"],"三次握手":["76.5"],"四次挥手":["76.6"],"ssl":["76.7"],"简单请求":["78.0"],"短沦陷":["79.0"],"缓存":["80.0"],"强缓存":["80.1"],"协商缓存":["80.2"],"决策指南":["80.3"],"本地存储":["80.4"],"sessionstorage":["80.7"],"indexdb":["80.8"],"懒加载":["81.0"],"防抖与节流":["81.1"],"服务端渲染":["82.0"],"浏览器":["82.1"],"dom":["82.3"],"在网络层面进行优化":["83.0"],"webpack":["83.1","100.0"],"不要让":["83.2"],"处理第三方库":["83.3"],"使用":["83.4"],"构建结果体积压缩":["83.5"],"gzip":["83.6"],"图片优化":["83.7"],"jpeg":["83.8"],"png":["83.9"],"svg":["83.10"],"base64":["83.11"],"webp":["83.12"],"跨站伪造请求":["84.0"],"就是通过把":["85.0"],"xss":["86.0"],"http":["87.0"],"tsl":["87.1"],"对称密钥加密和非对称密钥加密有什么区别":["87.2"],"中间人攻击的过程":["87.4"],"怎么预防中间人攻击":["87.5"],"防护原理":["88.0"],"区分用户是人还是机器":["89.0"],"watch":["90.0","90.3","92.2"],"computed":["90.1","90.2"],"vue":["91.0","91.3","91.8","94.4","94.5","94.6","94.10","95.5","95.10","95.12","95.14","95.17","95.23","95.24","96.2"],"route":["91.1"],"怎么定义动态路由":["91.2"],"hash":["91.4"],"router":["91.5"],"了解":["91.6"],"怎么监听":["91.7","93.2"],"怎么实现路由懒加载":["91.9"],"怎么从零开始实现一个":["91.10"],"proxy":["92.0"],"ref":["92.1"],"composition":["92.3","92.6"],"vue3":["92.4","92.5","92.7","92.8"],"setup":["92.10"],"从":["93.0","95.25"],"vuex":["93.1","93.3"],"pinia":["93.4"],"从零开始实现一个":["93.5"],"数据绑定机制":["94.0"],"template":["94.1"],"怎么监听对象或数组某个属性的变化":["94.2"],"什么是虚拟":["94.3"],"new":["94.7"],"diff":["94.8","94.14"],"响应式数据原理":["94.9"],"nexttick":["94.12"],"v":["94.13","95.2"],"谈谈对":["95.0"],"怎么获取":["95.4"],"对":["95.7","95.9","95.13"],"spa":["95.8"],"既然":["95.11"],"函数式组件的优势和原理":["95.15"],"组件之间通信方式有哪些":["95.16"],"子组件可以直接改父组件的数据吗":["95.18"],"组件和插件有什么区别":["95.19"],"sync":["95.20"],"ssr":["95.21"],"delete":["95.22"],"对生命周期的理解":["96.0"],"什么时候使用":["96.1"],"在那个生命周期中调用异步请求":["96.3"],"babel":["97.0","155.12"],"loader":["98.0","98.2","155.7"],"手写一个":["98.1"],"常见的":["98.3"],"扩展":["99.0"],"工作原理":["99.1"],"编写一个插件":["99.2"],"完整版":["100.1"],"文件指纹是打包后输出的文件名的后缀":["101.0"],"什么是热更新原理":["102.0"],"接收多个函数为参数":["105.0"],"promise":["110.0"],"race":["110.1"],"retry":["110.2"],"settimeout":["111.0"],"冒泡":["119.0"],"选择排序":["119.1"],"插入排序":["119.2"],"快速排序":["119.3"],"归并排序":["119.4"],"节流":["124.0"],"防抖":["124.1"],"算法记录":["125.0"],"题目":["126.0","127.0","128.0","129.0","130.0","131.0","132.0","133.0","134.0","135.0","136.0","137.0","138.0","139.2","140.0","141.0","142.0","143.0","144.0","145.0","146.0","147.0","149.0","150.0","151.0"],"二分查找的思路":["139.0"],"步骤":["139.1"],"链式存储":["148.0"],"测试":["153.0"],"搭建环境":["155.0"],"手动配置":["155.1"],"插件":["155.2"],"htmlwebpackplugin":["155.3"],"mini":["155.4"],"optimize":["155.5"],"uglifyjs":["155.6"],"style":["155.9"],"less":["155.10"],"postcss":["155.11"],"url":["155.13"]},{"0":["8.3","25.0","67.11","92.8","95.25","114.0","119.0","121.0"],"1":["20.2","22.0","25.0","27.0","33.0","35.0","36.0","41.0","42.0","43.1","59.0","61.0","64.3","66.1","66.2","67.9","67.11","67.16","69.0","71.0","73.0","73.4","73.6","75.0","83.3","87.3","91.5","91.9","92.7","93.1","93.3","93.4","93.5","94.10","94.12","95.14","95.15","95.17","95.18","95.19","95.24","95.25","100.1","109.0","114.0","121.0","142.0","153.0"],"2":["59.0","61.0","67.11","67.16","73.4","83.3","95.15","109.0","114.0","119.3"],"3":["61.0","67.16","73.4"],"6":["73.6"],"8":["83.9","96.0"],"24":["83.9"],"27":["141.0"],"28":["69.0"],"100":["41.0"],"304":["80.2"],"704":["139.2"],"tip":["0.0","4.0","5.0","9.0","58.0","125.0","152.0","154.0"],"是什么":["1.0","93.4","95.24","98.0"],"在处理高并发":["1.1"],"单线程":["1.2"],"同步就是再执行某段代码时":["1.3"],"事件循环主要是为了实现":["2.0"],"js":["2.0","7.1","12.0","49.0","54.0","64.3","68.0","82.0","95.21","97.0","98.1","99.2","105.0","110.0","110.1","110.2","111.0","119.0","119.1","119.2","119.3","119.4"],"的异步概念":["2.0"],"是单线程的":["2.0","49.0"],"进程":["2.0","17.1"],"计算机分配任务的最小单位":["2.0"],"进程中包含多个进程":["2.0"],"浏览器的进程":["2.0"],"每一个页面都是进程":["2.0"],"互不影响":["2.0"],"浏览器也有一个主进程":["2.0"],"用户界面":["2.0"],"什么是响应式":["7.0"],"响应式就是将界面设计成能够适应不同的设备":["7.0"],"如果将屏幕看成是容器":["7.0"],"使用":["7.1","8.10","56.2","67.9","76.7","83.3","90.2","91.0","94.9"],"vm":["7.1"],"定制":["7.1"],"rem":["7.1"],"自适应布局":["7.1"],"移动端使用":["7.1"],"布局需要通过":["7.1"],"设置不同屏幕宽高比的":["7.1"],"font":["7.1","30.0"],"size":["7.1","143.0"],"结合":["7.1"],"单位和":["7.1"],"calc":["7.1"],"常见布局":["8.0"],"行内元素":["8.2","8.9"],"行内块级元素":["8.2","8.9"],"margin":["8.3","8.19","8.26","33.0"],"css":["8.4","8.5","8.6","8.9","8.10","8.11","8.13","8.14","8.15","8.16","8.17","8.19","23.0","27.0","33.0","40.0","41.0","44.1","45.0","95.2","98.3","155.4","155.5"],"parent":["8.4","8.5","8.10","8.11","8.14","8.15","8.16","8.17","8.21","8.22","8.24","8.26","8.27","94.7","95.16"],"height":["8.5","41.0"],"200px":["8.5","33.0","40.0"],"width":["8.5","33.0","40.0","41.0","44.1"],"定宽":["8.5"],"行内":["8.8"],"行内块":["8.8"],"display":["8.10","8.11","8.17","35.0","36.0","95.2"],"table":["8.10","36.0"],"cell":["8.10","8.14","36.0"],"vertical":["8.10"],"align":["8.10"],"middle":["8.10"],"使用绝对定位":["8.10"],"flex":["8.10","26.0","26.1"],"原理":["8.10","12.0","15.3","90.3"],"子绝父相":["8.10","41.0"],"行内块级":["8.13"],"图片":["8.13","54.0"],"左列定宽":["8.18","8.26"],"body":["8.19","8.20","8.21","8.22","8.23","8.24","8.26","8.27"],"div":["8.19","8.20","8.21","8.22","8.23","8.24","8.26","8.27","40.0","116.0"],"overflow":["8.20","8.23"],"html":["8.20","8.21","8.22","8.23","8.24","8.26","8.27","12.0","19.1","45.0","46.1","57.1","82.1","95.21"],"id":["8.21","8.22","8.23","8.24","8.26","8.27","76.7","94.6","114.0","116.0","121.0"],"两列定宽":["8.25"],"left":["8.26","33.0"],"center":["8.26"],"中间定宽":["8.26"],"300ms":["11.0"],"延迟解决的是双击缩放":["11.0"],"双击缩放":["11.0"],"手指在屏幕快速点击两次":["11.0"],"safari":["11.0"],"加载不会阻塞":["12.0"],"dom":["12.0","60.0","62.0","62.1","82.2","94.3","94.8","95.4","95.16","95.21"],"树的解析":["12.0"],"加载会阻塞":["12.0"],"树的渲染":["12.0"],"加载会阻塞后面":["12.0"],"语句的执行":["12.0"],"解析文件":["12.0"],"生成":["12.0"],"tree":["12.0"],"缓存方便":["13.0"],"主要分为两个部分":["14.0"],"渲染引擎和":["14.0"],"javascript":["14.0","60.0","91.9","94.3","98.3","148.0"],"https":["15.0","72.0","126.0","127.0","128.0","129.0","130.0","131.0","132.0","133.0","134.0","135.0","136.0","137.0","138.0","139.2","140.0","141.0","142.0","143.0","145.0","146.0","147.0","149.0","150.0","151.0"],"同源就是指":["15.1"],"url":["15.1","16.0","91.4","103.0"],"中的协议":["15.1"],"利用":["15.3"],"script":["15.3"],"标签没有跨域限制的漏洞":["15.3"],"网页可以得到从其它来源动态产生的":["15.3"],"json":["15.3"],"数据":["15.3"],"优点是简单兼容性好":["15.3"],"可以用于解决主流浏览器的跨域数据访问的问题":["15.3"],"缺点是只支持":["15.3"],"get":["15.3","71.0","78.0"],"服务端设置":["15.4"],"access":["15.4"],"control":["15.4","80.1","80.3"],"allow":["15.4"],"origin":["15.4"],"中间件代理":["15.5"],"并回车":["16.0"],"浏览器进程检查":["16.0"],"组装协议":["16.0"],"构成完整的":["16.0"],"浏览器进程通过进程间通信":["16.0"],"ipc":["16.0"],"把":["16.0","98.3"],"请求发送给网络进程":["16.0"],"网络进程接收到":["16.0"],"请求后检查本地缓存是否缓存了该请求资源":["16.0"],"如果有则将该资源返回给浏览器进程":["16.0"],"并行处理就是同一时刻处理多个任务":["17.0"],"vs":["17.1"],"浏览器进程":["17.2"],"主要负责界面显示":["17.2"],"是匹配相邻元素的选择器":["18.0"],"块级格式化上下文":["19.0"],"根元素":["19.1"],"或包含根元素的元素":["19.1"],"清除浮动":["19.2"],"当一个元素的子元素都是浮动元素时":["19.2"],"chrome":["20.0"],"由于":["20.1","46.0"],"里的":["21.0"],"visibility":["21.0"],"属性有个":["21.0"],"collapse":["21.0"],"属性值":["21.0"],"使元素变成行内元素":["24.0"],"使元素变成块级元素":["24.1"],"block":["24.2"],"不显示":["24.3"],"弹性盒子布局":["24.4"],"实际上是":["25.0"],"grow":["25.0"],"shrink":["25.0"],"和":["25.0","28.0","49.0","59.0","67.5","67.12","67.13","73.6","76.8","80.1","83.9","90.1","91.1","91.4","91.5","92.1","92.2","92.3","92.5","92.6","93.1","95.2","95.3","95.20","95.22","133.0","135.0"],"basis":["25.0"],"direction":["26.1"],"决定主轴的方向":["26.1"],"row":["26.1"],"reverse":["26.1","126.0","127.0","136.0","137.0"],"主轴为水平方向":["26.1"],"起点在左端":["26.1"],"column":["26.1"],"主轴为垂直方向":["26.1"],"起点在上沿":["26.1"],"order":["26.2"],"项目排列顺序":["26.2"],"数值越小越靠前":["26.2"],"默认为":["26.2","33.0"],"import":["27.0"],"是":["27.0","95.13"],"提供的语法规则":["27.0"],"只有导入样式表的作用":["27.0"],"link":["27.0","91.5"],"重叠指的是在垂直方向上":["28.0"],"两个相邻元素的":["28.0"],"发生重叠的情况":["28.0"],"一般来说可以分为四种情形":["28.0"],"第一种是相邻兄弟元素的":["28.0"],"marin":["28.0"],"bottom":["28.0"],"生成绝对定位的元素":["29.0","29.1"],"生成相对定位的元素":["29.2"],"默认值":["29.3"],"规定应该从父元素继承":["29.4"],"单位是根据根元素的":["30.0"],"svg":["31.0"],"使用矢量图形":["31.0"],"可以无限放大而不失真":["31.0"],"canvas":["31.0"],"只能定义两个状态":["32.0"],"右边一栏宽度自适应":["33.0"],"利用浮动":["33.0"],"左边元素定宽":["33.0"],"向左浮动":["33.0"],"float":["33.0"],"右边元素":["33.0"],"宽度设置为":["33.0"],"auto":["33.0"],"撑满整个盒子":["33.0"],"用于当已有元素处于某个状态时":["34.0"],"none":["35.0","95.2"],"把元素隐藏起来":["35.0"],"使元素完全从渲染树中消失":["35.0"],"不占据任何空间":["35.0"],"会改变页面布局":["35.0"],"可以理解为在页面中把该元素删掉":["35.0"],"预解析":["37.0"],"指的是在页面加载过程中":["38.0"],"由于外部样式表加载较慢或延迟":["38.0"],"导致页面先以无样式的方式显示":["38.0"],"然后突然闪烁出样式的现象":["38.0"],"60hz":["39.0"],"就是":["39.0"],"1s":["39.0"],"transform":["41.0"],"box":["41.0"],"background":["41.0"],"color":["41.0"],"red":["41.0"],"100vh":["41.0"],"position":["41.0"],"relative":["41.0"],"元素为行内元素":["42.0"],"设置父元素":["42.0"],"text":["42.0","114.0","121.0"],"clear":["43.1"],"属性":["43.1"],"在浮动元素后添加一个空元素":["43.1"],"相邻边框连接处的均分原理":["44.0"],"test":["44.1"],"盒子模型中":["45.0"],"每个":["45.0"],"元素被表示为一个矩形盒子":["45.0"],"删除":["46.1"],"代码中的空白字符":["46.1"],"选择器":["47.0"],"同一级别":["47.1"],"就近原则":["47.1"],"后者":["48.0"],"ie8":["48.0"],"以下":["48.0"],"async":["49.0"],"defer":["49.0"],"如果没有":["49.0"],"元素除了导航外":["50.0"],"新特性":["51.0","92.7"],"为了更好的实现语义化":["51.0"],"新增了":["51.0"],"header":["51.0","57.2"],"内容隔离":["52.0"],"当用户选择":["53.0"],"label":["53.0"],"都是告知浏览器提前加载文件":["54.0"],"视频":["54.0","55.0"],"用于替换的当前元素":["55.0"],"用于指定外部资源的地址":["55.0"],"通常用于引入外部文件":["55.0"],"如图片":["55.0"],"音频":["55.0"],"建立":["56.1"],"连接":["56.1"],"const":["56.1","59.0","63.4","103.0","104.0","107.0","119.0","119.2","119.4"],"在一个标签页内使用":["56.2"],"setitem":["56.2"],"key":["56.2","94.6"],"value":["56.2"],"内容":["56.2"],"在另一个标签页里面监听":["56.2"],"storage":["56.2"],"事件":["56.2"],"setinterval":["56.3","111.0"],"将要传递的消息存储在":["56.3"],"语义化的好处":["57.1"],"我认为":["57.1"],"语义化主要指的是我们应该用合适的标签来划分网页内容的结构":["57.1"],"的本质作用其实就是定义网页内容的结构":["57.1"],"页眉":["57.2"],"网站标题":["57.2"],"块级作用域":["59.0"],"引入":["59.0"],"let":["59.0","63.4","117.0","118.0","119.0"],"关键字":["59.0"],"允许在块级作用域中声明变量":["59.0"],"解决了变量提升和作用域污染的问题":["59.0"],"的主要用途是和用户交互以及操作":["60.0"],"所以只能是单线程":["60.0"],"如果不是单线程":["60.0"],"会带来很复杂的同步问题":["60.0"],"比如一个线程在":["60.0"],"节点上添加内容":["60.0"],"另一个线程删除节点":["60.0"],"此时浏览器不知道以那个为准":["60.0"],"同一个时间只能做一件事":["60.0"],"所有任务都需要排队":["60.0"],"前一个任务结束":["60.0"],"才会执行后一个任务":["60.0"],"如果前一个任务耗时很长":["60.0"],"后一个任务就不得不一直等着":["60.0"],"的绑定方式":["61.0"],"默认绑定":["61.0"],"非严格模式下":["61.0"],"指向全局对象":["61.0"],"严格模式下函数内的":["61.0"],"指向":["61.0"],"undefined":["61.0","67.5"],"但是不会改变全局中":["61.0"],"的指向":["61.0"],"隐式绑定":["61.0"],"当函数引用有上下文对象的时候":["61.0"],"比如":["61.0"],"obj":["61.0","106.0","122.0"],"foo":["61.0"],"的调用方式":["61.0"],"内的":["61.0"],"就是说指向调用者":["61.0"],"显示绑定":["61.0"],"标准的":["62.0"],"对象中可以使用事件对象的":["62.0"],"事件捕获阶段":["62.1"],"处于目标阶段":["62.1"],"事件冒泡阶段":["62.1"],"事件流是一个事件沿着特定数据结构传播的过程":["62.1"],"冒泡和捕获是事件流在":["62.1"],"中两种不同的传播方法":["62.1"],"事件捕获":["62.1"],"作用域就是可访问变量的集合":["63.0"],"全局作用域":["63.1"],"指的是声明在函数内部的变量":["63.2"],"块作用域由":["63.3"],"当查找变量的时候":["63.5"],"有权访问另外一个函数作用域中的变量的函数":["63.6"],"主要的就两点":["63.6"],"一是是一个函数":["63.6"],"二是能访问另外一个函数作用域中的变量":["63.6"],"闭包的特性":["63.6"],"可以访问当前函数以外的变量":["63.6"],"即使外部函数已经返回":["63.6"],"闭包仍然能访问外部函数定义的变量":["63.6"],"闭包可以更新外部变量的值":["63.6"],"使用闭包应该注意什么":["63.6"],"内存泄露":["63.6"],"闭包会捕获外部函数的变量":["63.6"],"所以在闭包内部可以访问这些变量":["63.6"],"但是需要注意的是闭包会保持对外部变量的引用":["63.6"],"导致这些变量不会被销毁":["63.6"],"可能导致内存泄露问题":["63.6"],"变量命名冲突":["63.6"],"当闭包内部和外部作用域中存在相同名称的变量的时候":["63.6"],"闭包内部的变量会覆盖外部变量":["63.6"],"所以需要避免变量命名冲突":["63.6"],"闭包的实现原理是什么":["63.6"],"原型被定义为给其它对象提供共享属性的对象":["64.0"],"作用就是当你在访问一个对象上的属性的时候":["64.1"],"原型链是查找对象上的属性":["64.2"],"prototype":["64.3","104.0"],"constructor":["64.3","106.0","107.0","108.0","110.0","115.0"],"对象分为两种":["64.3"],"内存泄漏是指应当被回收的对象没有被正常回收":["65.0"],"创建全局变量":["65.1"],"标记阶段":["65.2"],"将资源被引用的次数保存起来":["65.3"],"及时清除引用":["65.4"],"当前":["66.0"],"全局执行上下文":["66.1"],"只有一个":["66.1"],"是一种":["66.3"],"先进后出":["66.3"],"的数据结构":["66.3"],"主要分为两个阶段":["66.4"],"变量对象是和执行上下文相关的数据作用域":["66.5"],"是什么语言":["67.0"],"都有什么数据类型":["67.1"],"基本数据类型":["67.1"],"string":["67.1","127.0","136.0"],"symbol":["67.2","67.3"],"主要是为了解决全局变量冲突的问题":["67.2"],"该怎么操作":["67.3"],"bigint":["67.4"],"的区别":["67.5","67.17","68.1","90.1","91.1","92.2","92.6","95.2","95.20"],"是对象吗":["67.6"],"为什么":["67.6"],"数据如何存储":["67.7"],"typeof":["67.8"],"可以判断除了":["67.8"],"null":["67.8"],"之外的原始数据类型":["67.8"],"判断":["67.8"],"instanceof":["67.9"],"方法":["67.9","94.9"],"运算符判断对象是否为数组":["67.9"],"返回布尔值":["67.9"],"object":["67.10","92.0","94.9"],"keys":["67.10"],"number":["67.12","134.0"],"is":["67.13","107.0"],"隐式类型转换":["67.14"],"if":["67.15","95.2","95.3","119.3","122.0"],"a":["67.15","116.0","127.0","132.0"],"map":["67.16","67.17","108.0"],"weakset":["67.17"],"weakmap":["67.17","122.0"],"是一种异步通信的方法":["68.0"],"通过直接由":["68.0"],"脚本向服务器发起":["68.0"],"http":["68.0","72.0","72.1","73.4","73.6","79.0","80.1","80.5"],"通信":["68.0"],"然后根据服务器返回的数据":["68.0"],"更新网页的相应部分":["68.0"],"而不用刷新整个页面的一种方法":["68.0"],"用途":["68.0"],"ajax":["68.1"],"fetch":["68.1"],"cdn":["69.0"],"的基本原理是广泛采用各种缓存服务器":["69.0"],"将这些缓存服务器分布到用户访问相对集中的地区或者网络中":["69.0"],"在用户访问网站的时候":["69.0"],"将其指向距离最近的工作正常的缓存服务器上":["69.0"],"由缓存服务器直接响应用户请求":["69.0"],"主要特点":["69.0"],"本地":["69.0"],"cache":["69.0","80.1","80.3"],"加速":["69.0"],"提高了企业站点":["69.0"],"尤其含有大量图片和静态页面站点":["69.0"],"ip":["70.0","73.3","76.2"],"地址":["70.0"],"如果浏览器缓存中没有命中":["70.0"],"是从服务器获取指定的资源":["71.0"],"post":["71.0","78.0"],"是超文本传输协议":["72.0"],"明文传输":["72.0"],"存在安全风险的问题":["72.0"],"解决了哪些问题":["72.1"],"存在的问题":["72.1","73.6"],"通过混合加密的方法保证信息的机密性":["72.2"],"握手过程":["72.3"],"第一步":["72.3"],"客户端给出协议版本号":["72.3"],"一个客户端生成的随机数":["72.3"],"对称加密":["72.4"],"对称加密指的就是加密和解密使用同一个秘钥":["72.4"],"所以叫做对称加密":["72.4"],"对称加密只有一个秘钥":["72.4"],"非对称加密":["72.4"],"加密和解密使用不同的秘钥":["72.4"],"一把作为公开的公钥":["72.4"],"另一把作为私钥":["72.4"],"公钥加密的信息":["72.4"],"token":["72.5"],"加密":["72.5"],"需要一个":["72.5"],"简单":["73.1"],"灵活和好扩展":["73.1"],"无状态":["73.2"],"基于":["73.3","83.3"],"tcp":["73.3","73.6","76.0","76.1","76.4"],"使用请求":["73.3"],"应答的通信模式":["73.3"],"在":["73.3","91.2","92.10","93.4","95.5","95.19","96.1","155.3"],"主要从以下三个方面来进行考虑":["73.4"],"尽量避免发送":["73.4"],"请求":["73.4","79.0"],"在需要发送":["73.4"],"请求的时候":["73.4"],"考虑如何减少":["73.4"],"请求数":["73.4"],"减少服务器的":["73.4"],"响应的数据大小":["73.4"],"避免发送":["73.4"],"对于一些具有重复性的":["73.4"],"http2":["73.6"],"的出现是为了解决":["73.6"],"http1":["73.6"],"中存在以下问题":["73.6"],"并发连接有限":["73.6"],"比如谷歌浏览器的最大并发连接数是":["73.6"],"个":["73.6"],"而且每一个连接都要经过":["73.6"],"tsl":["73.6"],"握手的耗时":["73.6"],"队头阻塞问题":["73.6"],"同一个连接只能在完成一个":["73.6"],"请求和响应之后":["73.6"],"才能处理下一个请求":["73.6"],"头部巨大而且重复":["73.6"],"因为":["73.6"],"协议是无状态的":["73.6"],"每一个请求都得携带":["73.6"],"客户端发送请求的时候":["74.0"],"用于指定服务器的域名":["74.0"],"当用户在身份认证服务器上登录过一次之后":["75.0"],"即可获取访问单点登录系统中的其它关联系统和应用软件的权限":["75.0"],"实现机制":["75.0"],"当用户第一次访问应用系统":["75.0"],"的时候":["75.0"],"因为还没有登录":["75.0"],"会被引导到认证系统中进行登录":["75.0"],"网络模型有几层":["76.2"],"应用层":["76.2"],"应用层处于最上层":["76.2"],"用户能够直接接触到的就是应用层":["76.2"],"比如手机和电脑上的软件":["76.2"],"应用层的作用主要就是产生数据":["76.2"],"将数据传给传输层":["76.2"],"应用层工作在系统的用户态":["76.2"],"而传输层之下的工作在内核态":["76.2"],"头格式有哪些":["76.3"],"序列号":["76.3"],"在建立连接的时候由计算机生成的随意数作为其初始值":["76.3"],"一开始":["76.5"],"客户端和服务端都是":["76.5"],"close":["76.5"],"状态":["76.5","76.6"],"先是服务端主动监听某个端口":["76.5"],"处于":["76.5"],"listen":["76.5"],"第一次挥手":["76.6"],"客户端发送一个":["76.6"],"fin":["76.6"],"报文":["76.6"],"报文中会指定一个序列号":["76.6"],"此时客户端处于":["76.6"],"wait1":["76.6"],"停止发送数据":["76.6"],"断开连接后如何恢复":["76.7"],"通过":["76.7","98.3"],"session":["76.7"],"udp":["76.8"],"区别":["76.8","95.2"],"是面向连接的":["76.8"],"是无连接的即发送数据前不需要先建立链接":["76.8"],"1xx":["77.0"],"2xx":["77.1"],"成功":["77.1"],"3xx":["77.2"],"表示客户端请求的资源发生了变动":["77.2"],"需要客户端用新的":["77.2"],"4xx":["77.3"],"5xx":["77.4"],"head":["78.0"],"浏览器每隔一段时间向服务器发送":["79.0"],"服务器端在收到请求后":["79.0"],"不论是否有数据更新":["79.0"],"都直接进行":["79.0"],"响应":["79.0"],"这种方式实现的即时通信":["79.0"],"缓存可以减少网络":["80.0"],"io":["80.0"],"消耗":["80.0"],"强缓存是利用":["80.1"],"头中的":["80.1"],"expires":["80.1"],"两个字段来控制的":["80.1"],"强缓存中":["80.1"],"当请求再次发出时":["80.1"],"浏览器会根据其中的":["80.1"],"判断目标资源是否命中强缓存":["80.1"],"如果命中直接从缓存中获取资源":["80.1"],"不会再与服务端发起通信":["80.1"],"协商缓存依赖于浏览器和服务端之间的通信":["80.2"],"协商缓存机制下":["80.2"],"浏览器需要向服务器去询问缓存的相关信息":["80.2"],"进而判断是重新发起请求":["80.2"],"下载完整的响应":["80.2"],"还是从本地获取缓存的资源":["80.2"],"如果服务端提示资源未改动":["80.2"],"not":["80.2"],"modified":["80.2"],"资源会被重定向到浏览器缓存":["80.2"],"实现协商缓存":["80.2"],"last":["80.2"],"当我们的资源不可复用的时候":["80.3"],"之间为":["80.3"],"为":["80.3"],"no":["80.3"],"store":["80.3","93.1"],"拒绝一切形式的缓存":["80.3"],"否则考虑是否每次都需要向服务器进行缓存有效确认":["80.3"],"如果需要":["80.3"],"设置为":["80.3"],"是一个无状态协议":["80.5"],"服务器接收客户端的请求":["80.5"],"返回一个响应":["80.5"],"持久化的本地存储":["80.6"],"会话级别的存储":["80.7"],"当会话结束":["80.7"],"运行在浏览器上的非关系型数据库":["80.8"],"的缓存和回源机制":["80.9"],"内容分发网络指的是一组分布在各个地区的服务器":["80.9"],"这些服务器存储着数据的副本":["80.9"],"针对图片加载时机的优化":["81.0"],"在一些图片量比较大的网站":["81.0"],"如果尝试在用户打开页面的时候":["81.0"],"本质上都是闭包":["81.1"],"首先是客户端渲染":["82.0"],"在客户端渲染模式下":["82.0"],"服务端会把渲染需要的静态文件发送给客户端":["82.0"],"客户端加载过来之后":["82.0"],"自己在浏览器里跑一遍":["82.0"],"渲染过程":["82.1"],"简单来说就是渲染引擎根据":["82.1"],"文件描述构建相应的数学模型了":["82.1"],"调用浏览器各个模块":["82.1"],"将网页资源代码转换成图像结果":["82.1"],"这个过程就是渲染过程":["82.1"],"解释器":["82.1"],"优化":["82.2","82.3"],"避免使用通配符":["82.2"],"只对需要用到的元素进行选择":["82.2"],"关注可以通过继承实现的属性":["82.2"],"避免重复匹配重复定义":["82.2"],"少用标签选择器":["82.2"],"减少嵌套":["82.2"],"是阻塞渲染的资源":["82.2"],"树和":["82.2"],"cssom":["82.2"],"合并构建成渲染树":["82.2"],"减少":["82.3"],"操作":["82.3","94.8"],"回流":["82.3"],"有三个地方可以进行优化":["83.0"],"分别是":["83.0"],"dns":["83.0"],"loader":["83.2","95.24","98.1","98.3","100.1","155.8","155.9","155.10","155.11","155.12","155.13"],"做太多事情":["83.2"],"dllplugin":["83.3"],"这个插件会把第三方库单独打包到一个文件中":["83.3"],"这个文件就是一个单纯的依赖库":["83.3"],"这个依赖库不会跟着你的业务代码一起被打包":["83.3"],"只有当依赖自身发生版本变化时才会重新打包":["83.3"],"的步骤":["83.3"],"dll":["83.3"],"的配置文件":["83.3"],"打包":["83.3"],"库":["83.3"],"happypack":["83.4"],"将":["83.4"],"loder":["83.4"],"将文件结果可视化":["83.5"],"找出导致体积过大的原因":["83.5"],"包组成可视化工具":["83.5"],"webpack":["83.5","99.0","99.1","100.1","155.1","155.3","155.6","155.7"],"bundle":["83.5"],"analyer":["83.5"],"配置方式和普通":["83.5"],"plugin":["83.5","155.4","155.6"],"一样":["83.5"],"能够以矩形树图的形式将包内各个模块的大小和依赖关系呈现出来":["83.5"],"压缩":["83.6"],"在请求头中通过":["83.6"],"accept":["83.6"],"encoding":["83.6"],"来开启":["83.6"],"图片在所有资源中所占的比重是非常大的":["83.7"],"当下应用比较广泛的":["83.7"],"web":["83.7","85.0"],"图片格式有":["83.7"],"jpg":["83.8"],"有损压缩":["83.8"],"体积小":["83.8","83.10"],"加载快":["83.8"],"是一种无损压缩的高保真的图片格式":["83.9"],"文本文件":["83.10","83.11"],"不失真":["83.10"],"兼容性好":["83.10"],"依赖编码":["83.11"],"小图标解决方案":["83.11"],"和精灵图一样":["83.11"],"都是用于解决小图标的":["83.11"],"精灵图就是将小图标合并到一张图片上":["83.11"],"然后利用":["83.11"],"google":["83.12"],"开发的旨在加快图片加载速度的图片格式":["83.12"],"支持有损压缩和无损压缩":["83.12"],"优点":["83.12"],"具备":["83.12"],"防护原理":["84.0"],"sql":["85.0"],"命令插入到":["85.0"],"cross":["86.0"],"site":["86.0"],"scripting":["86.0"],"是明文传输":["87.0"],"中的加密":["87.1"],"对称密钥加密是最简单的一种加密方式":["87.2"],"加解密都是相同的密钥":["87.2"],"加密过程":["87.3"],"客户端请求网址":["87.3"],"例如www":["87.3"],"客户端请求被劫持":["87.4"],"将所有的请求发送到中间人的服务器":["87.4"],"中间人服务器返回自己的证书":["87.4"],"使用正规厂商的证书":["87.5"],"验证文件类型和大小":["88.0"],"防止恶意破解":["89.0"],"的":["90.0","93.1","94.8"],"deep":["90.0"],"watch":["90.1","93.2"],"的实现":["90.2"],"初始化":["90.2","155.0"],"data":["90.2","95.1"],"本质上是为每个监听属性":["90.3"],"setter":["90.3","94.9"],"路由传参":["91.0"],"router":["91.1","91.8"],"怎么获取传过来的参数":["91.2"],"里面":["91.3"],"history":["91.4","91.6"],"路由模式实现原理":["91.4"],"模式":["91.4"],"早期的前端路由的实现就是基于":["91.4"],"location":["91.4"],"来实现的":["91.4"],"其实现原理很简单":["91.4"],"的值就是":["91.4"],"中":["91.4","93.1","93.4","94.6","98.3"],"后面的内容":["91.4"],"比如下面这个网站":["91.4"],"它的":["91.4"],"view":["91.5","95.13"],"是怎么起作用的":["91.5"],"vue":["91.5","91.10","94.7","94.8","94.11","95.0","95.1","95.11","95.19","95.21","95.25","96.0"],"有哪些方法吗":["91.6"],"这个对象在":["91.6"],"html5":["91.6"],"pushstate":["91.7"],"如何保护路由":["91.8"],"当打包构建应用时":["91.9"],"包会变得非常大":["91.9"],"影响页面加载":["91.9"],"路由":["91.10"],"一个":["91.10"],"spa":["91.10","95.7"],"应用的路由需要解决的问题是":["91.10"],"与":["92.0","95.16"],"defineproperty":["92.0","94.9"],"优劣对比":["92.0"],"watcheffect":["92.2"],"api":["92.3","92.6","92.7"],"options":["92.3"],"对":["92.4"],"vue2":["92.4","92.5","94.4","94.9","95.14"],"react":["92.6"],"hooks":["92.6"],"层面":["92.7"],"新特性主要包括":["92.7"],"composition":["92.7"],"速度快的原因":["92.8"],"性能提升体现在哪些方面":["92.8"],"代码层面性能优化主要体现在全新响应式":["92.8"],"ref":["92.9","95.16","95.23"],"toref":["92.9"],"torefs":["92.9"],"为什么需要用":["92.9"],"返回值类型":["92.9"],"会丢失响应式":["92.9"],"如何获取组件实例":["92.10"],"vuex":["93.0","93.2","93.4","93.5"],"actions":["93.1"],"mutations":["93.1"],"有什么区别":["93.1"],"改":["93.1"],"中的状态的唯一方法是提交":["93.1"],"数据的变化":["93.2"],"可以通过":["93.2"],"选项或者":["93.2"],"页面刷新数据丢失怎么解决":["93.3"],"只是在内存保存状态":["93.3"],"刷新之后就会丢失":["93.3"],"有什么优点":["93.4"],"vue3":["93.4"],"可以使用传统的":["93.4"],"来实现状态管理":["93.4"],"也可以使用最新的":["93.4"],"说说思路":["93.5"],"官方说":["93.5"],"是一个状态管理模式和库":["93.5"],"并确保这些状态以可预期的方式变更":["93.5"],"采用数据劫持结合发布者":["94.0"],"编译":["94.1"],"转换成":["94.1"],"ast":["94.1"],"树":["94.1"],"得到":["94.1"],"render":["94.1"],"函数返回":["94.1"],"set":["94.2","120.0"],"作用是什么":["94.3"],"只是一层真实":["94.3"],"的抽象":["94.3"],"以":["94.3"],"对象作为基础的树":["94.3"],"怎么检测数组的变化":["94.4"],"怎么进行依赖收集":["94.5"],"依赖收集的目的是等数据变化了可以自动更新视图":["94.5"],"的作用和原理":["94.6"],"给每一个":["94.6"],"vnode":["94.6"],"一个唯一的":["94.6"],"可以依靠":["94.6"],"过程做了什么":["94.7"],"内部会初始化组件绑定的事件":["94.7"],"初始化组件的父子关系":["94.7"],"children":["94.7","95.16","116.0","121.0"],"算法原理":["94.8"],"操作是非常昂贵的":["94.8"],"因此我们需要尽量地减少":["94.8"],"这就需要找出本次":["94.8"],"必须更新的节点来更新":["94.8"],"其他的不更新":["94.8"],"这个找出的过程":["94.8"],"就需要应用":["94.8"],"算法":["94.8"],"数据劫持":["94.9"],"观察者模式":["94.9"],"对象内部通过":["94.9"],"definereactive":["94.9"],"来劫持各个属性的":["94.9"],"getter":["94.9"],"只会劫持已经存在的属性":["94.9"],"数组则是通过":["94.9"],"重写数组7个方法":["94.9"],"来实现":["94.9"],"当页面使用对应属性时":["94.9"],"每个属性都拥有自己的":["94.9"],"实例挂载的过程中发生了什么":["94.10"],"挂载过程指的是":["94.10"],"采用异步渲染":["94.11"],"是组件级更新":["94.11"],"实现原理":["94.12","94.13"],"主要是使用了宏任务和微任务":["94.12"],"定义一个异步方法":["94.12"],"多次调用":["94.12"],"会将方法存入到队列中":["94.12"],"通过这个异步方法清空当前队列":["94.12"],"中的回调是在下次":["94.12"],"model":["94.13","95.13","95.20"],"我们在":["94.13"],"算法的时间复杂度":["94.14"],"的理解":["95.0","95.9","95.13","95.21"],"组件中":["95.1"],"show":["95.2"],"隐藏则是为该元素添加":["95.2"],"v":["95.3","95.20"],"for":["95.3","117.0","118.0","119.0"],"初始化页面闪动问题":["95.5"],"请求应该放在":["95.6"],"methods":["95.6"],"页面的理解":["95.7"],"优缺点":["95.7"],"首屏加载慢怎么解决":["95.8"],"什么叫首屏加载时间":["95.8"],"浏览器从响应用户输入网站地址":["95.8"],"keep":["95.9"],"alive":["95.9"],"observable":["95.10"],"通过数据劫持可以精准探测数据变化":["95.11"],"mixin":["95.12"],"使用场景和原理":["95.12"],"在日常的开发中":["95.12"],"mvvm":["95.13"],"viewmodel":["95.13"],"缩写":["95.13"],"也就是把":["95.13"],"组件为什么只有一个根元素":["95.14"],"中组件确实只能有一个根":["95.14"],"函数式组件需要在声明组件是指定":["95.15"],"functional":["95.15"],"true":["95.15"],"不需要实例化":["95.15"],"所以没有":["95.15"],"this":["95.15","104.0","107.0","108.0","110.0","115.0"],"props":["95.16"],"emit":["95.16"],"适用":["95.16"],"父子组件通信":["95.16"],"父组件向子组件传递数据是通过":["95.16"],"prop":["95.16","95.18"],"传递的":["95.16"],"子组件传递数据给父组件是通过":["95.16"],"触发事件来做到的":["95.16"],"vue3废弃":["95.16"],"如果在普通的":["95.16"],"元素上使用":["95.16"],"如何扩展一个组件":["95.17"],"常见的组件扩展方法有":["95.17"],"所有的":["95.18"],"都使得其父子之间形成了一个单向下行绑定":["95.18"],"父级":["95.18"],"组件是什么":["95.19"],"组件就是把图形":["95.19"],"非图形的各种逻辑均抽象为一个统一的概念":["95.19"],"组件":["95.19","95.21"],"来实现开发的模式":["95.19"],"中每一个":["95.19"],"文件都可以视为一个组件":["95.19"],"组件的优势":["95.19"],"降低整个系统的耦合度":["95.19"],"在保持接口不变的情况下":["95.19"],"我们可以替换不同的组件快速完成需求":["95.19"],"是构建客户端应用程序的框架":["95.21"],"默认情况下":["95.21"],"可以在浏览器中输出":["95.21"],"进行生成":["95.21"],"和操作":["95.21"],"然而":["95.21"],"也可以将同一个组件渲染为服务端的":["95.21"],"字符串":["95.21"],"将它们直接发送到浏览器":["95.21"],"最后将这些静态标记":["95.21"],"激活":["95.21"],"为客户端上完全可交互的应用程序":["95.21"],"也就是服务端渲染":["95.21"],"也就是将":["95.21"],"在客户端把标签渲染成":["95.21"],"的作用":["95.23"],"有什么作用":["95.24"],"是用于处理单文件组件":["95.24"],"sfc":["95.24"],"到":["95.25"],"自己构架一个":["95.25"],"项目":["95.25"],"有哪些步骤":["95.25"],"哪些重要插件":["95.25"],"目录结构怎么组织":["95.25"],"创建一个项目我大致会做以下事情":["95.25"],"项目构建":["95.25"],"的生命周期即一个":["96.0"],"实例从被创建到被销毁的过程":["96.0"],"可以分为":["96.0"],"个阶段":["96.0"],"beforecreate":["96.0","96.2"],"实例创建前":["96.0"],"created":["96.0"],"实例创建完成":["96.0"],"beforemount":["96.0"],"挂载前":["96.0"],"mounted":["96.0"],"挂载完成":["96.0"],"beforeupdate":["96.0"],"beforedestory":["96.1"],"的父组件和子组件生命周期钩子函数执行顺序":["96.2"],"加载渲染过程":["96.2"],"父":["96.2"],"可以在":["96.3"],"主要用于将新版本的代码转换为向后兼容的":["97.0"],"语法":["97.0"],"polyfill":["97.0"],"方式":["97.0"],"作用":["98.1"],"将css内容":["98.1"],"的执行顺序":["98.2"],"style":["98.3"],"注入到":["98.3"],"自定义一个名为myplugin插件":["99.2"],"该插件在打包完成后":["99.2"],"构建流程":["100.0"],"从项目的":["100.1"],"entry":["100.1"],"入口文件开始递归分析":["100.1"],"调用所有配置的":["100.1"],"对模块进行编译":["100.1"],"hash":["101.0","122.0"],"和整个项目的构建相关":["101.0"],"开发过程中":["102.0"],"主要是通过":["102.1"],"webscoket":["102.1"],"实现":["102.1"],"建立本地服务器和浏览器的双向通信":["102.1"],"当代码变化后":["102.1"],"重新编译后":["102.1"],"传入参数为":["103.0"],"请求地址":["103.0"],"getjson":["103.0"],"function":["103.0","104.0","105.0","106.0","110.2","111.0","112.0","113.0","117.0","118.0","119.0","119.1","119.2","119.3","119.4","122.0","123.0"],"call":["104.0"],"mycall":["104.0"],"context":["104.0"],"args":["104.0"],"window":["104.0"],"fn":["104.0","110.0","110.2"],"由右向左依次执行函数":["105.0"],"compose":["105.0"],"fns":["105.0"],"myinstanceof":["106.0"],"class":["107.0","108.0","110.0","110.1","115.0"],"lazyman":["107.0"],"name":["107.0"],"tasks":["107.0"],"task":["107.0"],"console":["107.0"],"log":["107.0"],"hi":["107.0"],"缓存淘汰策略":["108.0"],"移除最近最少被访问的数据项":["108.0"],"lrucache":["108.0"],"capacity":["108.0"],"new":["108.0","120.0","122.0"],"创建一个对象":["109.0"],"该对象的原型指向构造函数的原型":["109.0"],"调用该构造函数":["109.0"],"构造函数的":["109.0"],"resolve时的回调函数列表":["110.0"],"resolvetask":["110.0"],"reject时的回调函数列表":["110.0"],"rejecttask":["110.0"],"state记录当前状态":["110.0"],"共有pending":["110.0"],"fulfilled":["110.0"],"rejected":["110.0"],"3种状态":["110.0"],"all":["110.1"],"promise":["110.1"],"race静态方法":["110.1"],"返回promises列表中第一个执行完的结果":["110.1"],"static":["110.1"],"promises":["110.1"],"return":["110.1"],"param":["110.2"],"方法名":["110.2"],"模拟实现":["111.0"],"mysetinterval":["111.0"],"callback":["111.0","115.0"],"delay":["111.0"],"curry":["113.0"],"节点1":["114.0","121.0"],"parentid":["114.0","121.0"],"这里用0表示为顶级节点":["114.0"],"eventemitter":["115.0"],"创建一个空对象存储事件和对应的回调函数":["115.0"],"events":["115.0"],"实现订阅":["115.0"],"on":["115.0"],"type":["115.0"],"检查是否已经存在该类型的事件订阅":["115.0"],"tag":["116.0"],"attrs":["116.0"],"app":["116.0"],"span":["116.0"],"递归的方法":["117.0","118.0"],"flat":["117.0","118.0"],"arr":["117.0","118.0","119.0","119.2","119.4","120.0"],"res":["117.0","118.0"],"bubblesort":["119.0"],"缓存数组长度":["119.0","119.2"],"len":["119.0","119.2","119.4"],"length":["119.0","119.3","119.4"],"外层循环用于控制从头到尾的比较":["119.0"],"交换到底有多少轮":["119.0"],"i":["119.0","129.0"],"内层循环用于完成每一轮遍历过程中的重复比较":["119.0"],"循环遍历数组":["119.1"],"每次都找出当前范围内的最小值":["119.1"],"把它放在当前范围的头部":["119.1"],"然后缩小排序范围":["119.1"],"重复":["119.1"],"直到数组完全有序":["119.1"],"selectsort":["119.1"],"找到元素在它前面那个序列中的正确位置":["119.2"],"insertsort":["119.2"],"定义一个名为sortarray的函数":["119.3"],"它接受一个数组nums作为输入参数":["119.3"],"var":["119.3"],"sortarray":["119.3"],"nums":["119.3","129.0","132.0"],"如果数组长度小于2":["119.3"],"表示数组已经有序或为空":["119.3"],"直接返回原数组":["119.3"],"将需要被排序的数组从中间分割为两半":["119.4"],"然后再将分割出来的每个子数组各分割为两半":["119.4"],"重复以上操作":["119.4"],"直到单个子数组只有一个元素为止":["119.4"],"从粒度最小的子数组开始":["119.4"],"两两合并":["119.4"],"确保每次合并出来的数组都是有序的":["119.4"],"mergesort":["119.4"],"方法1":["120.0"],"使用set":["120.0"],"方法2":["120.0"],"使用includes":["120.0"],"deepclone":["122.0"],"某个函数在一定时间间隔内只执行一次":["124.0"],"在规定的延迟时间内无视后来产生的函数调用请求":["124.0"],"也不会延长时间":["124.0"],"控制函数执行频率的技术":["124.0"],"确保函数在一定时间间隔内最多执行一次":["124.0"],"以减轻高频率触发函数的性能问题":["124.0"],"一般情况下处理事件监听":["124.0"],"是指某个函数在规定的时间段内":["124.1"],"无论触发多少次回调":["124.1"],"只执行最后":["124.1"],"一般用于处理需要等待一段时间后稳定下来的事件":["124.1"],"比如输入框的输入事件":["124.1"],"滚动事件":["124.1"],"窗口大小调":["124.1"],"反转字符串":["126.0","136.0","137.0"],"leetcode":["126.0","127.0","128.0","129.0","130.0","131.0","132.0","133.0","134.0","135.0","136.0","137.0","138.0","139.2","140.0","141.0","142.0","143.0","145.0","146.0","147.0","149.0","150.0","151.0"],"cn":["126.0","127.0","128.0","129.0","130.0","131.0","132.0","133.0","134.0","135.0","136.0","137.0","138.0","139.2","140.0","141.0","142.0","143.0","145.0","146.0","147.0","149.0","150.0","151.0"],"problems":["126.0","127.0","128.0","129.0","130.0","131.0","132.0","133.0","134.0","135.0","136.0","137.0","138.0","139.2","140.0","141.0","142.0","143.0","145.0","146.0","147.0","149.0","150.0","151.0"],"反转字符串中的单词":["127.0"],"words":["127.0"],"in":["127.0"],"description":["127.0","129.0","130.0","132.0","133.0","134.0","135.0","136.0","138.0","139.2","142.0","144.0"],"给你一个字符串":["127.0"],"s":["127.0","135.0","138.0"],"请你反转字符串中":["127.0"],"单词":["127.0"],"的顺序":["127.0"],"是由非空格字符组成的字符串":["127.0"],"路径加密":["128.0"],"ti":["128.0"],"三数之和":["129.0"],"3sum":["129.0"],"给你一个整数数组":["129.0"],"判断是否存在三元组":["129.0"],"j":["129.0"],"k":["129.0"],"满足":["129.0"],"两个数组的交集":["130.0"],"intersection":["130.0","151.0"],"of":["130.0"],"two":["130.0","131.0"],"arrays":["130.0"],"两数之和":["131.0"],"sum":["131.0","143.0"],"四数之和":["132.0"],"4sum":["132.0","133.0"],"给你一个由":["132.0"],"n":["132.0","134.0","142.0","146.0"],"个整数组成的数组":["132.0"],"和一个目标值":["132.0"],"target":["132.0"],"请你找出并返回满足下述全部条件且不重复的四元组":["132.0"],"b":["132.0"],"c":["132.0"],"d":["132.0"],"若两个四元组元素一一对应":["132.0"],"四数相加":["133.0"],"ii":["133.0","136.0","142.0"],"给你四个整数数组":["133.0"],"nums1":["133.0"],"nums2":["133.0"],"nums3":["133.0"],"快乐数":["134.0"],"happy":["134.0"],"编写一个算法来判断一个数":["134.0"],"是不是快乐数":["134.0"],"定义为":["134.0"],"有效的字母异位词":["135.0"],"valid":["135.0"],"anagram":["135.0"],"给定两个字符串":["135.0"],"t":["135.0"],"编写一个函数来判断":["135.0"],"是否是":["135.0"],"重复的子字符串":["138.0"],"repeated":["138.0"],"substring":["138.0"],"pattern":["138.0"],"给定一个非空的字符串":["138.0"],"检查是否可以通过由它的一个子串重复多次构成":["138.0"],"解题思路":["138.0"],"二分查找也叫折半查找":["139.0"],"初始化左右边界":["139.1"],"计算中间位置":["139.1"],"力扣":["139.2","141.0"],"二分查找":["139.2"],"binary":["139.2"],"search":["139.2"],"有序数组的平方":["140.0"],"squares":["140.0"],"移除元素":["141.0"],"remove":["141.0","146.0","149.0"],"螺旋矩阵":["142.0"],"spiral":["142.0"],"matrix":["142.0"],"给你一个正整数":["142.0"],"生成一个包含":["142.0"],"长度最小的子数组":["143.0"],"minimum":["143.0"],"subarray":["143.0"],"两两交换链表中的节点":["145.0"],"swap":["145.0"],"nodes":["145.0"],"删除链表的倒数第":["146.0"],"个结点":["146.0"],"nth":["146.0"],"node":["146.0","155.0"],"from":["146.0"],"环形链表":["147.0"],"linked":["147.0","149.0"],"list":["147.0"],"每一个元素中存储当前节点的值和指向下一个节点的指针":["148.0"],"移除链表元素":["149.0"],"反转链表":["150.0"],"链表相交":["151.0"],"默认配置名为":["155.1"],"config":["155.1"],"构建过程中自动生成":["155.3"],"extract":["155.4"],"只能理解":["155.7"]},{"0":["26.2","44.1","63.6","73.3","105.0","110.1","117.0","118.0","119.3","129.0","132.0","133.0"],"1":["38.0","66.3","66.4","67.15","73.3","76.5","76.6","91.10","100.0","102.1","119.0","119.3","119.4","134.0","138.0"],"2":["33.0","36.0","42.0","43.1","64.3","66.1","67.9","69.0","71.0","87.3","91.9","93.3","94.12","95.14","95.24","95.25","119.4","121.0"],"3":["59.0","67.11","69.0","87.3","95.15","95.25","109.0"],"4":["61.0"],"5":["61.0","63.6"],"10":["8.26"],"50":["41.0"],"60":["39.0"],"100":["8.26"],"200":["8.26","77.1","80.1"],"256":["83.9"],"这里主要记录后端知识点":["0.0"],"是一个基于":["1.0"],"i":["1.1","63.6","110.1","117.0","118.0","133.0"],"node":["1.2"],"代码没有得到返回之前":["1.3"],"渲染进程每个页面里都有一个渲染进程":["2.0"],"浏览器内核":["2.0"],"gui":["2.0"],"渲染线程":["2.0"],"用于渲染页面":["2.0"],"引擎线程":["2.0"],"他和页面渲染时互斥":["2.0"],"事件触发线程":["2.0"],"独立的线程":["2.0"],"eventloop":["2.0"],"事件":["2.0"],"click":["2.0"],"这里主要记录突发奇想":["4.0"],"这里主要记录框架相关知识点":["5.0"],"那么内容就像水一样":["7.0"],"为什么要设计响应式":["7.0"],"首先":["7.0","94.1"],"可以脱离":["7.1"],"的控制":["7.1"],"适用于":["7.1","95.16"],"布局":["7.1","46.1"],"nth":["7.1"],"child":["7.1"],"选择指定元素":["7.1"],"通过":["7.1","61.0","76.3","76.8","94.1","95.15","102.1"],"筛选指定的元素设置样式":["7.1"],"适用于表格着色":["7.1"],"边界元素排版":["7.1"],"使用":["8.2","46.1","65.4","67.3","84.0","95.4"],"text":["8.2","8.4","78.0","91.4"],"align":["8.2","8.4","8.11","36.0","42.0"],"auto":["8.3","8.17"],"必须定宽":["8.3"],"优点":["8.3","43.1","68.0","95.21"],"center":["8.4","8.27","42.0"],"position":["8.5","8.10","8.15","8.16","29.4"],"relative":["8.5","8.10","8.15","8.16"],"父相":["8.5","8.10"],"background":["8.5","33.0"],"color":["8.5","33.0"],"f00":["8.5"],"son":["8.5","8.15","8.16","8.17","41.0"],"parent":["8.6","8.8","8.9","8.13","8.23"],"display":["8.6"],"css":["8.8","8.26","54.0","82.1","83.11","100.1"],"或者用span把所有文字包裹起来":["8.9"],"设置display":["8.9"],"top":["8.10","28.0","91.4"],"right":["8.10","8.21","8.26","33.0"],"bottom":["8.10"],"left":["8.10","8.19","8.20","8.21","8.22","8.23","8.24","8.27"],"的值是相对于父元素尺寸的":["8.10"],"然后":["8.10"],"margin":["8.10","8.17"],"或者":["8.10","95.25"],"transform":["8.10"],"是相对于自身尺寸的":["8.10"],"组合使用达到水平居中的目的":["8.10"],"height":["8.10","8.13","8.14","44.1"],"150px":["8.10","8.13","8.14"],"flex":["8.11","26.2","36.0","46.1"],"items":["8.11"],"width":["8.14","8.26"],"右列自适应":["8.18","8.26"],"id":["8.19","8.20","56.2"],"左列定宽":["8.19","8.20","8.21","8.22","8.27"],"左列不定宽":["8.23","8.24"],"一列自适应":["8.25"],"min":["8.26"],"310px":["8.26"],"防止宽度不够":["8.26"],"子元素换行":["8.26"],"10px":["8.26"],"中间定宽":["8.27"],"这里主要记录前端基础知识":["9.0"],"浏览器就会将网页缩放至原始比例":["11.0"],"当用户点击屏幕一次之后":["11.0"],"浏览器并不会判断用户确实要打开至这个链接":["11.0"],"还是想要进行双击操作":["11.0"],"所以":["11.0","91.10"],"解析":["12.0","16.0","82.1","83.0","155.8"],"文件生成":["12.0"],"cssom":["12.0"],"将":["12.0","46.1","82.1","155.4","155.10"],"和":["12.0","64.3","76.2","80.3","91.6","91.7","94.6","94.8","96.0","96.3","130.0","132.0"],"结合":["12.0"],"render":["12.0","95.15"],"渲染树":["12.0"],"根据":["12.0","94.8"],"突破浏览器并发限制":["13.0"],"引擎":["14.0"],"渲染引擎":["14.0"],"负责解析网页的":["14.0"],"juejin":["15.0"],"http":["15.1","16.0","72.4","73.1","73.3"],"https":["15.1","72.4","87.0","91.4"],"域名":["15.1"],"请求方法":["15.3"],"实现":["15.3","92.8","148.0"],"js":["15.3","61.0","63.6","83.3","83.5","100.1","127.0","138.0","142.0","146.0","148.0","155.1","155.6"],"index":["15.3"],"html":["15.3","27.0","46.0","82.2","86.0","95.7","155.3"],"function":["15.3","63.6","98.1","138.0","148.0"],"url":["15.3","77.2"],"params":["15.3"],"callback":["15.3"],"return":["15.3","103.0","104.0","110.0","113.0","119.3","119.4","122.0"],"开启":["15.4"],"这个属性表示的是那个域名可以访问资源":["15.4"],"如果设置为通配符表示所有网站都可以访问资源":["15.4"],"使用这种方式解决跨域":["15.4"],"服务器向服务器请求不用遵循同源策略":["15.5"],"如果没有":["16.0","60.0"],"网络进程向":["16.0"],"web":["16.0","86.0","95.7"],"服务器发起":["16.0"],"请求":["16.0"],"网络请求":["16.0"],"请求流程如下":["16.0"],"进行":["16.0","95.11"],"dns":["16.0"],"获取服务器":["16.0"],"ip":["16.0","76.0"],"地址":["16.0"],"端口":["16.0"],"端口是通过":["16.0"],"一个进程就是一个程序的运行实例":["17.1"],"启动一个程序的时候":["17.1"],"用户交互":["17.2"],"子进程管理":["17.2"],"同时提供存储功能":["17.2"],"bfc":["19.0","28.0"],"浮动元素":["19.1"],"元素的":["19.1"],"float":["19.1"],"属性不为":["19.1"],"它将会塌陷":["19.2"],"不会正常地包裹子元素":["19.2"],"记住密码后自动填充表单的黄色背景":["20.0"],"chrome":["20.1"],"在":["20.2","62.0","72.0","80.1","94.9","95.3"],"form":["20.2","80.1"],"在不同浏览器下有什么区别":["21.0"],"通常用于表格的行和列":["21.0"],"当用于行上的时候":["21.0"],"该行会被隐藏":["21.0"],"并且不会占据任何空间":["21.0"],"相邻的行自动合并":["21.0"],"新增伪类和伪元素":["22.0"],"通用选择器":["22.0"],"文件":["23.0","27.0","83.3","100.1","155.3","155.7"],"拥有行内元素的特性":["24.0"],"可以和其它行内元素共占一行":["24.0"],"独占一行":["24.1"],"可以和其他元素共占一行":["24.2"],"三个属性的缩写":["25.0"],"定义项目的的放大比例":["25.0"],"默认为":["25.0"],"如果存在剩余空间":["25.0"],"元素也不会放大":["25.0"],"设置为":["25.0"],"代表会放大":["25.0"],"等分剩余空间":["25.0"],"布局的元素":["26.0"],"起点在下沿":["26.1"],"wrap":["26.1"],"如果主轴排列不下":["26.1"],"通过这个属性判断是否换行":["26.1"],"换行":["26.1"],"在第一行下方":["26.1"],"grow":["26.2"],"如果不换行":["26.2"],"容器宽度不够分的情况":["26.2"],"提供的标签":["27.0"],"不仅可以加载":["27.0"],"还可以定义":["27.0"],"的值发生重叠":["28.0"],"这种情况下我们可以通过设置其中一个元素为":["28.0"],"来解决":["28.0"],"第二种是父元素的":["28.0"],"和子元素的":["28.0"],"相对于":["29.0"],"相对于浏览器窗口进行定位":["29.1"],"相对于其正常位置进行定位":["29.2"],"没有定位":["29.3"],"size":["30.0"],"来计算":["30.0"],"使用像素图形":["31.0"],"图像不可以无限放大不失真":["31.0"],"编辑和修改":["31.0"],"开始状态和结束状态":["32.0"],"tomato":["33.0"],"gold":["33.0"],"左侧元素设置固定大小":["33.0"],"并左浮动":["33.0"],"右侧元素设置":["33.0"],"为其添加对应的部分":["34.0"],"这个状态是根据用户行为而动态变化的":["34.0"],"非继承属性":["35.0"],"子孙节点消失是因为元素本身从渲染树中消失":["35.0"],"修改子孙节点的属性无法使其显示":["35.0"],"会导致重排":["35.0"],"读屏器不会读取":["35.0"],"元素的内容":["35.0"],"vertial":["36.0"],"middle":["36.0"],"tcp":["37.0","72.0","83.0"],"解决":["38.0"],"将样式表放在文档的":["38.0"],"head":["38.0","147.0","149.0","150.0"],"中":["38.0","56.3","73.3","73.6","95.3"],"刷新":["39.0"],"次":["39.0"],"overflow":["40.0"],"hidden":["40.0"],"white":["40.0"],"space":["40.0"],"green":["41.0"],"200px":["41.0"],"设置了top和left":["41.0"],"之后":["41.0","76.6"],"子元素的左上角位于父盒子的中心位置":["41.0"],"使用transform将子元素向左上移动自身元素的50":["41.0"],"如果元素宽度固定":["42.0"],"可以设置左右":["42.0"],"浮动元素脱离了标准文档流":["43.0"],"对其设置":["43.1"],"both":["43.1"],"简单":["43.1"],"将元素的宽高设置为":["44.0"],"盒子包括四个部分":["45.0"],"内存区域":["45.0"],"content":["45.0","73.6","78.0"],"内边距区域":["45.0"],"padding":["45.0"],"类选择器":["47.0"],"后写的覆盖先写的":["47.1"],"不同级别":["47.1"],"addeventlistener":["48.0"],"可有冒泡":["48.0"],"可有捕获":["48.0"],"或":["49.0"],"属性":["49.0","94.5","94.9"],"浏览器会立即加载并执行相应的脚本":["49.0"],"不会等到后续加载的文档元素":["49.0"],"还有什么作用":["50.0"],"创建内部书签链接":["50.0"],"footer":["51.0"],"nav":["51.0","57.2"],"aside":["51.0"],"article":["51.0"],"允许在一个网页中嵌套另一个网页":["52.0"],"实现内容隔离":["52.0"],"标签时":["53.0"],"浏览器会自动将焦点转到和":["53.0"],"等":["54.0"],"但执行上是有区别的":["54.0"],"区别":["54.0","63.4"],"脚本等":["55.0"],"指向的内容会嵌入到文档中当前标签所在的位置":["55.0"],"常用于":["55.0"],"img":["55.0"],"script":["55.0"],"iframe":["55.0"],"audio":["55.0"],"video":["55.0"],"socket":["56.1"],"new":["56.1","61.0","69.0","94.9","96.0","103.0","110.1","142.0"],"ws":["56.1"],"your":["56.1"],"标签页1":["56.2"],"input":["56.2"],"name":["56.2"],"lt":["56.2"],"type":["56.2","78.0","93.1"],"quot":["56.2"],"button":["56.2"],"每隔一段时间读取":["56.3"],"一个语义化的文档":["57.1"],"能够使页面的结构更加清晰":["57.1"],"易于理解":["57.1","79.0"],"这样不仅有利于开发者的阅读和理解":["57.1"],"同时也能够使机器对文档内容进行正确的解读":["57.1"],"比如说我们常用的":["57.1"],"导航菜单等":["57.2"],"导航部分":["57.2"],"通常包含网站的主要导航链接":["57.2"],"面试题总结与归纳":["58.0"],"箭头函数":["59.0","61.0"],"使用箭头":["59.0"],"定义函数":["59.0"],"简化了函数的书写":["59.0"],"并且自动绑定了":["59.0"],"this":["59.0","109.0"],"模板字符串":["59.0"],"使用反引号":["59.0"],"包裹字符串":["59.0"],"可以在字符串中使用变量和表达式":["59.0"],"所有任务可以分成两种":["60.0"],"一种是宏任务":["60.0"],"另一种是微任务":["60.0"],"宏任务指的是":["60.0"],"在主线程上排队执行的任务":["60.0"],"只有前一个任务执行完毕":["60.0"],"才能执行下一个任务":["60.0"],"微任务指的是":["60.0"],"不进入主线程":["60.0"],"而进入":["60.0"],"微任务队列":["60.0"],"的任务":["60.0"],"当前宏任务执行完后":["60.0"],"会判断微任务列表中是否有任务":["60.0"],"如果有":["60.0"],"会把该微任务放到主线程中并执行":["60.0"],"就继续执行下一个宏任务":["60.0"],"call":["61.0"],"apply":["61.0"],"bind":["61.0"],"方法直接指定":["61.0"],"的指向对象":["61.0"],"构造函数":["61.0"],"指向新生成的对象":["61.0","109.0"],"指向的是定义这个箭头函数的时候":["61.0"],"外层环境中的":["61.0"],"箭头函数在定义的时候就指定了":["61.0"],"不能改变":["61.0"],"use":["61.0"],"strict":["61.0"],"var":["61.0","63.6","127.0","138.0"],"a":["61.0","140.0"],"stoppropagation":["62.0"],"方法来阻止冒泡":["62.0"],"当鼠标点击或者触发":["62.1"],"事件时":["62.1"],"浏览器会从根节点开始由外到内进行事件传播":["62.1"],"就是说点击了子元素":["62.1"],"如果父元素通过事件捕获方式注册了对应的事件的话":["62.1"],"会先触发父元素绑定的事件":["62.1"],"事件冒泡":["62.1"],"做大的作用就是隔离变量":["63.0"],"函数作用域和块级作用域":["63.1"],"函数的作用域在函数":["63.2"],"包括":["63.3"],"if":["63.3","80.2","105.0","106.0","108.0","110.0","115.0","117.0","118.0","119.0","119.4"],"没有块级作用域概念":["63.4"],"会先从当前上下文的变量对象中查找":["63.5"],"利用了作用域链的特性":["63.6"],"在当前执行环境下访问某个变量的时候":["63.6"],"如果不存在就一直向外层寻找":["63.6"],"最终寻找到最外层也就是全局作用域":["63.6"],"原始题目":["63.6"],"for":["63.6","67.3","110.1","119.2","120.0"],"settimeout":["63.6","107.0"],"console":["63.6"],"log":["63.6"],"1s":["63.6"],"后打印出":["63.6"],"个":["63.6"],"函数的实例可以共享原型上的属性和方法":["64.0"],"如果该对象内部不存在这个属性":["64.1"],"作用域链是查找当前上下文中的变量":["64.2"],"普通对象和函数对象":["64.3"],"导致内存占用越来越高":["65.0"],"被遗忘的计时器或回调函数":["65.1"],"闭包":["65.1"],"垃圾回收器从根对象开始遍历":["65.2"],"每一个可以从根对象访问到的对象都会被添加一个标识":["65.2"],"当被引用次数为零时释放":["65.3"],"javascript":["66.0","155.4","155.7"],"浏览器环境下为":["66.1"],"window":["66.1","69.0"],"单线程":["66.2"],"只在主线程上运行":["66.2"],"用来存储代码运行的所有执行上下文":["66.3"],"当":["66.3"],"创建阶段":["66.4"],"存储了上下文中定义的变量和函数声明":["66.5"],"是一个抽象的概念":["66.5"],"number":["67.1","110.2"],"boolean":["67.1"],"null":["67.1","122.0"],"undefined":["67.1"],"比如定义了一个全局对象":["67.2"],"用来缓存数据":["67.2"],"作用是什么":["67.4"],"支持比":["67.4"],"空值":["67.5"],"语义是表示一个对象被认为的重置为空对象":["67.5"],"不是一个变量最原始的状态":["67.5"],"使用场景":["67.5"],"typeof":["67.6","106.0","122.0"],"object":["67.6","67.8","90.2","106.0","122.0"],"基本数据类型用栈存储":["67.7"],"栈内存的特点的分配固定大小的内存空间":["67.7"],"为":["67.8"],"对于引用类型":["67.8"],"会判断为":["67.8"],"例如":["67.9"],"arr":["67.9","119.1"],"array":["67.9","117.0","118.0","140.0"],"constructor":["67.9"],"obj":["67.10"],"怎么解决":["67.11"],"原因":["67.11"],"当计算机计算":["67.11"],"函数的区别":["67.12"],"接收参数后":["67.12"],"的区别":["67.13","92.1"],"两边类型不一致":["67.13"],"会进行强制类型转换再进行比较":["67.13"],"转换过程":["67.14"],"parseint":["67.16"],"答案是多少":["67.16"],"答案":["67.16"],"nan":["67.16"],"第一个参数":["67.16"],"str":["67.16"],"成员不能重复":["67.17"],"只有健值":["67.17"],"没有健名":["67.17"],"有点类似数组":["67.17"],"可以遍历":["67.17"],"方法有":["67.17"],"无刷新获取服务器数据":["68.0"],"通过异步模式":["68.0"],"提升了用户体验":["68.0"],"优化了浏览器和服务器之间的传输":["68.0"],"减少不必要的数据往返":["68.0"],"减少了带宽占用":["68.0"],"在客户端运行":["68.0"],"承担了一部分本来由服务器承担的工作":["68.0"],"是一种技术统称":["68.1"],"基于原生的":["68.1"],"xhr":["68.1","103.0"],"开发":["68.1"],"已经有了":["68.1"],"的访问速度":["69.0"],"并大大提高以上性质站点的稳定性":["69.0"],"镜像服务":["69.0"],"消除了不同运营商之间互联的瓶颈造成的影响":["69.0"],"实现了跨运营商的网络加速":["69.0"],"保证不同网络中的用户都能得到良好的访问质量":["69.0"],"远程加速":["69.0"],"远程访问":["69.0"],"opens":["69.0"],"用户根据":["69.0"],"dns负载均衡":["69.0"],"将继续查找本级":["70.0"],"操作系统":["70.0"],"是否缓存过该":["70.0"],"是根据请求报文对指定的资源做出处理":["71.0"],"请求的参数一般放在":["71.0"],"是为了解决":["72.0"],"不安全的缺陷":["72.0"],"窃听风险":["72.1"],"通信链路上可以获取通信内容":["72.1"],"用户信息容易泄露":["72.1"],"采用对称加密和非对称加密的方式在通信建立前采用非对称加密的方式交换会话密钥":["72.2"],"client":["72.3"],"random":["72.3"],"以及客户端支持的加密方法":["72.3"],"第二步":["72.3"],"只有私钥才能解密":["72.4"],"通过上面的握手过程可知":["72.4"],"在证书验证阶段":["72.4"],"使用非对称加密来传输共享秘钥":["72.4"],"之后的传输中都使用对称加密方式":["72.4"],"原因是":["72.4"],"非对称加密的加解密效率是非常低的":["72.4"],"而":["72.4","95.21"],"secret":["72.5"],"随机数":["72.5"],"后端利用":["72.5"],"应用广泛和跨平台":["73.1"],"明文传输":["73.2"],"不安全":["73.2"],"每次发起一个请求":["73.3"],"都要新建一次":["73.3"],"如果每次请求到的数据都是一样的":["73.4"],"就可以把这对请求响应的数据缓存在本地":["73.4"],"下次读取数据的时候":["73.4"],"就可以直接在本地读取数据":["73.4"],"不必再通过网络获取请求":["73.4"],"主要是通过缓存技术实现":["73.4"],"为了避免客户端获取到的数据不是最新的数据":["73.4"],"服务端在返回数据的时候":["73.4"],"会在响应头中放一个过期时间":["73.4"],"当客户端发起请求的时候":["73.4"],"首先会查看响应头的信息":["73.4"],"如果发现缓存的响应是过期的":["73.4"],"就会重新发起网络请求":["73.4"],"减少":["73.4"],"重定向请求":["73.4"],"当服务器上的资源从":["73.4"],"url1":["73.4"],"头部":["73.6"],"特别是对于携带":["73.6"],"cookie":["73.6"],"的头部":["73.6"],"不支持服务器推送消息":["73.6"],"当客户端需要获取通知的时候":["73.6"],"只能通过定时器不断的拉取信息":["73.6"],"针对以上问题":["73.6"],"做了以下优化":["73.6"],"头部压缩":["73.6"],"可以通过指定":["73.6"],"encoding":["73.6"],"字段来对":["73.6"],"body":["73.6"],"来进行压缩":["73.6"],"但是针对":["73.6"],"header":["73.6"],"部分":["73.6"],"没有优化手段":["73.6"],"中有很大固定的字段":["73.6"],"比如":["73.6"],"connection":["74.0"],"用于客户端要求服务器使用":["74.0"],"根据用户提供的登录信息":["75.0"],"认证系统进行身份校验":["75.0"],"如果通过校验":["75.0"],"应该返回给用户一个认证的凭据":["75.0"],"ticket":["75.0"],"用户再访问别的应用的时候就会将这个":["75.0"],"带上":["75.0"],"协议":["76.0","76.4"],"面向连接的":["76.1"],"传输层":["76.2"],"应用层的数据包传输给传输层":["76.2"],"传输层为应用层提供网络支持":["76.2"],"在传输层有两个传输协议":["76.2"],"udp":["76.2"],"传输控制协议":["76.2"],"使用比较多的传输协议":["76.2"],"syn":["76.3","76.5"],"包传给接收端主机":["76.3"],"工作在那一层":["76.4"],"客户端随机初始化序列号":["76.5"],"把":["76.5","107.0","155.9"],"标志置为":["76.5"],"表示当前报文为":["76.5"],"报文":["76.5"],"然后把第一个":["76.5"],"等待服务端的确认":["76.6"],"第二次挥手":["76.6"],"服务端收到":["76.6"],"会发送":["76.6"],"ack":["76.6"],"且把客户端的序列号值":["76.6"],"的方式":["76.7"],"每一次的会话都有一个编号":["76.7"],"当对话中断后":["76.7"],"下一次重新连接时":["76.7"],"提供可靠的服务":["76.8"],"也就是说":["76.8"],"连接传送的数据":["76.8"],"无差错":["76.8"],"不丢失":["76.8"],"提示信息":["77.0"],"报文已经收到并且被正常处理":["77.1"],"重新发送请求获取资源":["77.2"],"也就是重定向":["77.2"],"表示客户端发送的报文有误":["77.3"],"服务器无法处理":["77.3"],"客户端请求正确":["77.4"],"但是服务器内部发生了错误":["77.4"],"plain":["78.0"],"本质上还是浏览器发送请求":["79.0"],"服务器接受请求的一个过程":["79.0"],"通过让客户端不断的进行请求":["79.0"],"使得客户端能够模拟实时地收到服务器端的数据的变化":["79.0"],"优缺点":["79.0"],"优点是比较简单":["79.0"],"缺点是这种方式由于需要不断的建立":["79.0"],"提高访问速度":["80.0"],"浏览器缓存是一种操作简单":["80.0"],"效果显著的前端性能优化手段":["80.0"],"通过网络获取内容既速度缓慢又开销巨大":["80.0"],"命中强缓存情况下":["80.1"],"返回的":["80.1"],"状态码为":["80.1"],"disk":["80.1"],"实现强缓存":["80.1"],"过去一直用":["80.1"],"当服务器返回响应的时候":["80.1"],"response":["80.1"],"headers":["80.1","80.2"],"中将过期时间写入":["80.1"],"字段":["80.1"],"是一个时间戳":["80.2"],"如果我们启用了协商缓存":["80.2"],"会在首次请求时随着":["80.2"],"reponse":["80.2"],"返回":["80.2","127.0","130.0"],"随后每次请求时":["80.2"],"都会带上一个叫":["80.2"],"since":["80.2"],"的时间戳字段":["80.2"],"值是上一次返回的":["80.2"],"否则考虑该资源是否可以被服务器代理缓存":["80.3"],"根据其结果决定是设置为":["80.3"],"private":["80.3"],"还是":["80.3","95.6"],"public":["80.3"],"然后考虑资源的过期时间":["80.3"],"设置对应的":["80.3"],"max":["80.3"],"age":["80.3"],"s":["80.3","126.0","136.0","137.0"],"然后就结束了":["80.5"],"服务器没有记录任何关于客户端的任何信息":["80.5"],"下次请求的时候":["80.5"],"不知道客户端是谁":["80.5"],"存储在其中的数据是永远不会过期的":["80.6"],"页面被关闭的时候":["80.7"],"存储内容也会随之被释放":["80.7"],"一般来说是没有存储上限的":["80.8"],"所有服务器可以根据哪些服务器和用户距离最近":["80.9"],"来满足数据的请求":["80.9"],"缓存":["80.9"],"本都存储带来的性能提升":["80.9"],"就把所有的图片资源加载完毕":["81.0"],"那么很可能会造成白屏":["81.0"],"卡顿等现象":["81.0"],"因为图片太多了":["81.0"],"节流":["81.1"],"生成相应的":["82.0"],"dom":["82.0","82.1","94.12","95.2","95.11","95.23","98.3"],"这种特性使得客户端代码渲染的源代码很简洁":["82.0"],"当用户第一次请求页面时":["82.0"],"由服务器把需要的组件或页面渲染成":["82.0"],"文档经过词法分析输出":["82.1"],"树":["82.1"],"浏览器在构建":["82.2"],"树的过程中":["82.2"],"不会渲染任何已经处理的内容":["82.2"],"即便":["82.2"],"已经解析完毕了":["82.2"],"只要":["82.2"],"没有完毕":["82.2"],"渲染就不会结束":["82.2"],"只有当解析":["82.2"],"当我们对":["82.3"],"的修改引发了":["82.3"],"几何尺寸的变化":["82.3"],"连接和":["83.0"],"比如说":["83.2"],"babel":["83.2"],"webpack":["83.3","83.4","95.24","98.0","102.1"],"config":["83.3"],"打包业务代码":["83.3"],"配置文件":["83.3"],"const":["83.3","83.5","119.1","120.0","142.0","155.1"],"path":["83.3","155.1"],"require":["83.3","83.5"],"由单进程转换成多进程":["83.4"],"是单线程的":["83.4"],"bundleanalyzerplugin":["83.5"],"analyzer":["83.5"],"module":["83.5"],"exports":["83.5"],"plugins":["83.5"],"服务端压缩":["83.6"],"客户端解压":["83.6"],"一般情况下":["83.6"],"如果处理的是具备一定规模的项目":["83.6"],"jpeg":["83.7"],"jpg":["83.7","83.12"],"png":["83.7","83.12"],"webp":["83.7"],"不支持透明":["83.8"],"最大的特点就是有损压缩":["83.8"],"这种压缩算法很高效":["83.8"],"所有":["83.8"],"代表的是二进制的位数":["83.9"],"最多支持":["83.9"],"是一种基于":["83.10"],"xml":["83.10"],"语法的图像格式":["83.10"],"的背景定位来显示其中每一部分的技术":["83.11"],"的出现":["83.11"],"也是为了减少加载网页图片时对服务器的请求次数":["83.11"],"从而提升网站性能":["83.11"],"是一种用于传输":["83.11"],"一样的优点":["83.12"],"可以显示动态图片":["83.12"],"缺点":["83.12"],"对除":["83.12"],"表单递交或输入域名或页面请求的查询字符串":["85.0"],"最终达到欺骗服务器执行恶意的":["85.0"],"命令":["85.0"],"攻击指的是攻击者往":["86.0"],"页面里插入恶意":["86.0"],"对称加密":["87.1"],"好处是加解密效率快":["87.2"],"但是不安全":["87.2"],"如果有人拿到了这个密钥谁都可以进行解密":["87.2"],"baidu":["87.3"],"com":["87.3"],"服务端存储着公钥和私钥":["87.3"],"客户端创建随机数":["87.4"],"使用中间人证书中的公钥进行加密发送给中间人服务器":["87.4"],"中间人使用私钥对随机数解密并构造对称加密":["87.4"],"慎用免费的":["87.5"],"存储上传的文件在非":["88.0"],"通过要求用户输入验证码":["89.0"],"true":["90.0"],"是怎么实现的":["90.0"],"本质是一个具备缓存的":["90.1"],"watcher":["90.1","90.3","94.9"],"依赖的属性发生变化就会更新视图":["90.1"],"适用于计算比较消耗性能的计算场景":["90.1"],"当表达式过于复杂时":["90.1"],"defineproperty":["90.2","94.4"],"把这些属性全部转为":["90.2"],"getter":["90.2"],"setter":["90.2"],"创建了一个":["90.3"],"当被监听的属性更新时":["90.3"],"调用传入的回调函数":["90.3"],"query":["91.0"],"方法传入的参数使用":["91.0"],"当前":["91.1"],"router":["91.2","91.3"],"目录下的":["91.2"],"link":["91.3"],"的值为":["91.4"],"search":["91.4"],"interview":["91.4"],"poetries":["91.4"],"路由模式的实现主要是基于下面几个特性":["91.4"],"值只是客户端的一种状态":["91.4"],"也就是说当向服务器端发出请求时":["91.4"],"部分不会被发送":["91.4"],"值的改变":["91.4"],"都会在浏览器的访问历史中增加一个记录":["91.4"],"中两个重要组件":["91.5"],"的时候新加入两个":["91.6"],"api":["91.6","92.8","93.2","93.5"],"pushstate":["91.6"],"中保护路由的方法叫做路由守卫":["91.8"],"主要用来通过跳转或取消的方式守卫导航":["91.8"],"路由守卫有三个级别":["91.8"],"全局":["91.8"],"路由独享":["91.8"],"利用路由懒加载我们能把不同路由对应的组件分割成不同的代码块":["91.9"],"然后当路由被访问的时候才加载对应组件":["91.9"],"这样会更加高效":["91.9"],"是一种优化手段":["91.9"],"页面跳转内容改变同时不刷新":["91.10"],"同时路由还需要以插件形式存在":["91.10"],"首先我会定义一个":["91.10"],"createrouter":["91.10"],"存在的问题":["92.0"],"不能监听数组的变化":["92.0"],"reactive":["92.1"],"需要手动指定要监视的数据和回调函数":["92.2"],"具有更高的灵活性和定制性":["92.2"],"有什么不同":["92.3"],"在逻辑组织和逻辑复用方面":["92.3"],"是优于":["92.3"],"有什么优势":["92.4"],"性能更好":["92.4","92.8"],"生命周期有什么区别":["92.5"],"options":["92.5"],"的":["92.6","93.4","95.24","130.0"],"setup":["92.6","92.9"],"相当于":["92.6"],"created":["92.6","96.2","96.3"],"beforecreate":["92.6"],"的合集":["92.6"],"sfc":["92.7"],"语法糖":["92.7"],"teleport":["92.7"],"传送门":["92.7"],"fragments":["92.7"],"片段":["92.7"],"emits":["92.7"],"基于":["92.8"],"proxy":["92.8"],"如在":["92.9"],"computed":["92.9","94.7","96.0"],"合成函数":["92.9"],"都有可能返回值类型":["92.9"],"vue":["92.9","93.4","94.9","94.12","94.13","95.9","95.16","95.22","96.1"],"如不定义":["92.9"],"和其他":["92.10"],"中获取的数据能直接更改吗":["93.0"],"mutation":["93.1"],"非常类似于事件":["93.1"],"每个":["93.1"],"都有一个字符串的类型":["93.1"],"和一个":["93.1"],"回调函数":["93.1"],"handler":["93.1"],"action":["93.1"],"方法监听状态":["93.2"],"可以使用":["93.2"],"提供的":["93.2"],"store":["93.2","93.5"],"subscribe":["93.2"],"如果要持久化就要存起来":["93.3"],"localstorage":["93.3"],"就很合适":["93.3"],"提交":["93.3"],"我们来看看官网如何解释":["93.4"],"是":["93.4","95.9"],"的存储库":["93.4"],"它允许您跨组件":["93.4"],"页面共享状态":["93.4"],"实际上":["93.4"],"就是":["93.4"],"可见要实现一个":["93.5"],"要实现一个":["93.5"],"存储全局状态":["93.5"],"要提供修改状态所需":["93.5"],"commit":["93.5"],"订阅者模式的方式":["94.0"],"vnode":["94.1"],"compile":["94.1"],"编译器把":["94.1"],"编译成":["94.1"],"用对象的属性来描述节点":["94.3"],"最终可以通过一系列操作使这棵树映射到真实环境上":["94.3"],"创建虚拟":["94.3"],"是为了更好将虚拟的节点渲染到页面视图中":["94.3"],"所以虚拟":["94.3"],"对象的节点与真实":["94.3"],"中并没有使用":["94.4"],"每个属性都有自己的":["94.5"],"dep":["94.5","94.9"],"更准确":["94.6"],"更快的拿到":["94.6"],"oldvnode":["94.6"],"中对应的节点":["94.6"],"更新组件时判断两个节点是否相同":["94.6"],"相同就复用":["94.6"],"不相同就删除旧的创建新的":["94.6"],"react":["94.6"],"root":["94.7"],"初始化响应式数据":["94.7"],"data":["94.7","94.9","96.0","110.0"],"props":["94.7"],"watch":["94.7","96.0"],"method":["94.7"],"算法是平级比较":["94.8"],"不考虑跨级比较的情况":["94.8"],"内部采用":["94.8"],"深度递归的方式":["94.8"],"双指针":["94.8"],"头尾都加指针":["94.8"],"的方式进行比较":["94.8"],"简单来说":["94.8"],"算法有以下过程":["94.8"],"同级比较":["94.8"],"再比较子节点":["94.8"],"key":["94.8","108.0"],"tag":["94.8"],"标签名判断":["94.8"],"存放他所依赖的":["94.9"],"依赖收集":["94.9"],"当属性变化后会通知自己对应的":["94.9"],"去更新":["94.9"],"派发更新":["94.9"],"进行初始化的时候":["94.9"],"首先会对用户传入的":["94.9"],"数据进行初始化":["94.9"],"observer":["94.9"],"app":["94.10"],"mount":["94.10"],"过程":["94.10"],"如果不采用异步更新":["94.11"],"那么每次更新数据都会对当前组件进行重新渲染":["94.11"],"所以为了性能":["94.11"],"更新循环结束之后执行延迟回调":["94.12"],"用于获得更新后的":["94.12"],"有个异步更新策略":["94.12"],"意思是如果数据变化":["94.12"],"不会立刻更新":["94.12"],"项目中主要使用":["94.13"],"两个树的完全":["94.14"],"是一套用于构建用户界面的渐进式框架":["95.0"],"必须是函数":["95.1"],"根实例对象":["95.1"],"可以是对象也可以是函数":["95.1"],"元素依旧还在":["95.2"],"if显示隐藏是将dom元素整个添加或删除":["95.2"],"编译过程":["95.2"],"切换有一个局部编译":["95.2"],"缺陷的过程":["95.2"],"切换过程中合适地销毁和重建内部的事件监听和子组件":["95.2"],"不建议一起使用":["95.3"],"vue2":["95.3"],"ref":["95.4"],"初始化之前":["95.5"],"由于":["95.5"],"vuex":["95.6"],"单页面应用":["95.7"],"只在":["95.7"],"页面初始化的时候加载相应的":["95.7"],"到首屏内容渲染完成的时间":["95.8"],"整个网页不一定要全部渲染完成":["95.8"],"但是需要展示当前视窗需要的内容":["95.8"],"内置的一个组件":["95.9"],"可以实现组件缓存":["95.9"],"当组件切换时不会对当前组件进行卸载":["95.9"],"一般结合路由和动态组件一起使用":["95.9"],"有了解过吗":["95.10"],"为什么还需要虚拟":["95.11"],"我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码":["95.12"],"这些代码的功能相对独立":["95.12"],"可以通过":["95.12"],"mvc":["95.13"],"中的":["95.13","139.2"],"controller":["95.13"],"演变成":["95.13"],"层代表数据模型":["95.13"],"也就是前端声明的静态数据或者是通过网络请求获取的数据":["95.13"],"代表":["95.13"],"但":["95.14"],"vue3":["95.14","95.25"],"中组件已经可以多根节点了":["95.14"],"之所以需要这样是因为":["95.14"],"函数的第二个参数":["95.15"],"context":["95.15"],"来代替":["95.15"],"没有生命周期钩子函数":["95.15"],"不能使用计算属性":["95.15"],"引用指向的就是":["95.16"],"元素":["95.16","95.23"],"如果用在子组件上":["95.16"],"引用就指向组件实例":["95.16"],"访问访问父组件的属性或方法":["95.16"],"访问子组件的属性或方法":["95.16"],"eventbus":["95.16"],"on":["95.16"],"父子":["95.16"],"隔代":["95.16"],"兄弟组件通信":["95.16"],"这种方法通过一个空的":["95.16"],"实例作为中央事件总线":["95.16"],"事件中心":["95.16"],"用它来触发事件和监听事件":["95.16"],"mixins":["95.17"],"slots":["95.17"],"extends":["95.17"],"的更新会向下流动到子组件中":["95.18"],"但是反过来则不行":["95.18"],"这样会防止从子组件意外变更父级组件的状态":["95.18"],"从而导致你的应用的数据流向难以理解":["95.18"],"另外":["95.18"],"每次父级组件发生变更时":["95.18"],"例如输入框":["95.19"],"可以替换为日历":["95.19"],"时间":["95.19"],"范围等组件作具体的实现":["95.19"],"调试方便":["95.19"],"由于整个系统是通过组件组合起来的":["95.19"],"在出现问题的时候":["95.19"],"可以用排除法直接移除组件":["95.19"],"或者根据报错的组件快速定位问题":["95.19"],"之所以能够快速定位":["95.19"],"是因为每个组件之间低耦合":["95.19"],"职责单一":["95.19"],"所以逻辑会比分析整个系统要简单":["95.19"],"提高可维护性":["95.19"],"由于每个组件的职责单一":["95.19"],"修饰符可以实现父子组件之间的双向绑定":["95.20"],"并且可以实现子组件同步修改父组件的值":["95.20"],"相比较与":["95.20"],"的工作放在服务端完成":["95.21"],"然后再把":["95.21"],"直接返回给客户端":["95.21"],"有着更好的":["95.21"],"seo":["95.21"],"并且首屏加载速度更快":["95.21"],"因为":["95.21","100.1"],"spa":["95.21"],"页面的内容是通过":["95.21"],"ajax":["95.21"],"获取":["95.21","95.23"],"而搜索引擎爬取工具并不会等待":["95.21"],"异步完成后再抓取页面内容":["95.21"],"所以在":["95.21"],"中是抓取不到页面通过":["95.21"],"获取到的内容":["95.21"],"是直接由服务端返回已经渲染好的页面":["95.21"],"数据已经包含在页面中":["95.21"],"所以搜索引擎爬取工具可以抓取渲染好的页面":["95.21"],"single":["95.24"],"file":["95.24"],"component":["95.24"],"因为有了":["95.24"],"引入必要插件":["95.25"],"代码规范":["95.25"],"提交规范":["95.25"],"常用库和组件":["95.25"],"目前":["95.25"],"项目我会用":["95.25"],"vite":["95.25"],"create":["95.25"],"创建项目":["95.25"],"更新前":["96.0"],"updated":["96.0"],"更新完成":["96.0"],"beforedestory":["96.0"],"销毁前":["96.0"],"destoryed":["96.0"],"销毁完成":["96.0"],"之后触发的第一个钩子":["96.0"],"在当前阶段中":["96.0"],"methods":["96.0"],"实例销毁之前被调用":["96.1"],"可以执行一些清理和释放资源的工作":["96.1"],"beforemount":["96.2"],"子":["96.2"],"以便能够运行在各版本的浏览器或其他环境中":["97.0"],"基本原理":["97.0"],"首先将源码转成抽象语法树":["97.0"],"然后对语法树进行处理生成新的语法树":["97.0"],"最后将新语法树生成新的":["97.0"],"只能处理":["98.0"],"通过style标签插入到页面中":["98.1"],"source为要处理的css源文件":["98.1"],"相同优先级的":["98.2"],"操作去加载":["98.3"],"加载":["98.3"],"sass":["98.3"],"功能":["99.0"],"通过内部的事件流机制保证了插件的有序性":["99.1"],"在控制台输出":["99.2"],"打包已完成":["99.2"],"class":["99.2"],"myplugin":["99.2"],"从入口文件开始解析":["100.0"],"默认只能识别":["100.1"],"代码":["100.1"],"所以如":["100.1"],"只要项目文件有修改":["101.0"],"整个项目构建的":["101.0"],"代码发生变动后":["102.0"],"通知浏览器请求更新的模块":["102.1"],"替换原有的模块":["102.1"],"dev":["102.1"],"server":["102.1"],"promise":["103.0"],"resolve":["103.0","110.0","110.1"],"reject":["103.0","110.1"],"res":["104.0"],"delete":["104.0"],"allpy":["104.0"],"myapply":["104.0"],"首先需要判断参数是否为空":["105.0"],"length":["105.0","110.1","117.0","118.0","119.1","119.2"],"next":["107.0"],"push":["107.0"],"放到调用栈清空之后执行":["107.0"],"取值的时候":["108.0"],"如果缓存中存在该键值对":["108.0"],"先删除再重新插入":["108.0"],"表示最近访问":["108.0"],"get":["108.0"],"判断构造函数是否有返回值":["109.0"],"如果有返回值且返回值是一个对象或方法":["109.0"],"就返回这个值":["109.0"],"state":["110.0"],"pending":["110.0"],"let":["110.0","110.1","119.2","120.0","138.0"],"value":["110.0"],"state状态只能改变一次":["110.0"],"resolve和reject只会触发一种":["110.0"],"delay":["110.2"],"延迟的时间":["110.2"],"times":["110.2"],"interval":["111.0"],"首先执行回调函数":["111.0"],"timer":["111.0"],"sleep":["112.0"],"fn":["113.0"],"通过这个字段来确定子父级":["114.0"],"转成":["114.0"],"如果不存在":["115.0"],"初始化为一个数组":["115.0"],"else":["115.0"],"如果已经存在":["115.0"],"把上诉虚拟dom转化成下方真实dom":["116.0"],"交换":["119.0"],"j":["119.0","133.0"],"若相邻元素前面的数比后面的大":["119.0"],"交换两者":["119.0"],"缓存数组长度":["119.1"],"len":["119.1"],"定义":["119.1"],"minindex":["119.1"],"缓存当前区间最小值的索引":["119.1"],"注意是索引":["119.1"],"temp":["119.2"],"用来保存当前需要插入的元素":["119.2"],"i用于标识每次被插入的元素的索引":["119.2"],"num":["119.3"],"调用quicksort函数进行快速排序":["119.3"],"传递数组nums":["119.3"],"左边界0和右边界nums":["119.3"],"1作为参数":["119.3"],"quicksort":["119.3"],"定义名为quicksort的快速排序函数":["119.3"],"处理边界情况":["119.4"],"计算分割点":["119.4"],"mid":["119.4"],"math":["119.4"],"floor":["119.4"],"递归分割左子数组":["119.4"],"然后合并为有序数组":["119.4"],"uniarr":["120.0"],"item":["120.0"],"of":["120.0","140.0","146.0","151.0"],"pipe":["123.0"],"functions":["123.0"],"滚动事件":["124.0"],"窗口大小调整等需要频繁触发的操":["124.0"],"核心思想是通过设置一个时间间隔":["124.0"],"只有在这个时间间隔内首次触发函数后":["124.0"],"才允许再次触发":["124.0"],"而在这个时间间隔内":["124.0"],"数再次被触发":["124.0"],"则会被":["124.0"],"核心思想就是当函数被触发后":["124.1"],"设置一个定时器":["124.1"],"在一定时间内如果函数再次被触发":["124.1"],"就取消之前的定时器":["124.1"],"重新设置时器":["124.1"],"只有当一定时间内没有再次触发函数时":["124.1"],"定时器才会触发函数":["124.1"],"这里主要记录学习算法时的解题思路":["125.0"],"string":["126.0","137.0"],"description":["126.0","128.0","131.0","137.0","140.0","141.0","143.0","145.0","146.0","147.0","149.0","150.0","151.0"],"编写一个函数":["126.0","137.0"],"其作用是将输入的字符串反转过来":["126.0","137.0"],"输入字符串以字符数组":["126.0","137.0"],"中使用至少一个空格将字符串中的":["127.0"],"分隔开":["127.0"],"顺序颠倒且":["127.0"],"之间用单个空格连接的结果字符串":["127.0"],"注意":["127.0","135.0"],"输入字符串":["127.0"],"中可能会存在前导空格":["127.0"],"尾随空格或者单词间的多个空格":["127.0"],"返回的结果字符串中":["127.0"],"单词间应当仅用单个空格分隔":["127.0"],"且不包含任何额外的空格":["127.0"],"解题思路":["127.0","135.0","142.0","144.0","146.0"],"huan":["128.0"],"kong":["128.0"],"ge":["128.0"],"lcof":["128.0"],"假定一段路径记作字符串":["128.0"],"且":["129.0"],"同时还满足":["129.0"],"请":["129.0"],"你返回所有和为":["129.0"],"给定两个数组":["130.0"],"nums1":["130.0"],"nums2":["130.0"],"它们的交集":["130.0"],"输出结果中的每个元素一定是":["130.0"],"唯一":["130.0"],"我们可以":["130.0"],"给定一个整数数组":["131.0"],"nums":["131.0","139.2","141.0"],"和一个整数目标值":["131.0"],"target":["131.0","139.2","143.0"],"请你在该数组中找出":["131.0"],"和为目标值":["131.0"],"则认为两个四元组重复":["132.0"],"互不相同":["132.0"],"你可以按":["132.0"],"nums4":["133.0"],"数组长度都是":["133.0"],"n":["133.0","139.2","143.0"],"请你计算有多少个元组":["133.0"],"k":["133.0","136.0"],"l":["133.0"],"能满足":["133.0"],"对于一个正整数":["134.0"],"每一次将该数替换为它每个位置上的数字的平方和":["134.0"],"然后重复这个过程直到这个数变为":["134.0"],"也可能是":["134.0"],"无限循环":["134.0"],"但始终变不到":["134.0"],"如果这个过程":["134.0"],"结果为":["134.0"],"那么这个数就是快乐数":["134.0"],"如果":["134.0"],"的字母异位词":["135.0"],"若":["135.0"],"中每个字符出现的次数都相同":["135.0"],"则称":["135.0"],"互为字母异位词":["135.0"],"先将两个字符串转换为使用":["135.0"],"给定一个字符串":["136.0"],"和一个整数":["136.0","149.0"],"从字符串开头算起":["136.0"],"每计数至":["136.0"],"2k":["136.0"],"个字符":["136.0"],"就反转这":["136.0"],"字符中的前":["136.0"],"repeatedsubstringpattern":["138.0"],"移动匹配法":["138.0"],"s1":["138.0"],"slice":["138.0"],"用于在有序数组查找特定的元素":["139.0"],"比较中间元素和目标元素的大小":["139.1"],"如果中间元素等于目标元素":["139.1"],"查找成功":["139.1"],"给定一个":["139.2"],"个元素有序的":["139.2"],"升序":["139.2"],"整型数组":["139.2"],"和一个目标值":["139.2"],"写一个函数搜索":["139.2"],"sorted":["140.0"],"给你一个按":["140.0"],"element":["141.0"],"给你一个数组":["141.0"],"和一个值":["141.0"],"val":["141.0","149.0"],"你需要":["141.0"],"原地":["141.0"],"到":["142.0"],"n2":["142.0"],"所有元素":["142.0"],"且元素按顺时针顺序螺旋排列的":["142.0"],"x":["142.0"],"正方形矩阵":["142.0"],"模拟题":["142.0"],"给定一个含有":["143.0"],"个正整数的数组和一个正整数":["143.0"],"找出该数组中满足其总和大于等于":["143.0"],"的长度最小的":["143.0"],"连续子数组":["143.0"],"in":["145.0"],"pairs":["145.0"],"给你一个链表":["145.0","146.0"],"两两交换其中相邻的节点":["145.0"],"并返回交换后链表的头节点":["145.0"],"你必须在不修改节点内部的值的情况下完成本题":["145.0"],"end":["146.0"],"list":["146.0","149.0","150.0"],"并且返回链表的头结点":["146.0"],"cycle":["147.0"],"ii":["147.0"],"给定一个链表的头节点":["147.0"],"返回链表开始入环的第一个节点":["147.0"],"如果链表无环":["147.0"],"elements":["149.0"],"给你一个链表的头节点":["149.0"],"请你删除链表中所有满足":["149.0"],"reverse":["150.0"],"linked":["150.0","151.0"],"给你单链表的头节点":["150.0"],"two":["151.0"],"lists":["151.0"],"lcci":["151.0"],"给你两个单链表的头节点":["151.0"],"这里主要记录项目中的关键技术":["152.0"],"这里主要记录面试遇到的真题":["154.0"],"环境":["155.0"],"yarn":["155.0"],"webpack是node写出来的":["155.1"],"并自动引入":["155.3"],"样式文件从":["155.4"],"assets":["155.5"],"压缩":["155.6"],"自动添加前缀":["155.11"],"处理图片":["155.13"]},{"0":["44.0","67.10","107.0","119.1","119.4","127.0","138.0","142.0","143.0"],"1":["60.0","94.8","97.0","119.2","126.0","127.0","137.0","139.2","141.0","143.0"],"2":["22.0","27.0","35.0","38.0","41.0","60.0","66.2","67.15","91.5","92.7","93.1","93.2","93.5","95.17","95.19","100.0"],"3":["36.0","42.0","43.1","67.9","91.9"],"4":["59.0","69.0","95.15","132.0"],"5":["59.0"],"8":["83.11"],"10":["61.0"],"16":["39.0"],"24":["83.8"],"36":["67.16"],"50":["8.5","8.10","73.6","124.1"],"70":["83.6"],"90":["73.6"],"301":["16.0","77.2"],"302":["73.4"],"400":["77.3"],"500":["77.4"],"1000":["63.6"],"1600":["83.9"],"chrome":["1.0","83.12"],"o":["1.1","94.14","126.0","137.0","141.0"],"的主线程是单线程的":["1.2"],"其它代码无法执行":["1.3"],"settimeout":["2.0","60.0","110.0"],"ajax":["2.0"],"也是一个独立线程":["2.0"],"网络进程":["2.0"],"处理请求":["2.0"],"gpu":["2.0"],"3d":["2.0"],"绘制":["2.0"],"第三方插件的进程":["2.0"],"整体流程图":["2.0"],"alt":["2.0"],"电脑":["7.0"],"笔记本":["7.0"],"手机":["7.0"],"平板等智能设备在不断增加":["7.0"],"writing":["7.1"],"mode":["7.1","155.1"],"排版竖文":["7.1"],"调整文本排版方向":["7.1"],"适用于竖行文字":["7.1"],"文言文":["7.1"],"诗词":["7.1"],"text":["7.1","40.0"],"align":["7.1"],"last":["7.1","80.3"],"对齐两端文本":["7.1"],"设置文本两端对齐":["7.1"],"center":["8.2","8.11","36.0"],"优点":["8.2"],"兼容性比较好":["8.2"],"兼容性好":["8.3"],"缺点":["8.3","43.1","68.0","95.21"],"son":["8.4","8.10"],"display":["8.4","8.14"],"inline":["8.4","8.9"],"absolute":["8.5","8.10","8.15","8.16","41.0"],"子绝":["8.5","8.10"],"left":["8.5","41.0","119.3"],"父元素宽度一半":["8.5"],"这里等同于left":["8.5"],"100px":["8.5","8.26","33.0"],"flex":["8.6"],"justify":["8.6","26.1"],"height":["8.8","8.9","8.26","33.0"],"150px":["8.8","8.9"],"block转换成图片的方式解决":["8.9"],"父元素高度一半":["8.10"],"这里等同于":["8.10"],"75px":["8.10"],"translatey":["8.10"],"自身高度一半":["8.10"],"或":["8.11","8.17","82.2","83.11"],"line":["8.13"],"行高的值与height相等":["8.13"],"200px":["8.14","8.26"],"table":["8.14"],"top":["8.15","41.0","44.1"],"margin":["8.16","41.0","42.0","45.0"],"right":["8.19","8.20","8.22","8.23","8.24","8.27","119.3"],"右列自适应":["8.19","8.20","8.21","8.22","8.23","8.24","8.27"],"css":["8.21","92.7","95.7","155.9"],"position":["8.21","19.1"],"left和":["8.26"],"center间隔":["8.26"],"500px":["8.26"],"background":["8.26"],"color":["8.26"],"f00":["8.26"],"safair":["11.0"],"浏览器会等待":["11.0"],"用来判断是否再次点击了屏幕":["11.0"],"怎么解决":["11.0"],"渲染绘制":["12.0"],"将像素渲染到屏幕上":["12.0","82.1"],"解析和":["12.0"],"解析是两个并行的进程":["12.0"],"所以这也解释了为什么":["12.0"],"的解析":["12.0"],"然而":["12.0"],"由于":["12.0"],"是依赖于":["12.0"],"解压":["13.0"],"html":["14.0","53.0","82.0","83.11"],"图像等内容":["14.0"],"负责处理网页的布局":["14.0"],"计算":["14.0"],"cn":["15.0"],"post":["15.0"],"www":["15.1"],"baidu":["15.1"],"com":["15.1"],"new":["15.3","83.5","105.0","145.0","146.0","155.4"],"promise":["15.3"],"resolve":["15.3"],"reject":["15.3","110.0"],"let":["15.3","98.1","111.0","119.1","127.0","129.0","132.0","139.2","142.0","145.0","146.0"],"document":["15.3"],"createelement":["15.3"],"window":["15.3","61.0"],"在发送请求的时候会出现简单请求和复杂请求":["15.4"],"简单请求":["15.4"],"满足以下条件的就是简单请求":["15.4"],"get":["15.4","92.8","103.0","122.0"],"head":["15.4","146.0"],"接受客户端请求":["15.5"],"解析获取的吗":["16.0"],"这里有个疑问":["16.0"],"利用":["16.0"],"地址和服务器建立":["16.0"],"tcp":["16.0"],"连接":["16.0","79.0"],"构建请求头信息":["16.0"],"发送请求头信息":["16.0"],"服务器响应后":["16.0"],"网络进程接收响应头和响应信息":["16.0"],"并解析响应内容":["16.0"],"网络进程解析响应流程":["16.0"],"检查状态码":["16.0"],"如果是":["16.0"],"操作系统会为该程序创建一块内存":["17.1"],"用来存放代码":["17.1"],"运行中的数据和一个执行任务的主线程":["17.1"],"渲染进程":["17.2"],"将":["17.2"],"是一个独立的渲染区域":["19.0"],"none":["19.1"],"绝对定位元素":["19.1"],"创建一个":["19.2"],"bfc":["19.2","33.0"],"可以解决这个问题":["19.2"],"默认会给自动填充的":["20.1"],"input":["20.1","94.13"],"标签上直接关闭了表单的自动填充":["20.2"],"autocomplete":["20.2"],"当用于列上的时候":["21.0"],"该列会被隐藏":["21.0"],"但任会占据空间":["21.0"],"不会导致相邻元素合并":["21.0"],"当一个元素的":["21.0"],"新增盒子模型":["22.0"],"使用字体图标和":["23.0"],"svg":["23.0","83.7"],"不会独占一行":["24.0"],"不能改变":["24.0"],"在不设置自己的宽度的情况下":["24.1"],"块级元素会默认填满父级元素的宽度":["24.1"],"可以设置":["24.2"],"为":["25.0","42.0"],"n":["25.0"],"的项目":["25.0"],"占据的空间":["25.0"],"放大的比例":["25.0"],"是":["25.0","134.0"],"称为":["26.0"],"在第一行上方":["26.1"],"flow":["26.1"],"和":["26.1","57.1","63.3","67.8","72.0","83.10","90.3","94.7","94.10","95.4","95.7","95.9","95.16","95.21","95.25","98.3","101.0","151.0","155.3"],"的缩写":["26.1"],"content":["26.1","74.0"],"弹性元素会根据这个来决定":["26.2"],"项目的放大比例":["26.2"],"即使存在剩余空间":["26.2"],"rss":["27.0"],"rel":["27.0"],"连接属性等":["27.0"],"加载页面时":["27.0"],"标签引入的":["27.0"],"发生重叠":["28.0"],"它们发生重叠是因为它们是相邻的":["28.0"],"所以我们可以通过这":["28.0"],"一点来解决这个问题":["28.0"],"我们可以为父元素设置":["28.0"],"border":["28.0","44.1","45.0"],"padding":["28.0"],"static":["29.0"],"定位以外的第一个父元素进行定位":["29.0"],"的值":["29.4"],"em":["30.0"],"单位是根据自身元素的":["30.0"],"使用":["31.0","63.6","92.4","126.0","137.0"],"xml":["31.0"],"文档来描述图形":["31.0"],"可以通过":["31.0","91.4"],"javascript":["31.0","82.1","86.0","91.4","95.7"],"不能定义中间的状态":["32.0"],"不能重复执行动画":["32.0"],"overflow":["33.0"],"hidden":["33.0","35.0"],"右边触发了":["33.0"],"的区域不会和浮动元素发生重叠":["33.0"],"所以两侧不会发生重叠":["33.0"],"red":["33.0"],"300px":["33.0"],"比如说":["34.0"],"当用户悬停在指定的元素时":["34.0"],"visibility":["35.0"],"不会使元素从渲染树中消失":["35.0"],"不会改变页面布局":["35.0"],"不会触发该元素已经绑定的事件":["35.0"],"继承属性":["35.0"],"布局":["36.0"],"item":["36.0"],"预连接":["37.0"],"通过将样式表放在文档头部":["38.0"],"确保浏览器在渲染页面内容之前先加载和解析样式表":["38.0"],"从而避免了页面一开始的无样式状态":["38.0"],"使用内联样式":["38.0"],"所以理论上最小时间是":["39.0"],"7ms":["39.0"],"nowrap":["40.0"],"ellipsis":["40.0"],"translate":["41.0"],"子盒子必须定宽高":["41.0"],"father":["41.0"],"auto":["42.0"],"变成了浮动元素":["43.0"],"代码少":["43.1"],"浏览器兼容性好":["43.1"],"需要添加大量无语义的代码":["43.1"],"代码不够优雅":["43.1"],"50px":["44.1"],"solid":["44.1"],"边框区域":["45.0"],"外边距区域":["45.0"],"标准盒模型":["45.0"],"计算宽高时":["45.0"],"中的换行符和空格字符引起的":["46.0"],"ul":["46.1"],"设置为":["46.1"],"容器":["46.1"],"标签选择器":["47.0"],"属性选择器":["47.0"],"important":["47.1"],"内联样式":["47.1"],"attachevent":["48.0"],"只有冒泡":["48.0"],"没有捕获":["48.0"],"前者事件名不带":["48.0"],"读取到就会开始和执行":["49.0"],"会阻塞后续文档的加载":["49.0"],"都是去异步加载外部的":["49.0"],"在":["50.0","94.6"],"等语义化标签":["51.0"],"为了方便在客户端存储和获取数据":["51.0"],"提供了":["51.0"],"localstorage":["51.0"],"sessionstorage":["51.0"],"防止嵌套的内容对主页面的影响":["52.0"],"并行加载":["52.0"],"标签相关的表单控件上":["53.0"],"prefetch":["54.0"],"预取":["54.0"],"是一个资源提示属性":["54.0"],"用于告诉浏览器在页面加载完成后":["54.0"],"等标签":["55.0"],"用于加载外部资源":["55.0"],"当浏览器解析到带有":["55.0"],"属性的标签时":["55.0"],"会立即请求指定地址的资源":["55.0"],"暂停其它资源的下载和处理":["55.0"],"直到将该资源加载":["55.0"],"server":["56.1"],"url":["56.1","71.0","98.3"],"监听消息事件":["56.1"],"addeventlistener":["56.1","62.1"],"btn":["56.2"],"提交":["56.2"],"gt":["56.2"],"script":["56.2","60.0"],"信息":["56.3"],"b":["57.1","129.0"],"strong":["57.1"],"标签":["57.1","91.4","91.5"],"它们在样式上都是文字的加粗":["57.1"],"但是":["57.1","83.4","131.0"],"main":["57.2"],"主要内容区域":["57.2"],"article":["57.2"],"实现更灵活的字符串拼接和格式化":["59.0"],"解构赋值":["59.0"],"通过解构赋值语法":["59.0"],"可以从数组或对象中提取值":["59.0"],"并赋给对应的变量":["59.0"],"简化了变量赋值的操作":["59.0"],"默认参数":["59.0"],"函数可以定义默认参数值":["59.0"],"宏任务":["60.0"],"微任务":["60.0"],"全部代码":["60.0"],"同步代码也属于宏任务":["60.0"],"setinterval":["60.0"],"setimmediate":["60.0"],"等":["60.0","73.6","83.7","95.17"],"promsie":["60.0"],"mutationobserver":["60.0"],"执行过程":["60.0"],"代码执行过程中":["60.0"],"宏任务和微任务放在不同的任务队列中":["60.0"],"var定义的a变量挂载到window对象上":["61.0"],"function":["61.0","67.8","109.0","114.0","124.1","127.0","129.0","130.0","132.0","134.0","135.0","146.0"],"console":["61.0"],"log":["61.0"],"this1":["61.0"],"报错":["61.0"],"uncaught":["61.0"],"typeerror":["61.0"],"cannot":["61.0"],"read":["61.0"],"properties":["61.0"],"of":["61.0"],"reading":["61.0"],"ie8":["62.0"],"以下中":["62.0"],"ie":["62.0"],"和事件捕获相反":["62.1"],"顺序是由内到外传播":["62.1"],"直到根节点":["62.1"],"在支持":["62.1"],"的浏览器中":["62.1"],"可以调用事件对象的":["62.1"],"stoppropagation":["62.1"],"方法以阻止事件的继续传播":["62.1"],"不同作用域下同名变量不会冲突":["63.0"],"定义":["63.2"],"for":["63.3","119.1","139.2","142.0"],"可以跨块访问":["63.4"],"会变量提升":["63.4"],"如果没有找到":["63.5"],"输出是什么":["63.6"],"为什么":["63.6"],"输出是":["63.6"],"在循环中":["63.6"],"声明了一个全局变量":["63.6"],"创建了":["63.6"],"个定时器任务":["63.6"],"每个任务都在":["63.6"],"那么就会去它的proto属性所指向的原型对象上查找":["64.1"],"是对象独有的":["64.3"],"是函数对象独有的":["64.3"],"作用是给特定类型的所有实例提供共享的属性和方法":["64.3"],"但是在":["64.3"],"会导致应用程序速度变慢":["65.0"],"脱离":["65.1"],"dom":["65.1","83.3"],"这个对象被标记为可到达对象":["65.2"],"清除阶段":["65.2"],"局限性是当出现循环引用时":["65.3"],"weakmap":["65.4"],"代码被解析和执行所在环境的抽象概念":["66.0"],"函数执行上下文":["66.1"],"存在无数个":["66.1"],"每当一个函数":["66.1"],"同步执行":["66.2"],"js":["66.3","67.2","67.15","91.2","98.0","109.0","124.0","124.1","129.0","130.0","132.0","133.0","134.0","135.0","139.2","145.0","150.0","155.3","155.4"],"引擎第一次遇到":["66.3"],"在这个阶段生成变量对象":["66.4"],"建立作用域链":["66.4"],"在全局执行上下文中":["66.5"],"变量对象就是全局对象":["66.5"],"是一种弱类型":["67.0"],"可以发生隐式类型转换":["67.0"],"symbol":["67.1"],"es6":["67.1"],"新增":["67.1"],"现在有两个":["67.2"],"字符串":["67.3","82.0"],"传入相同的字符串":["67.3"],"一定会返回相同的":["67.3"],"number":["67.4"],"数据类型支持的范围更大的整数值":["67.4"],"明确定义的变量在将来是用于保存对象的":["67.5"],"就应该将这个变量初始化为":["67.5"],"有助于区分":["67.5"],"从逻辑上来看":["67.6"],"值表示一个空对象指针":["67.6"],"可以快速分配和释放":["67.7"],"而基本数据类型的值是不可变的":["67.7"],"两种类型":["67.8"],"直接在计算机底层基于数据类型的二进制值进行检测":["67.8"],"属性返回对象的构造函数":["67.9"],"并判断该构造函数是否为数组构造函数":["67.9"],"length":["67.10","127.0","132.0","135.0","138.0"],"的时候":["67.11","82.2"],"实际上计算的是这两个数字在计算机里所存储的二进制":["67.11"],"会尝试将这个参数转换成数值":["67.12"],"任何不能被转换成数值的值都会返回":["67.12"],"true":["67.12","134.0"],"如果两边的类型不一致":["67.13"],"不会做强制类型转换":["67.13"],"转换成数字":["67.14"],"成立":["67.15"],"即要解析的字符串":["67.16"],"第二个参数":["67.16"],"radix":["67.16"],"基数":["67.16"],"进制":["67.16"],"范围":["67.16"],"add":["67.17"],"delete":["67.17"],"has":["67.17","108.0","122.0"],"成员都是对象":["67.17"],"成员都是弱引用":["67.17"],"减少了大用户量下的服务器负载":["68.0"],"可以实现动态刷新":["68.0"],"局部刷新":["68.0"],"安全问题":["68.0"],"暴露了与服务器交互的细节":["68.0"],"对搜索引擎的支持比较弱":["68.0"],"seo":["68.0"],"的替代方案":["68.1"],"是一个原生的":["68.1"],"api":["68.1","92.5","92.10","94.3"],"技术智能自动选择":["69.0"],"cache服务器":["69.0"],"选择最快的":["69.0"],"服务器":["69.0"],"加快远程访问的速度":["69.0"],"带宽优化":["69.0"],"自动生成服务器":["69.0"],"向本地域名解析服务系统发起域名解析的请求":["70.0"],"一般是本地运营商的机房":["70.0"],"向根域名解析服务器发起域名解析服务请求":["70.0"],"根域名服务器返回":["70.0"],"中":["71.0","95.6"],"浏览器对":["71.0"],"的长度有限制":["71.0"],"网络层之间加入了":["72.0"],"ssl":["72.0"],"tsl":["72.0"],"安全协议":["72.0"],"篡改风险":["72.1"],"强制植入垃圾广告":["72.1"],"冒充风险":["72.1"],"在通信过程中使用对称加密的方式进行加密明文数据":["72.2"],"服务端确认双方使用的加密方法":["72.3"],"并给出数字证书":["72.3"],"以及一个服务器生成的随机数":["72.3"],"第三步":["72.3"],"客户端确认数字证书有效":["72.3"],"场景中通常端与端之间的交互量很大":["72.4"],"对非对称加密的效率是无法忍受的":["72.4"],"另外":["72.4","92.7"],"场景中只有服务端保存了私钥":["72.4"],"一对公私钥只能实现单向加解密过程":["72.4"],"因此":["72.4"],"中的内容传输采用对称加密":["72.4"],"和加密算法":["72.5"],"如":["72.5","95.19"],"的基本报文格式就是":["73.1"],"header":["73.1"],"body":["73.1"],"浏览器不会记录":["73.2"],"http":["73.2","74.0","83.0"],"链接":["73.3"],"而且是串行请求":["73.3"],"的连接和断开":["73.3"],"增加了通信开销":["73.3"],"http1":["73.3"],"迁移至":["73.4"],"url2":["73.4"],"之后":["73.4"],"客户端不知道":["73.4"],"继续请求":["73.4"],"这个时候服务器就会提高":["73.4"],"状态码和":["73.4"],"location":["73.4"],"头部":["73.4"],"通知客户端这个资源已经迁移到":["73.4"],"所以客户端需要再发送":["73.4"],"请求获取资源":["73.4"],"如果重定向的请求多":["73.4"],"客户端每次都要发起":["73.4"],"就会降低网络的性能":["73.4"],"accept":["73.6"],"这些字段加起来高达几百甚至几千字节":["73.6"],"所以有必要进行压缩":["73.6"],"而且很大请求和响应的报文中有很多字段都是重复的":["73.6"],"所以有必要避免重复性":["73.6"],"而且字段是":["73.6"],"ascii":["73.6"],"编码":["73.6","83.11"],"可读性较好但是效率低":["73.6"],"所以有必要改成二进制编码":["73.6"],"所以":["73.6","95.21"],"开发了":["73.6"],"hpack":["73.6"],"算法来压缩头部":["73.6"],"主要由静态字典":["73.6"],"动态字典和":["73.6"],"huffman":["73.6"],"编码组成":["73.6"],"核心就是客户端和服务端都会建立和维护字典":["73.6"],"用长度较小的索引号来表示重复的字符串":["73.6"],"再用":["73.6"],"编码来压缩数据":["73.6"],"最高能达到":["73.6"],"的高压缩率":["73.6"],"二进制帧":["73.6"],"长连接机制":["74.0"],"作为自己认证的凭据":["75.0"],"应用系统接受到请求之后会把":["75.0"],"送到认证系统进行校验":["75.0"],"检查":["75.0"],"的合法性":["75.0"],"同一台设备进程之间进行通信":["76.0"],"可以通过管道":["76.0"],"可靠的":["76.1"],"基于字节流的传输层通信协议":["76.1"],"相比":["76.2"],"具备流量控制":["76.2"],"控制发送方向接收方发送数据的速率":["76.2"],"防止接收方接收不了":["76.2"],"导致数据丢失或网络拥塞":["76.2"],"核心思想是发送方和接收方一起维护一个滑动窗口":["76.2"],"接收方通过":["76.2"],"报文中的窗口大小字段告诉发送方它的接收能力":["76.2"],"发送方根据接收方告知的窗口大小来确定可以发的数据量":["76.2"],"每发送一次数据":["76.3"],"就累加一次该数据字节数的大小":["76.3"],"用来解决网络包乱序的问题":["76.3"],"ip":["76.4"],"层是不可靠的":["76.4"],"报文发送给服务端":["76.5"],"向服务端发起连接":["76.5"],"客户端处于":["76.5"],"sent":["76.5"],"这个报文不包含应用层数据":["76.5"],"作为":["76.6"],"报文的序列号值":["76.6"],"表明已经收到客户端的报文了":["76.6"],"此时服务端处于":["76.6"],"close":["76.6"],"wait":["76.6","124.0","124.1"],"第三次挥手":["76.6"],"如果服务端也想断开连接了":["76.6"],"只要客户端给出这个编号":["76.7"],"服务器如果有这个编号的记录":["76.7"],"那么双方就可以继续使用以前的秘钥":["76.7"],"而不用重新生成一把":["76.7"],"目前所有的浏览器都支持这一种方法":["76.7"],"但是这种方法有一个缺点是":["76.7"],"不重复":["76.8"],"且按序到达":["76.8"],"尽最大努力交付":["76.8"],"即不保证可靠交付":["76.8"],"并且因为":["76.8"],"可靠":["76.8"],"表示目前是协议处理的中间状态":["77.0"],"ok":["77.1"],"最常见的成功状态码":["77.1"],"表示一切正常":["77.1"],"moved":["77.2"],"permanently":["77.2"],"表示客户端请求的报文有错误":["77.3"],"服务器发生错误":["77.4"],"multipart":["78.0"],"form":["78.0"],"data":["78.0"],"application":["78.0"],"严重浪费了服务器端和客户端的资源":["79.0"],"当用户增加时":["79.0"],"服务器端的压力就会变大":["79.0"],"这是很不合理的":["79.0"],"长轮询":["79.0"],"首先由客户端向服务器发起请求":["79.0"],"较大的响应需要在客户端和服务器之间进行多次往返通信":["80.0"],"这会延迟浏览器获得和处理内容的时间":["80.0"],"还会增加访问者的流量费用":["80.0"],"是一个时间戳":["80.1"],"接下来当再次向服务器请求这个资源的时候":["80.1"],"浏览器会先比对本地时间和":["80.1"],"的时间戳":["80.1"],"如果本地时间小于":["80.1"],"设定的过期时间":["80.1"],"那么直接去缓存中去取这个资源":["80.1"],"也正因为如此":["80.1"],"是有问题的":["80.1"],"因为":["80.1","92.3"],"会依赖本地时间":["80.1"],"如果服务端和客户端的时间设置不同":["80.1"],"或者直接去手动改客户端的时间":["80.1"],"值":["80.2"],"服务器接收到这个时间戳后":["80.2"],"会比对该时间戳和资源在服务器上的最后修改时间是否一致":["80.2"],"从而判断资源是否发生了改变":["80.2"],"如果发生了变化":["80.2"],"就会返回一个完整的响应内容":["80.2"],"并在":["80.2"],"response":["80.2"],"中添加新的":["80.2"],"否则":["80.2"],"maxage":["80.3"],"最后":["80.3"],"配置协商缓存需要用到的":["80.3"],"etag":["80.3"],"modified":["80.3"],"等参数":["80.3"],"memorycache":["80.3"],"是指存在内存中的缓存":["80.3"],"优先级最高":["80.3"],"浏览器会最先去命中的一种缓存":["80.3"],"也是响应速度最快的一种缓存":["80.3"],"就是一个存储在浏览器中的很小的一个文本文件":["80.5"],"附着在":["80.5"],"使其消失的唯一办法就是手动删除":["80.6"],"即便是相同域名下的两个窗口":["80.7"],"只要不在同一个浏览器窗口中打开":["80.7"],"那么它们的":["80.7"],"不仅可以存储字符串":["80.8"],"也可以存储二进制数据":["80.8"],"都是只能在拿到数据后存起来这件事情发生之后":["80.9"],"首次请求资源的时候":["80.9"],"想要提升响应能力":["80.9"],"就需要":["80.9"],"浏览器可能做不到一次性处理那么多的任务":["81.0"],"实际上":["81.0"],"用户点开页面的瞬间":["81.0"],"能看到的只有首屏的东西":["81.0"],"通过在一段时间内无视后来产生的回调请求来实现的":["81.1"],"然后返回给客户端":["82.0"],"客户端拿到的是可以直接渲染然后呈现给用户的":["82.0"],"内容":["82.0"],"文档":["82.1"],"生成样式规则":["82.1"],"图层布局计算模块":["82.1"],"布局计算每个对象的精确位置和大小":["82.1"],"视图绘制模块":["82.1"],"进行具体节点的图像绘制":["82.1"],"引擎":["82.1"],"遇到":["82.2"],"link":["82.2"],"style":["82.2","95.16","98.1"],"才开始构建":["82.2"],"所以需要将":["82.2"],"尽早":["82.2"],"尽快下载到客户端":["82.2"],"以便缩短首次渲染的时间":["82.2"],"修改元素的宽":["82.3"],"高或隐藏元素等":["82.3"],"时":["82.3","95.16"],"浏览器需要重新计算元素的几何属性":["82.3"],"然后再将计算的结果绘制出来":["82.3"],"这个过程就叫回流":["82.3"],"请求":["83.0"],"响应":["83.0"],"功能很强大":["83.2"],"但是也很慢":["83.2"],"可以使用":["83.2","90.1"],"include":["83.2","95.9"],"module":["83.3","155.1"],"exports":["83.3","155.1"],"entry":["83.3"],"依赖的库数组":["83.3"],"vendor":["83.3"],"prop":["83.3"],"types":["83.3"],"babel":["83.3"],"polyfill":["83.3"],"react":["83.3","95.13"],"router":["83.3","95.25"],"output":["83.3"],"如果同一时刻存在多个任务":["83.4"],"只能排队一个一个的等待处理":["83.4"],"删除冗余代码":["83.5"],"tree":["83.5","94.1"],"shaking":["83.5"],"基于":["83.5"],"import":["83.5","155.8"],"export":["83.5"],"语法":["83.5"],"压缩后通常能减少响应":["83.6"],"左右的大小":["83.6"],"压缩的原理是在一个文本文件中找出一些重复的字符串":["83.6"],"临时替换它们":["83.6"],"从而使整个文件变小":["83.6"],"base64":["83.7"],"首先":["83.7"],"是一种非常轻巧的图片格式":["83.8"],"格式有":["83.8"],"位存储单个图":["83.8"],"种颜色":["83.9"],"对图像的处理不是基于像素点":["83.10"],"而是基于对图像的形状描述":["83.10"],"对比":["83.10"],"png":["83.10"],"位字节码的编码方式":["83.11"],"通过对图片进行":["83.11"],"我们可以直接将编码结果写入到":["83.11"],"之外的浏览器兼容性较差":["83.12"],"会增加服务端的负担":["83.12"],"和编码":["83.12"],"文件相比":["83.12"],"csrf":["84.0"],"token":["84.0"],"总的来说有以下几点":["85.0"],"永远不要信任用户的输入":["85.0"],"要对用户的输入进行校验":["85.0"],"可以通过正则表达式":["85.0"],"标签或者":["86.0"],"代码":["86.0","97.0"],"比如":["86.0"],"是加密传输":["87.0"],"两边拥有相同的密钥":["87.1"],"两边都知道如何将密文加密解密":["87.1"],"非对称密钥会有两把密钥":["87.2"],"一把是私钥":["87.2"],"只有自己才有":["87.2"],"服务器把":["87.3"],"ca":["87.3"],"数字证书":["87.3"],"包含公钥":["87.3"],"响应给客户端":["87.3"],"对之后传输的内容进行加密传输":["87.4"],"中间人通过客户端的随机数对客户端的数据进行解密":["87.4"],"中间人与服务端建立合法的":["87.4"],"https":["87.4"],"web":["88.0"],"可以防止用户使用自动化程序对密码":["89.0"],"当用户知道了":["90.0"],"中的":["90.0","94.8"],"在模板中放入过多逻辑会让模板难以维护":["90.1"],"可以将复杂的逻辑放入计算属性中处理":["90.1"],"当页面中有某些数据依赖其他数据进行变动的时候":["90.1"],"遍历":["90.2"],"里的每个属性":["90.2"],"常见的配置选项有":["90.3"],"deep":["90.3"],"immediate":["90.3","124.1"],"this":["91.0","94.9","95.23"],"route":["91.0"],"跳转对象":["91.1"],"里面可以获取":["91.1"],"name":["91.1"],"index":["91.2"],"文件中":["91.2"],"在电脑上有用":["91.3"],"安卓上没反应怎么解决":["91.3"],"因此我们能通过浏览器的回退":["91.4"],"前进按钮控制":["91.4"],"的切换":["91.4"],"a":["91.4","91.5","129.0"],"并设置":["91.4"],"href":["91.4"],"属性":["91.4","92.9","95.9"],"当用户点击这个标签后":["91.4"],"的":["91.4","94.6","95.3","95.12"],"值会发生改变":["91.4"],"或者使用":["91.4"],"来对":["91.4"],"loaction":["91.4"],"进行赋值":["91.4"],"分别起到路由导航作用和组件内容渲染作用":["91.5"],"使用中":["91.5"],"默认生成一个":["91.5"],"repalcestate":["91.6"],"这两个":["91.6"],"可以在不进行刷新的情况下":["91.6"],"操作浏览器的历史纪录":["91.6"],"replacestate":["91.7"],"的变化":["91.7"],"组件级":["91.8"],"影响范围由大到小":["91.8"],"例如全局的":["91.8"],"一般来说":["91.9"],"对所有的":["91.9"],"路由都使用动态导入":["91.9"],"是个好主意":["91.9"],"函数":["91.10"],"返回路由器实例":["91.10"],"实例内部做几件事":["91.10"],"保存用户传入的配置项":["91.10"],"监听":["91.10"],"hash":["91.10"],"无法监控到数组下标的变化":["92.0"],"导致通过数组下标添加元素":["92.0"],"不能实时响应":["92.0"],"必须遍历对象的每个属性":["92.0"],"用于处理对象类型的数据响应式":["92.1"],"会自动追踪函数内部使用的响应式数据":["92.2"],"不需要显示指定":["92.2"],"可以监视多个数据":["92.2"],"编译优化":["92.4"],"生命周期":["92.5"],"只会调用一次":["92.6"],"而":["92.6"],"函数在渲染过程中会被多次调用":["92.6"],"选项":["92.7"],"自定义渲染器":["92.7"],"变量":["92.7"],"suspense":["92.7"],"获取到哪一层才触发响应式":["92.8"],"不是像":["92.8"],"vue2":["92.8"],"一次性递归监听数据":["92.8"],"编译层面做了更多编译优化处理":["92.8"],"用户将制造":["92.9"],"反而更混乱":["92.9"],"为何":["92.9"],"需要":["92.9"],"value":["92.9","108.0"],"composition":["92.10"],"不能直接更改":["93.0"],"类似于":["93.1"],"不同在于":["93.1"],"可以包含任意异步操作":["93.1"],"但它不能修改状态":["93.1"],"需要提交":["93.1"],"才能变更状态":["93.1"],"开发时":["93.1"],"包含异步操作或者复杂业务组合时使用":["93.1"],"选项方式":["93.2"],"可以以字符串形式监听":["93.2"],"state":["93.2","93.3"],"xx":["93.2"],"mutation":["93.3"],"的时候同时存入":["93.3"],"store":["93.3"],"中把值取出作为":["93.3"],"的升级版":["93.4"],"官网也说过":["93.4"],"为了尊重原作者":["93.4"],"所以取名":["93.4"],"而没有取名":["93.4"],"所以大家可以直接将":["93.4"],"比作为":["93.4"],"type":["93.5"],"payload":["93.5"],"dispatch":["93.5"],"实现":["93.5"],"通过":["94.0","97.0"],"object":["94.0"],"语法树":["94.1"],"abstract":["94.1"],"syntax":["94.1"],"即":["94.1","145.0"],"源代码的抽象语法结构的树状表现形式":["94.1"],"的属性一一对应":["94.3"],"如果用原生":["94.3"],"去操作":["94.3"],"浏览器会从构建":["94.3"],"树开始从头到尾执行一遍流程":["94.3"],"来检测数组":["94.4"],"性能差":["94.4"],"存放所依赖的":["94.5"],"watcher":["94.5"],"当属性变化后会通知自己对应的":["94.5"],"都是采用":["94.6"],"diff":["94.6","95.11"],"算法来对比新旧虚拟节点":["94.6"],"来更新节点":["94.6"],"函数中":["94.6"],"在交叉对比中":["94.6"],"同时也初始化了":["94.7"],"provide":["94.7"],"inject":["94.7"],"方法":["94.7"],"内部会对数据进行劫持":["94.7"],"对象采用":["94.7"],"先判断一方有子节点和一方没有子节点的情况":["94.8"],"如果新的":["94.8"],"children":["94.8","114.0"],"没有子节点":["94.8"],"将旧的子节点移除":["94.8"],"比较都有子节点的情况":["94.8"],"核心":["94.8"],"递归比较子节点":["94.8"],"算法称为":["94.8"],"patching":["94.8"],"它由":["94.8"],"对数据进行观测":["94.9"],"如果数据是对象":["94.9"],"调用":["94.9"],"walk":["94.9"],"内部对":["94.9"],"进行遍历":["94.9"],"通过调用":["94.9"],"方法循环对象属性":["94.9"],"方法将其定义为响应式":["94.9"],"这个过程中整体上做了两件事":["94.10"],"初始化":["94.10"],"会在本轮数据更新后":["94.11"],"在异步更新视图":["94.11"],"核心思想":["94.11"],"nexttick":["94.11"],"而是开启一个队列":["94.12"],"把组件更新函数保存在队列中":["94.12"],"在同一事件循环中发生的所有数据变更会异步的批量更新":["94.12"],"这一策略导致我们对数据的修改不会立刻体现在":["94.12"],"上":["94.12"],"此时如果想要获取更新后的":["94.12"],"状态":["94.12"],"就需要使用":["94.12"],"指令在表单":["94.13"],"算法是一个时间复杂度为":["94.14"],"核心库只关心视图层":["95.0"],"是一个声明式框架":["95.0"],"因为根实例是单例":["95.1"],"不会产生数据污染情况":["95.1"],"组件实例对象":["95.1"],"只是简单的基于":["95.2"],"切换":["95.2"],"编译条件":["95.2"],"是真正的条件渲染":["95.2"],"它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建":["95.2"],"只有渲染条件为假时":["95.2"],"并不做操作":["95.2"],"直到为真才渲染":["95.2"],"的优先级是高于":["95.3"],"把它们放在一起":["95.3"],"refs":["95.4","95.23"],"div":["95.5"],"是不归":["95.5"],"如果请求来的数据不是要被其它组件共用":["95.6"],"仅仅在请求的组件内使用":["95.6"],"一旦页面加载完成":["95.7"],"加载慢的原因":["95.8"],"网络延时问题":["95.8"],"资源文件体积过大":["95.8"],"用于缓存组件":["95.9"],"提供":["95.9"],"exclude":["95.9"],"让一个对象变成响应式数据":["95.10"],"检测差异":["95.11"],"功能抽离公共的业务逻辑":["95.12"],"ui":["95.13","95.25"],"组件":["95.13","95.24"],"能看到的前端页面":["95.13"],"其实就是":["95.13"],"vue":["95.13","100.1"],"等前端框架":["95.13"],"vdom":["95.14"],"是一颗单根树形结构":["95.14"],"patch":["95.14"],"方法在遍历的时候从根节点开始遍历":["95.14"],"它要求只有一个根节点":["95.14"],"watch":["95.15"],"不能通过":["95.15"],"emit":["95.15"],"对外暴露事件":["95.15"],"调用事件只能通过":["95.15"],"listeners":["95.15","95.16"],"click":["95.15"],"从而实现任何组件间的通信":["95.16"],"包括父子":["95.16"],"兄弟组件":["95.16"],"attrs":["95.16"],"隔代组件通信":["95.16"],"包含了父作用域中不被":["95.16"],"所识别":["95.16"],"且获取":["95.16"],"的特性绑定":["95.16"],"class":["95.16"],"除外":["95.16"],"当一个组件没有声明任何":["95.16"],"混入":["95.17"],"子组件中所有的":["95.18"],"都将会刷新为最新的值":["95.18"],"这意味着你不应该在一个子组件内部改变":["95.18"],"如果你这样做了":["95.18"],"并且组件在系统中是被复用的":["95.19"],"所以对代码进行优化可获得系统的整体升级":["95.19"],"插件是什么":["95.19"],"插件通常用来为":["95.19"],"添加全局功能":["95.19"],"插件的功能范围没有严格的限制":["95.19"],"一般有下面几种":["95.19"],"添加全局方法或者属性":["95.19"],"custom":["95.19"],"element":["95.19","95.25"],"添加全局资源":["95.19"],"指令":["95.19"],"来说":["95.20"],"修饰符就简单很多了":["95.20"],"一个组件上可以有多个":["95.20"],"更快的内容到达时间":["95.21"],"首屏加载更快":["95.21"],"会等待所有":["95.21"],"编译后的":["95.21"],"文件都下载完成后":["95.21"],"才开始进行页面的渲染":["95.21"],"文件下载等需要一定的时间等":["95.21"],"所以首屏渲染需要一定的时间":["95.21"],"直接由服务端渲染好页面直接返回显示":["95.21"],"无需等待下载":["95.21"],"文件及再去渲染等":["95.21"],"有更快的内容到达时间":["95.21"],"开发条件会受到限制":["95.21"],"服务器端渲染只支持":["95.21"],"beforecreate":["95.21"],"created":["95.21"],"两个钩子":["95.21"],"当我们需要一些外部扩展库时需要特殊处理":["95.21"],"删除数组的区别":["95.22"],"我们就可以在项目中编写":["95.24"],"格式的":["95.24"],"我们可以把代码分割为":["95.24"],"接下来引入必要插件":["95.25"],"路由插件":["95.25"],"状态管理":["95.25"],"vuex":["95.25"],"pinia":["95.25"],"库我比较喜欢":["95.25"],"plu":["95.25"],"s":["95.25"],"antd":["95.25"],"上的数据和方法都不能被访问":["96.0"],"钩子调用是在":["96.0"],"initstate":["96.0"],"之前的":["96.0"],"作用是对":["96.0"],"props":["96.0"],"等属性进行初始化处理":["96.0"],"实例被创建后发生":["96.0"],"当前阶段已经完成了数据观测":["96.0"],"可以使用数据":["96.0"],"清理定时器":["96.1"],"避免内存泄露和不必要的开销":["96.1"],"取消异步操作":["96.1"],"mounted":["96.2","96.3"],"生命周期中调用异步请求":["96.3"],"babylon":["97.0"],"格式的资源":["98.0"],"source":["98.1"],"scss":["98.3"],"代码转换成":["98.3"],"file":["98.3"],"底层是利用发布订阅模式":["99.1"],"原型上需要定义apply":["99.2"],"的方法":["99.2"],"apply":["99.2"],"compiler":["99.2"],"查找入口文件引入了哪些js文件":["100.0"],"结尾的文件":["100.1"],"必须要通过对应的":["100.1"],"解析成":["100.1"],"代码后":["100.1"],"才能识别":["100.1"],"值就会更改":["101.0"],"chunkhash":["101.0"],"webpack":["102.0","155.5"],"会重新编译":["102.0"],"开启":["102.1"],"服务":["102.1"],"本地":["102.1"],"启动后":["102.1"],"xmlhttprequest":["103.0"],"false":["103.0","106.0","134.0","138.0"],"代表请求是同步的还是异步的":["103.0"],"false表示同步":["103.0"],"open":["103.0"],"throw":["105.0"],"error":["105.0"],"必须传入至少一个参数":["105.0"],"判断参数是否都为函数":["105.0"],"null":["106.0","132.0","147.0"],"return":["106.0","112.0","119.0","123.0","132.0","135.0","138.0"],"shift":["107.0"],"取第一个任务执行":["107.0"],"sleep":["107.0"],"time":["107.0"],"const":["108.0","124.0","127.0","132.0"],"否则返回新生成的对象":["109.0"],"mynew":["109.0"],"constructor":["109.0"],"args":["109.0","113.0"],"模拟异步":["110.0"],"保证resolvetask事件先注册成功":["110.0"],"要考虑在promise里面写同步代码的情况":["110.0"],"foreach":["110.0"],"cb":["110.0"],"err":["110.0"],"resolve包一下":["110.1"],"防止promises":["110.1"],"不是promise类型":["110.1"],"重发的次数":["110.2"],"设置下一次执行interval函数":["111.0"],"达到模拟循环":["111.0"],"第一次interval函数":["111.0"],"在delay后执行interval":["111.0"],"ms":["112.0"],"curried":["113.0"],"if":["113.0","120.0","132.0","135.0","138.0"],"实现代码":["114.0"],"listtotree":["114.0"],"将回调函数添加到事件订阅列表中":["115.0"],"push":["115.0","120.0"],"删除订阅":["115.0"],"off":["115.0"],"检查是否存在该类型的事件订阅":["115.0"],"isarray":["117.0","118.0"],"concat":["117.0","118.0"],"返回数组":["119.0"],"改进":["119.0"],"betterbubblesort":["119.0"],"i":["119.1","119.2","142.0"],"是当前排序区间的起点":["119.1"],"j用于帮助":["119.2"],"寻找自己应该有的定位":["119.2"],"它接受一个数组nums以及左右边界left和right作为参数":["119.3"],"如果左边界大于等于右边界":["119.3"],"表示排序完成":["119.3"],"直接返回":["119.3"],"retur":["119.3"],"调用partition函数获取枢轴元素的索引":["119.3"],"leftarr":["119.4"],"slice":["119.4"],"递归分割右子数组":["119.4"],"rightarr":["119.4"],"includes":["120.0"],"转成":["121.0"],"这里用0表示为顶级节点":["121.0"],"fn":["124.0","124.1"],"是需要执行的函数":["124.0"],"是时间间隔":["124.0"],"throttle":["124.0"],"debounce":["124.1"],"只作为记录":["125.0"],"的形式给出":["126.0","137.0"],"不要给另外的数组分配额外的空间":["126.0","137.0"],"你必须原地修改输入数组":["126.0","137.0"],"的额外空间解决这一问题":["126.0","137.0"],"reversewords":["127.0"],"字符串转数组":["127.0"],"strarr":["127.0"],"array":["127.0","142.0"],"from":["127.0"],"移除多余空格":["127.0"],"removeextraspaces":["127.0"],"翻转":["127.0"],"path":["128.0"],"其中以":["128.0"],"作为分隔符":["128.0"],"现需将路径加密":["128.0"],"加密方法为将":["128.0"],"且不重复的三元组":["129.0"],"注意":["129.0"],"答案中不可以包含重复的三元组":["129.0"],"解题思路":["129.0","130.0","131.0","132.0","133.0","134.0","145.0","149.0","150.0"],"var":["129.0","130.0","132.0","133.0","134.0","135.0","146.0"],"threesum":["129.0"],"sort":["129.0"],"ans":["129.0","132.0"],"不考虑输出结果的顺序":["130.0"],"先将两个数组转为使用":["130.0"],"set":["130.0"],"存储":["130.0","135.0"],"再比较两个":["130.0","135.0"],"的那":["131.0"],"两个":["131.0"],"整数":["131.0"],"并返回它们的数组下标":["131.0"],"你可以假设每种输入只会对应一个答案":["131.0"],"数组中同一个元素在答案里不能重复出现":["131.0"],"任意顺序":["132.0"],"返回答案":["132.0"],"foursum":["132.0"],"len":["132.0"],"foursumcount":["133.0"],"就返回":["134.0"],"不是":["134.0"],"则返回":["134.0","147.0"],"ishappy":["134.0"],"map":["135.0"],"isanagram":["135.0"],"如果剩余字符少于":["136.0"],"个":["136.0"],"则将剩余字符全部反转":["136.0"],"如果剩余字符小于":["136.0"],"但大于或等于":["136.0"],"indexof":["138.0"],"next":["138.0","147.0","148.0"],"通过将查找区间分为两半":["139.0"],"返回中间元素的索引":["139.1"],"如果中间元素大于目标元素":["139.1"],"说明目标元素在左半部分":["139.1"],"如果目标值存在返回下标":["139.2"],"否则返回":["139.2"],"思路":["139.2"],"暴力":["139.2"],"首先考虑暴力的方法":["139.2"],"直接通过遍历去查找数组中是否存在目标元素":["139.2"],"非递减顺序":["140.0"],"排序的整数数组":["140.0"],"nums":["140.0"],"返回":["140.0","143.0","151.0"],"每个数字的平方":["140.0"],"组成的新数组":["140.0"],"要求也按":["140.0"],"移除所有数值等于":["141.0"],"的元素":["141.0"],"并返回移除后数组的新长度":["141.0"],"不要使用额外的数组空间":["141.0"],"你必须仅使用":["141.0"],"numsl":["143.0"],"numsr":["143.0"],"并返回其长度":["143.0"],"如果不存在符合条件的子数组":["143.0"],"只能进行节点交换":["145.0"],"dummy":["145.0","146.0"],"removenthfromend":["146.0"],"创建一个dummy节点":["146.0"],"连接到链表的头部":["146.0"],"listnode":["146.0","148.0"],"如果链表中有某个节点":["147.0"],"可以通过连续跟踪":["147.0"],"指针再次到达":["147.0"],"则链表中存在环":["147.0"],"为了表示给定链表中的环":["147.0"],"val":["148.0"],"node":["149.0"],"的节点":["149.0"],"并返回":["149.0"],"新的头节点":["149.0"],"遍历链表":["149.0"],"请你反转链表":["150.0"],"并返回反转后的链表":["150.0"],"三指针":["150.0"],"heada":["151.0"],"headb":["151.0"],"请你找出并返回两个单链表相交的起始节点":["151.0"],"如果两个链表没有交点":["151.0"],"init":["155.0"],"y":["155.0"],"require":["155.1"],"生成的":["155.3"],"文件中分离出来并且单独打包":["155.4"],"文件":["155.6"],"optimization":["155.6"],"的作用就是将非":["155.7"],"core":["155.12"],"如果想要实现打包文件分类":["155.13"]},{"0":["36.0","41.0","67.14","67.16","92.7","139.2","145.0","146.0","147.0"],"1":["2.0","11.0","39.0","68.0","80.1","119.1","132.0"],"2":["2.0","20.2","66.3","75.0","93.4","94.8","94.10","95.18","100.1","102.1"],"3":["22.0","27.0","33.0","60.0","66.2","75.0","93.3","94.12","95.14","100.0"],"4":["16.0","60.0","83.11","87.3","95.25"],"5":["95.15","95.25"],"6":["59.0"],"7":["59.0"],"10":["94.3"],"13":["94.9"],"20":["61.0"],"50":["8.15","124.0"],"80":["15.1"],"100":["8.22"],"200":["16.0"],"204":["77.1"],"302":["16.0"],"403":["77.3"],"501":["77.4"],"1000":["39.0"],"1600":["83.8"],"v8":["1.0"],"密集场景有明显的性能优势":["1.1"],"主要是为了":["1.2"],"当得到了返回值后可以继续执行其他代码":["1.3"],"text":["2.0","8.13","15.4","56.2"],"执行步骤":["2.0"],"执行的时候":["2.0"],"从上到下":["2.0"],"遇到函数会创建执行上下文放入到执行栈中":["2.0"],"执行完毕后会出栈":["2.0"],"可能会发生异步事件":["2.0"],"内部会调用浏览器":["2.0"],"api":["2.0","93.1"],"当我们执行上下文栈都执行完毕后":["2.0"],"其次":["7.0"],"就算是都使用的":["7.0"],"pc":["7.0"],"适用于未知字数中文对齐":["7.1"],"not":["7.1"],"去除无用属性":["7.1"],"排除指定元素不使用样式":["7.1"],"适用于符号分割文字":["7.1"],"object":["7.1","67.9","109.0"],"fit":["7.1"],"规定图像尺寸":["7.1"],"使图像脱离":["7.1"],"background":["7.1","8.19","8.20"],"缺点":["8.2","8.10"],"只对行内元素有效":["8.2"],"必须顶宽":["8.3"],"值不能为":["8.3"],"block":["8.4"],"改为行内或者行内块级形式":["8.4"],"以达到text":["8.4"],"transform":["8.5"],"translatex":["8.5"],"自身宽度一半":["8.5"],"等同于margin":["8.5"],"50px":["8.5","8.10"],"content":["8.6","8.17","15.4","103.0"],"center":["8.6","8.13","8.17","26.1"],"line":["8.8","8.9"],"30px":["8.9"],"25px":["8.10"],"优缺点":["8.10"],"优点":["8.10"],"兼容性好":["8.10"],"不管是块级还是行内元素都可以实现":["8.10"],"代码较多":["8.10"],"脱离文档流":["8.10"],"需要知道高度值":["8.10"],"son":["8.11"],"align":["8.13","8.14"],"vertical":["8.14"],"middle":["8.14"],"left":["8.15","42.0","142.0","143.0"],"auto":["8.16","28.0"],"width":["8.16","8.22"],"100px":["8.16"],"justify":["8.17"],"color":["8.19"],"f00":["8.19"],"css":["8.20","8.22","8.23","8.24","8.27","17.2","31.0","80.3","155.3"],"relative":["8.21"],"子绝父相":["8.21"],"absolute":["8.21","19.1"],"top":["8.21","36.0","142.0"],"margin":["8.23"],"display":["8.24","8.27","33.0","40.0"],"eeff2b":["8.26"],"320px":["8.26"],"等于":["8.26"],"center的宽度之和加上间隔":["8.26"],"多出来的就是":["8.26"],"right和":["8.26"],"center的间隔":["8.26"],"0f0":["8.26"],"height":["8.27","24.0"],"500px":["8.27"],"禁止缩放":["11.0"],"设置":["11.0","91.5"],"meta":["11.0"],"标签":["11.0"],"的":["12.0","25.0","80.3"],"所以他必须等待到":["12.0"],"构建完成":["12.0"],"也就是":["12.0"],"资源加载完成":["12.0"],"或者":["12.0","91.10"],"资源加载失败":["12.0"],"后":["12.0"],"cookie":["13.0","86.0"],"绘制等任务":["14.0"],"将其转化成可视化的网页形式":["14.0"],"常见的有":["14.0"],"6844903767226351623":["15.0"],"端口号":["15.1"],"都相同":["15.1"],"data":["15.3","73.6","95.23","114.0"],"body":["15.3","71.0"],"removechild":["15.3"],"post":["15.4"],"type":["15.4"],"的值为下面三个之一":["15.4"],"将请求转发给服务器":["15.5"],"则需要重定向":["16.0"],"从":["16.0"],"location":["16.0"],"自动中读取地址":["16.0"],"重新进行第":["16.0"],"步":["16.0"],"跳转也会读取本地缓存吗":["16.0"],"则继续处理请求":["16.0"],"这样一个运行环境叫做进程":["17.1"],"管理任务和资源分配的基本单位":["17.1"],"html":["17.2","38.0"],"js":["17.2","55.0","66.5","67.6","80.3","82.2","91.4","126.0","131.0","136.0","137.0","143.0","151.0"],"其中的元素按照特定规则进行排布":["19.0"],"属性为":["19.1","62.0","90.0"],"或":["19.1","83.2"],"fixed":["19.1"],"因为":["19.2","92.6","94.9"],"表单加上":["20.1"],"off":["20.2"],"属性被设置成":["21.0"],"值后":["21.0"],"对于一般的元素":["21.0"],"它的表现跟":["21.0"],"图标":["23.0"],"能够改变元素的":["24.1"],"weight":["24.2"],"倍":["25.0"],"定义项目的缩小比例":["25.0"],"即":["25.0"],"如果空间不足":["25.0"],"该元素将缩小":["25.0"],"所有项目的":["25.0"],"容器":["26.0"],"定义在主轴上的对齐方式":["26.1"],"start":["26.1","127.0"],"默认":["26.1"],"左对齐":["26.1"],"end":["26.1"],"右对齐":["26.1"],"居中":["26.1"],"space":["26.1"],"between":["26.1"],"也不放大":["26.2"],"如果所有项目的":["26.2"],"被同时加载":["27.0"],"引入的":["27.0"],"将在页面加载完毕后被加载":["27.0"],"值来分隔它们":["28.0"],"当然我们也可以将父元素设置为":["28.0"],"第三种是高度为":["28.0"],"的父元素的":["28.0"],"如果不存在逐级向上查找":["29.0"],"和":["31.0","51.0","65.4","67.11","83.0","93.4","95.13","95.24"],"来修改和操作":["31.0"],"而":["31.0"],"除非一再触发动画":["32.0"],"blue":["33.0"],"flex":["33.0"],"布局":["33.0"],"左边定宽":["33.0"],"右侧":["33.0"],"outer":["33.0"],"我们可以通过":["34.0"],"hover":["34.0"],"子孙节点消失是继承了":["35.0"],"属性":["35.0"],"可以通过设置":["35.0"],"visibile":["35.0"],"使子孙节点显示":["35.0"],"只会导致重绘":["35.0"],"绝对定位中":["36.0"],"bottom":["36.0","41.0","142.0"],"骨架屏":["37.0"],"关键样式直接写在":["38.0"],"标签的":["38.0"],"style":["38.0","95.24"],"属性中":["38.0"],"多行":["40.0"],"right":["41.0","44.1","142.0"],"通过使用绝对定位":["42.0"],"以及设置元素":["42.0"],"为其宽度的一半":["42.0"],"不再向父元素汇报高度":["43.0"],"后期不容易维护":["43.1"],"原理":["43.1"],"元素的左右两侧都不允许浮动元素存在":["43.1"],"只设置":["44.0"],"transparent":["44.1"],"只包括内容区域":["45.0"],"ie":["45.0"],"盒模型":["45.0"],"包含内容区域":["45.0"],"这些空白字符会被解析为文本节点":["46.0"],"使":["46.1"],"li":["46.1"],"自动排列在一行内":["46.1"],"间隔消失":["46.1"],"伪类选择器":["47.0"],"id选择器":["47.1"],"类选择器":["47.1"],"on":["48.0"],"后者带":["48.0"],"脚本文件":["49.0"],"他们都不会阻塞页面的解析":["49.0"],"区别":["49.0"],"脚本的执行时机是在下载完成后立即执行":["49.0"],"href":["50.0"],"中指定锚点的":["50.0"],"和离线存储":["51.0"],"多媒体方面规定了":["51.0"],"audio":["51.0"],"允许在主页面加载的时候并行加载嵌套页面":["52.0"],"提高页面并发性能":["52.0"],"for":["53.0","67.10","105.0","114.0","122.0","127.0","129.0","132.0","133.0"],"异步地预取指定资源":["54.0"],"这意味着浏览器会在":["54.0"],"空闲":["54.0"],"时加载这些资源":["54.0"],"编译":["55.0"],"执行完毕":["55.0"],"因此":["55.0"],"属性会影响页面的加载和渲染速度":["55.0"],"这也是为什么将":["55.0"],"放在底部而不是头部":["55.0"],"message":["56.1"],"event":["56.1"],"javascript":["56.2","65.1"],"function":["56.2","116.0","131.0","133.0","136.0","151.0"],"click":["56.2"],"页面1":["56.3"],"input":["56.3","123.0"],"id":["56.3"],"标签具有强调的语义":["57.1"],"对于一般显示":["57.1"],"可能看上去没有什么差异":["57.1"],"但是对于机器来说":["57.1"],"会有很大的不同":["57.1"],"如果用户使用的是屏幕阅读器来访问网页":["57.1"],"内容块":["57.2"],"比如新闻文章":["57.2"],"博客帖子等":["57.2"],"aside":["57.2"],"简化了函数调用时传参的操作":["59.0"],"扩展运算符":["59.0"],"使用三个点":["59.0"],"进行数组和对象的展开操作":["59.0"],"可以将一个数组或对象拆分为独立的元素":["59.0"],"或者将多个数组或对象合并为一个":["59.0"],"promise":["59.0","68.1","91.9","110.2"],"引入了":["59.0"],"当某个宏任务执行完后":["60.0"],"会查看微任务队列是否有任务":["60.0"],"执行微任务队列中的所有微任务":["60.0"],"注意这里是执行所有的微任务":["60.0"],"微任务执行完成后":["60.0"],"会读取宏任务队列中排在最前的第一个宏任务":["60.0"],"注意宏任务是一个个取":["60.0"],"执行该宏任务":["60.0"],"如果执行过程中":["60.0"],"遇到微任务":["60.0"],"依次加入微任务队列":["60.0"],"宏任务执行完成后":["60.0"],"再次读取微任务队列里的任务":["60.0"],"依次类推":["60.0"],"async":["60.0"],"this2":["61.0"],"note":["61.0"],"开启了严格模式之和":["61.0"],"只是使函数内的this指向undefined":["61.0"],"不影响全局下的this的指向":["61.0"],"let":["61.0","106.0","114.0","119.3","122.0","124.0","124.1","130.0","131.0","133.0","135.0","143.0"],"const":["61.0","105.0","109.0","133.0","134.0"],"b":["61.0"],"的事件对象通过设置事件对象的":["62.0"],"canclebubble":["62.0"],"如果在同一对象上定义了其他处理程序":["62.1"],"剩下的处理程序将依旧被调用":["62.1"],"但调用":["62.1"],"之后任何其他对象上的事件处理程序将不会被调用":["62.1"],"不仅可以阻止事件在冒泡阶段的传播":["62.1"],"还能阻止事件在捕获阶段的传播":["62.1"],"ie9":["62.1"],"的时候决定的":["63.2"],"语句中的":["63.3"],"也属于块作用域":["63.3"],"只能在块作用域中访问":["63.4"],"不能跨块访问":["63.4"],"就会从父级的执行上下文的变量对象中查找":["63.5"],"后执行":["63.6"],"在每个":["63.6"],"的回调函数中":["63.6"],"尝试访问":["63.6"],"的值":["63.6"],"这个回调函数是在循环结束之后才会执行":["63.6"],"在循环结束的时候":["63.6"],"全局变量":["63.6"],"为":["63.6"],"所以输出是":["63.6"],"怎么改成":["63.6"],"如果依旧不存在":["64.1"],"中":["64.3","80.1"],"函数也是对象":["64.3"],"所以函数也有":["64.3"],"高延时":["65.0"],"的引用":["65.1"],"垃圾回收器对堆内存从头到尾进行线性遍历":["65.2"],"互相引用的对象不会被回收":["65.3"],"代码都是在执行上下文中运行的":["66.0"],"被调用":["66.1"],"时":["66.1","93.5","94.12"],"都会为该函数创建一个新的上下文":["66.1"],"从上向下按顺序执行":["66.2"],"脚本时":["66.3"],"会创建一个全局的执行上下文并压入当前执行栈":["66.3"],"确定":["66.4"],"this":["66.4","92.10","148.0"],"在顶层":["66.5"],"动态的语言":["67.0"],"bigint":["67.1"],"es10":["67.1"],"引用数据类型":["67.1"],"文件需要往这个对象中添加键名":["67.2"],"由于":["67.2"],"类型的值":["67.3"],"创建":["67.4"],"当一个数据不再需要使用时":["67.5"],"通过将其设置为":["67.5"],"代表的其实就是一个空对象":["67.6"],"在":["67.6","72.1","83.5","95.21"],"所以可以存储在栈中":["67.7"],"可以直接访问和复制":["67.7"],"普通对象":["67.8"],"数组对象":["67.8"],"正则对象":["67.8"],"日期对象":["67.8"],"prototype":["67.9","95.19"],"tostring":["67.9"],"call":["67.9"],"利用":["67.9","100.1"],"in":["67.10"],"循环":["67.10"],"因此非数字值传入也会返回":["67.12"],"会影响":["67.12"],"直接返回":["67.13","115.0"],"false":["67.13","91.4","95.2","107.0","135.0"],"var":["67.15","68.0","126.0","131.0","136.0","137.0","151.0"],"以":["67.16"],"进制的规则去解析":["67.16"],"字符串":["67.16"],"不合法导致解析失败":["67.16"],"随时可以消失":["67.17"],"可以用来保存":["67.17"],"dom":["67.17","92.7","95.13","96.0","96.3"],"节点":["67.17","94.3"],"不容易造成内存泄漏":["67.17"],"不能遍历":["67.17"],"不容易调试":["68.0"],"创建ajax对象":["68.0"],"xhr":["68.0"],"window":["68.0","91.4","91.6"],"xmlhttprequest":["68.0"],"new":["68.0","83.3","92.1","110.2","112.0","130.0","133.0","155.3"],"用于进行网络请求":["68.1"],"支持":["68.1"],"的远程":["69.0"],"mirror":["69.0"],"镜像":["69.0"],"远程用户":["69.0"],"访问时从":["69.0"],"gtld":["70.0"],"域名解析服务器地址":["70.0"],"向":["70.0"],"请求携带的参数一般是写在":["71.0"],"报文中":["71.0"],"使得报文能够密文传输":["72.0"],"连接建立相对简单":["72.0"],"三次握手之后就可以进行":["72.0"],"然后生成一个新的随机数":["72.3"],"premaster":["72.3"],"secret":["72.3"],"并使用数字证书中的公钥":["72.3"],"对称密钥加密和非对称密钥加密它们有什么区别":["72.4"],"对称密钥加密是最简单的一种加密方式":["72.4"],"它的加解密用的都是相同的密钥":["72.4"],"这样带来的好处就是加解密效率很快":["72.4"],"但是并不安全":["72.4"],"如果有人拿到了这把密钥那谁都可以进行解密了":["72.4"],"而非对称密钥会有两把密钥":["72.4"],"一把是私钥":["72.4"],"只有自己才有":["72.4"],"一把是公钥":["72.4","87.2"],"hmac":["72.5"],"sha256":["72.5"],"对":["72.5","91.2"],"头部信息也是":["73.1"],"key":["73.1","87.3"],"value":["73.1"],"的状态":["73.2","76.6"],"为了解决这个问题":["73.3"],"提出了长连接的方式":["73.3"],"减少了":["73.3"],"连接的重复建立和断开所造成的额外开销":["73.3"],"可以将重定向的工作交给代理服务器":["73.4"],"就能减少":["73.4"],"合并请求":["73.4"],"就是把多个访问小文件的请求合并成一个大的请求":["73.4"],"虽然传输的总资源是一样的":["73.4"],"但是减少请求":["73.4"],"就意味着减少了重复发送的":["73.4"],"http1":["73.4","80.1"],"中是请求响应模型":["73.4"],"默认不开启管道模式":["73.4"],"所以也存在队头阻塞问题":["73.4"],"如果合并了请求":["73.4"],"就会减少":["73.4"],"tcp":["73.4","76.5"],"连接的数量":["73.4"],"节省":["73.4"],"将":["73.6","97.0","100.1"],"的文本格式改成二进制帧格式传输数据":["73.6"],"极大的提高了":["73.6"],"传输的效率":["73.6"],"h2":["73.6"],"将响应报文划分成了两类帧":["73.6"],"headers":["73.6"],"首部和":["73.6"],"消息负载":["73.6"],"就是说一条":["73.6"],"响应":["73.6"],"划分成了两类帧来传输":["73.6"],"采用二进制编码":["73.6"],"并发传输":["73.6"],"是基于请求":["73.6"],"响应模型实现的":["73.6"],"在同一个连接中":["73.6"],"完成一个请求":["73.6"],"才能处理下一个":["73.6"],"也就是说在发出请求等待响应的过程中":["73.6"],"length":["74.0","113.0","129.0","139.2"],"服务器在返回数据的时候":["74.0"],"用户就可以在不用再次登录的情况下访问应用系统":["75.0"],"和应用系统":["75.0"],"了":["75.0"],"需要注意两点":["75.0"],"系统共享":["75.0"],"统一的认证系统":["75.0"],"共享内存":["76.0"],"信号":["76.0"],"面向连接":["76.1","76.8"],"发送方不会超过接收方指定的窗口大小发送数据":["76.2"],"超时重传":["76.2"],"在发送某一个数据之后就开启一个定时器":["76.2"],"在一定的时间内如果没有收到发送的数据包的":["76.2"],"ack":["76.2"],"报文":["76.2"],"就会重新发送":["76.2"],"直到发送成功为止":["76.2"],"拥塞控制":["76.2"],"通过观察感知网络的拥塞状态":["76.2"],"确认应答号":["76.3"],"指下一次期望收到的数据的序列号":["76.3"],"发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收":["76.3"],"不能保证网络包的交付":["76.4"],"不保证网络包的按序交付":["76.4"],"服务端收到客户端的":["76.5"],"服务端随机初始化自己的序列号":["76.5"],"将这个序列号填入":["76.5"],"首部的序号字段":["76.5"],"和客户端的第一次挥手一样":["76.6"],"发给":["76.6"],"且指定一个序列号":["76.6"],"last":["76.6"],"第四次挥手":["76.6"],"只能够存在一台服务器上":["76.7"],"如果我们的请求通过负载平衡被转移到了其他的服务器上":["76.7"],"那么就无法恢复对话":["76.7"],"不会丢失数据因此适合大数据量的交换":["76.8"],"是面向字节流":["76.8"],"面向报文":["76.8"],"并且网络出现拥塞不会使得发送速率降低":["76.8"],"因":["76.8"],"还需要后续的操作":["77.0"],"no":["77.1"],"永久重定向":["77.2"],"说明请求的资源已经不存在了":["77.2"],"需要用新的url再次访问":["77.2"],"forbidden":["77.3"],"表示客户端请求的功能还不支持":["77.4"],"x":["78.0","94.8","94.9"],"www":["78.0"],"urlencoded":["78.0"],"当服务器收到客户端发来的请求后":["79.0"],"服务器端不会直接进行响应":["79.0"],"而是先将":["79.0"],"这个请求挂起":["79.0"],"然后判断服务器端数据是否有更新":["79.0"],"如果有更新":["79.0"],"则进行响应":["79.0"],"如果一直没有数据":["79.0"],"所以缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面":["80.0"],"浏览器缓存机制有四个方面":["80.0"],"按照获取资源时请求的优先级排序":["80.0"],"memory":["80.0"],"就会无法达到预期":["80.1"],"所以在":["80.1"],"增加了":["80.1"],"这个字段来代替":["80.1"],"使用":["80.1","80.2","83.6"],"max":["80.1"],"age":["80.1"],"来控制资源的有效期":["80.1"],"不会再添加":["80.2"],"字段":["80.2"],"会有两个弊端":["80.2"],"比如我们编辑了文件":["80.2"],"但是文件的内容没有改变":["80.2"],"但是当":["80.3"],"tab":["80.3"],"关闭的时候":["80.3"],"内存中的数据也会消失":["80.3"],"base64":["80.3","98.3"],"格式的图片":["80.3"],"几乎都是放进":["80.3"],"体积不大的":["80.3"],"请求上":["80.5"],"在浏览器和服务器之间进行传递":["80.5"],"可以携带用户信息":["80.5"],"当服务器检查":["80.5"],"常用于存储一些内容稳定的资源":["80.6"],"无法共享":["80.7"],"当数据的复杂度和规模上升到了":["80.8"],"把资源":["80.9"],"copy":["80.9"],"只要我们在页面打开的时候把首屏的资源加载出来":["81.0"],"用户就会认为页面是没问题的":["81.0"],"下面的图片":["81.0"],"可以等到用户下拉的瞬间再去请求":["81.0"],"防抖":["81.1"],"不需要为了生成":["82.0"],"内容自己再去跑一遍":["82.0"],"代码":["82.0","82.1"],"使用服务端渲染很多是因为网站的":["82.0"],"编译执行":["82.1"],"以创建的是":["82.1"],"所以将":["82.2"],"放在":["82.2"],"head":["82.2","145.0"],"标签中":["82.2"],"会阻塞":["82.2"],"引擎是独立于渲染引擎的":["82.2"],"当":["82.2"],"解析器遇到应该":["82.2"],"script":["82.2","95.24"],"重绘":["82.3"],"的修改导致了样式的变化":["82.3"],"却并未影响其几何属性时":["82.3"],"对于":["83.0"],"exclude":["83.2"],"帮我们避免不必要的转译":["83.2"],"或者通过开启缓存将转译结果缓存至文件系统":["83.2"],"join":["83.3"],"dirname":["83.3"],"dist":["83.3"],"filename":["83.3","155.4"],"name":["83.3"],"library":["83.3"],"hash":["83.3"],"plugins":["83.3"],"dllplugin的name属性需要和libary保持一致":["83.3"],"cpu":["83.4","95.21"],"是多核的":["83.4"],"可以在编译的过程中知道哪些模块并没有被真正的使用":["83.5"],"这些没用的代码":["83.5"],"在最后打包的时候会被去除":["83.5"],"按需加载":["83.5"],"一次不加载完所有的文件内容":["83.5"],"只加载此刻需要用到的那部分":["83.5"],"当需要更多内容时":["83.5"],"再对用到的内容进行即时加载":["83.5"],"的配置文件中":["83.5"],"所以说文件中代码的重复率越高":["83.6"],"压缩的效率就越高":["83.6"],"的收益也就越大":["83.6"],"一般来说":["83.6"],"在计算机中":["83.7"],"像素是用二进制表示的":["83.7"],"不同的图片格式中像素与二进制位数之间的对应关系是不同的":["83.7"],"一个像素对应的二进制位数越多":["83.7"],"可以呈现多达":["83.8"],"万中颜色":["83.8"],"一般场景下足以应对":["83.8"],"适用于呈现色彩丰富的图片":["83.8"],"万种颜色":["83.9"],"图片具有比":["83.9"],"jpg":["83.9","83.10"],"更强的色彩表现力":["83.9"],"文件体积更小":["83.10"],"可压缩性更强":["83.10"],"最显著的优势是可以无限放大不失真":["83.10"],"而且因为":["83.10"],"从而减少":["83.11"],"http":["83.11","95.25"],"请求的次数":["83.11"],"编码之后":["83.11"],"图片的大小会膨胀为原文件的":["83.11"],"编码同样质量的":["83.12"],"文件会占用更多的计算资源":["83.12"],"应用场景":["83.12"],"在站点先进行兼容性的预判":["83.12"],"进行验证":["84.0"],"或限制长度":["85.0"],"对单引号和双":["85.0"],"进行转换等":["85.0"],"永远不要使用动态拼装":["85.0"],"攻击者在论坛中放一个看似安全的链接":["86.0"],"骗取用户点击后":["86.0"],"窃取":["86.0"],"非对称解密":["87.1"],"可以发布给任何人":["87.2"],"客户端解析证书拿到公钥":["87.3"],"生成随机的":["87.3"],"连接":["87.4"],"和服务端之之间使用对称加密进行数据传输":["87.4"],"拿到服务端的响应数据":["87.4"],"可访问目录下":["88.0"],"账号不断尝试":["89.0"],"depp":["90.0"],"没有缓存性":["90.1"],"更多的是观察的作用":["90.1"],"可以监听某些数据执行回调":["90.1"],"当我们需要深度监听对象中的属性时":["90.1"],"每个":["90.2"],"属性都是一个":["90.2"],"watch":["90.2"],"实例":["90.2"],"对应原理如下":["90.3"],"深度监听对象":["90.3"],"为对象的每一个属性创建一个":["90.3"],"接收":["91.0"],"path":["91.1","91.2","91.5","91.10"],"query":["91.1"],"params":["91.1"],"在安卓上有问题是":["91.3"],"改变":["91.4"],"值":["91.4"],"我们可以使用":["91.4"],"hashchange":["91.4"],"事件来监听":["91.4"],"值的变化":["91.4"],"从而对页面进行跳转":["91.4"],"渲染":["91.4"],"addeventlistener":["91.4"],"funcref":["91.4"],"每一次改变":["91.4"],"to":["91.5"],"属性定义跳转":["91.5"],"实际上也可以通过":["91.5"],"custom":["91.5"],"和插槽自定义最终的展现形式":["91.5"],"唯一不同的是":["91.6"],"前者是新增一个历史记录":["91.6"],"后者是直接替换当前的历史记录":["91.6"],"利用自定义事件":["91.7"],"beforeeach":["91.8"],"可以注册一个全局前置守卫":["91.8"],"每次路由导航都会经过这个守卫":["91.8"],"因此在其内部可以加入控制逻辑决定用户是否可以导航到目标路由":["91.8"],"在路由注册的时候可以加入单路由独享的守卫":["91.8"],"给":["91.9"],"component":["91.9"],"选项配置一个返回":["91.9"],"组件的函数就可以定义懒加载路由":["91.9"],"popstate":["91.10"],"事件":["91.10"],"回调里根据":["91.10"],"只能劫持对象的属性":["92.0"],"从而需要对每个对象":["92.0"],"每个属性进行遍历":["92.0"],"如果属性值是对象":["92.0"],"底层采用":["92.1"],"可以在回调函数中处理多个函数的变化情况":["92.2"],"只处理函数内部使用的响应式数据":["92.2"],"几乎是函数":["92.3"],"会有更好的类型推断":["92.3"],"proxy":["92.4","94.9"],"等":["92.4"],"beforedestroy":["92.5"],"改为":["92.5"],"无需使用":["92.6"],"usememo":["92.6"],"usecallback":["92.6"],"避免子组件重复渲染":["92.6"],"在框架层面也有很多亮眼的改进":["92.7"],"更快":["92.7"],"虚拟":["92.7","94.8"],"重写":["92.7"],"diff":["92.7","92.8"],"算法优化":["92.7"],"比如":["92.8"],"静态标记":["92.8"],"pachflag":["92.8"],"算法增加了一个静态标记":["92.8"],"是一个对象":["92.9"],"不丢失响应式":["92.9"],"存储值":["92.9"],"通过":["92.9"],"属性的":["92.9"],"中没有":["92.10"],"需要浅拷贝对象之后更改":["93.0"],"需要直接修改状态则提交":["93.1"],"但由于":["93.1"],"dispatch":["93.1"],"commit":["93.1"],"是两个":["93.1"],"容易引起混淆":["93.1"],"实践中也会采用统一使用":["93.1"],"方式":["93.2"],"可以调用":["93.2"],"cb":["93.2"],"的初始值即可":["93.3"],"这里有两个问题":["93.3"],"不是所有状态都需要持久化":["93.3"],"如果需要保存的状态很多":["93.3"],"为什么要使用":["93.4"],"vue2":["93.4"],"都支持":["93.4"],"这让我们同时使用":["93.4"],"的小伙伴都能很快上手":["93.4"],"可以定义":["93.5"],"类":["93.5"],"构造函数接收选项":["93.5"],"options":["93.5"],"设置属性":["93.5"],"state":["93.5"],"defineproperty":["94.0","94.7"],"是":["94.1"],"createcompiler":["94.1"],"的返回值":["94.1"],"是用以创建编译器的":["94.1"],"另外":["94.1"],"比如有一次操作":["94.3"],"需要更新":["94.3"],"个":["94.3"],"浏览器收到第一个更新":["94.3"],"请求后":["94.3"],"采用重写数组的方法来实现":["94.4"],"去更新":["94.5"],"默认在初始化的时候会调用":["94.5"],"当前节点和旧节点头尾交叉对比没有结果时":["94.6"],"会根据新节点的":["94.6"],"去对比旧节点数组中的":["94.6"],"从而找到相应的旧节点":["94.6"],"如果没有找到就认为是一个新增节点":["94.6"],"如果没有":["94.6"],"就会采用遍历查找的方式去找到对应的旧节点":["94.6"],"数组采用方法重写":["94.7"],"再看一下用户是否传入了":["94.7"],"el":["94.7"],"属性和":["94.7"],"template":["94.7","95.24"],"snabbdom":["94.8"],"修改而来":["94.8"],"要想转化为真实":["94.8"],"就需要通过":["94.8"],"patch":["94.8"],"方法转换":["94.8"],"最初":["94.8"],"vue1":["94.8"],"视图中每个依赖均有更新函数对应":["94.8"],"可以做到精准更新":["94.8"],"因此并不需要虚拟":["94.8"],"vue3":["94.9"],"改用":["94.9"],"替代":["94.9"],"可以直接监听对象和数组的变化":["94.9"],"并且有多达":["94.9"],"种拦截方法":["94.9"],"并且作为新标准将受到浏览器厂商重点持续的性能优化":["94.9"],"回答范例":["94.9"],"所谓数据响应式就是":["94.9"],"能够使数据变化可以被检测并对这种变化做出响应的机制":["94.9"],"建立更新机制":["94.10"],"初始化会创建组件实例":["94.10"],"当数据发生了变化时":["94.11"],"首先调用":["94.11"],"deo":["94.11"],"notify":["94.11"],"开发时":["94.12"],"有两个场景我们会用到":["94.12"],"created":["94.12"],"中想要获取":["94.12"],"响应式数据变化后获取":["94.12"],"textarea":["94.13"],"select":["94.13"],"等元素上创建双向数据绑定":["94.13"],"n3":["94.14"],"vue":["94.14","95.18"],"更关注结果":["95.0"],"收到":["95.0"],"文件在使用的时候实际上会转换成一个":["95.1"],"class":["95.1"],"由":["95.2"],"变为":["95.2"],"true":["95.2","107.0"],"的时候不会触发组件的生命周期":["95.2"],"的时候":["95.2"],"输出的渲染函数中可以看出会先执行循环再判断条件":["95.3"],"哪怕只渲染列表中一小部分元素":["95.3"],"也得在每次重新渲染的时候遍历整个列表":["95.3"],"这会比较浪费":["95.3"],"先给标签设置一个":["95.4"],"管的":["95.5"],"所以写的代码在还没有解析的情况下会容易出现花屏现象":["95.5"],"看到类似":["95.5"],"就不需要放入":["95.6"],"不会因为用户的操作进行页面的重新加载或跳转":["95.7"],"而是利用路由机制实现":["95.7"],"内容的变换":["95.7"],"ui":["95.7"],"是否发生重复请求":["95.8"],"加载脚本的时候":["95.8"],"渲染内容堵塞":["95.8"],"允许组件有条件的进行缓存":["95.9"],"两者都支持字符串或正则表达式":["95.9"],"表示只有名称匹配的组件会被缓存":["95.9"],"表示任何名称匹配的组件都不会被缓存":["95.9"],"内部会用它来处理":["95.10"],"设计的每一个组件一个":["95.11"],"watcher":["95.11"],"没有采用一个属性对应一个":["95.11"],"原理类似":["95.12"],"对象的继承":["95.12"],"当组件初始化时会调用":["95.12"],"层的桥梁":["95.13"],"模式不需要用户手动的去操作":["95.13"],"元素":["95.13"],"将数据绑定到":["95.13"],"组件也会转换为一个":["95.14"],"中之所以可以写多个根节点":["95.14"],"的方式调用外部传入的事件":["95.15"],"因为函数式组件是没有实例化的":["95.15"],"所以在外部通过":["95.15"],"ref":["95.15"],"去引用组件时":["95.15"],"实际引用的是":["95.15"],"htmlelement":["95.15"],"这里会包含所有父作用域的绑定":["95.16"],"并且可以通过":["95.16"],"v":["95.16"],"bind":["95.16","104.0"],"传入内部组件":["95.16"],"通常配合":["95.16"],"inheritattrs":["95.16"],"选项一起使用":["95.16"],"多余的属性不会被解析到标签上":["95.16"],"包含了父作用域中的":["95.16"],"不含":["95.16"],"native":["95.16"],"修饰器的":["95.16"],"是分发":["95.17"],"组件中可复用功能的非常灵活的方式":["95.17"],"会在浏览器控制台中发出警告":["95.18"],"实际开发过程中有两个场景会想要修改一个属性":["95.18"],"这个":["95.18"],"过滤器":["95.19"],"过渡等":["95.19"],"touch":["95.19"],"通过全局混入来添加一些组件选项":["95.19"],"router":["95.19"],"添加":["95.19","155.13"],"实例方法":["95.19"],"通过把它们添加到":["95.19"],"修饰符":["95.20"],"相同点":["95.20"],"都是语法糖":["95.20"],"都可以实现父子组件中的数据的双向通信":["95.20"],"区别点":["95.20"],"服务端渲染应用程序也需要处于":["95.21"],"node":["95.21"],"的运行环境":["95.21"],"服务器会有更大的负载需求":["95.21"],"中渲染完整的应用程序":["95.21"],"显然会比仅仅提供静态文件的":["95.21"],"server":["95.21"],"更加大量占用":["95.21"],"资源":["95.21"],"intensive":["95.21"],"密集":["95.21"],"因此如果你预料在高流量环境":["95.21"],"high":["95.21"],"traffic":["95.21"],"下使用":["95.21"],"请准备相应的服务器负载":["95.21"],"并明智地采用缓存策略":["95.21"],"其基本实现原理":["95.21"],"app":["95.21"],"只是被删除的元素变成了":["95.22"],"empty":["95.22"],"box":["95.23"],"获取子组件中的":["95.23"],"代码会异常清晰":["95.24"],"结合其他":["95.24"],"我们还可以用":["95.24"],"工具我会选":["95.25"],"axios":["95.25"],"其他比较常用的库有":["95.25"],"vueuse":["95.25"],"nprogress":["95.25"],"图标可以使用":["95.25"],"svg":["95.25"],"loader":["95.25"],"下面是代码规范":["95.25"],"更改数据":["96.0"],"在这里更改数据不会触发":["96.0"],"函数":["96.0"],"可以做一些初始化数据的获取":["96.0"],"当前阶段不能和":["96.0"],"进行交互":["96.0"],"但是可以通过":["96.0"],"vm":["96.0"],"nexttick":["96.0"],"来访问":["96.0"],"之后触发钩子函数":["96.0"],"所以可以访问到":["96.0"],"确保在销毁实例时不会触发不必要的回调或产生不稳定的行为":["96.1"],"清理订阅":["96.1"],"如果使用了观察者模式或者订阅发布模式":["96.1"],"子组件更新过程":["96.2"],"beforeupdate":["96.2"],"如果需要在组件实例被创建时立即获取数据并且不依赖于":["96.3"],"转化成":["97.0"],"ast":["97.0"],"抽象语法树":["97.0"],"任何非":["98.0"],"document":["98.1"],"createelement":["98.1"],"链":["98.2"],"类似":["98.3"],"区别是用户可以设置一个阈值":["98.3"],"大于阈值交给":["98.3"],"处理":["98.3"],"小于阈值返回文件的":["98.3"],"编码":["98.3"],"通过compiler获取webpack内部的钩子":["99.2"],"hooks":["99.2"],"done":["99.2"],"找到依赖关系":["100.0"],"babel":["100.1"],"babylon":["100.1"],"代码转化为":["100.1"],"ast抽象语法树":["100.1"],"webpack":["101.0","155.0"],"打包的":["101.0"],"chunk":["101.0"],"编译后浏览器替换修改的模块":["102.0"],"再去启动":["102.1"],"建立本地服务和浏览器的双向通信":["102.1"],"每次编译后":["102.1"],"设置请求头":["103.0"],"对于get请求不是必须的":["103.0"],"setrequestheader":["103.0"],"mybind":["104.0"],"args1":["104.0"],"首先需要进行判断":["104.0"],"如果调用者不是函数":["104.0"],"直接抛出异常":["104.0"],"fn":["105.0"],"of":["105.0"],"proto":["106.0"],"getprototypeof":["106.0"],"sleepwrapper":["107.0"],"return":["107.0","108.0","110.2","111.0","115.0","117.0","118.0","124.1","134.0","139.2","150.0"],"链式调用":["107.0"],"sleepfirst":["107.0"],"delete":["108.0"],"set":["108.0"],"创建一个新对象":["109.0"],"关联到构造函数的原型":["109.0"],"obj":["109.0","120.0"],"create":["109.0"],"error":["110.0"],"保证rejecttask事件注册成功":["110.0"],"关键代码":["110.0"],"执行fn函数":["110.0"],"then":["110.1"],"res":["110.1","134.0","135.0"],"catch":["110.1"],"err":["110.1"],"all静态方法":["110.1"],"返回promises列表中全部执行完的结果":["110.1"],"resolve":["110.2"],"reject":["110.2"],"clear":["111.0"],"返回清除定时器的方法":["111.0"],"cleartimeout":["111.0"],"temp":["114.0","145.0"],"treedata":["114.0"],"i":["114.0","127.0","132.0","139.2"],"使用数组的filter方法":["115.0"],"过滤掉要取消订阅的回调函数":["115.0"],"实现代码":["116.0"],"真正的渲染函数":["116.0"],"render":["116.0"],"vnode":["116.0"],"如果是数字类型转化为字符串":["116.0"],"if":["116.0","124.1","127.0","129.0","134.0","139.2","150.0"],"typeof":["116.0"],"number":["116.0"],"string":["116.0","134.0"],"else":["117.0","118.0"],"push":["117.0","118.0"],"注意差别在这行":["119.0"],"我们对内层循环的范围作了限制":["119.0"],"初始化":["119.1"],"为当前区间第一个元素":["119.1"],"j分别定义当前区间的上下界":["119.1"],"j":["119.2"],"判断":["119.2"],"前面一个元素是否比":["119.2"],"pivotindex":["119.3"],"partition":["119.3"],"对枢轴左侧和右侧的子数组分别进行快速排序":["119.3"],"合并左右两个有序数组":["119.4"],"mergearr":["119.4"],"返回合并后的结果":["119.4"],"arr1":["119.4"],"arr2":["119.4"],"初始化两个指针":["119.4"],"分别指向":["119.4"],"方法3":["120.0"],"使用对象":["120.0"],"newobj":["122.0"],"array":["122.0"],"isarray":["122.0"],"上一次执行":["124.0"],"的时间":["124.0"],"previous":["124.0"],"timer":["124.1"],"null":["124.1","151.0"],"args":["124.1"],"题目主要来源于代码随想录":["125.0"],"解题思路":["126.0","128.0","136.0","137.0","140.0","141.0","143.0","151.0"],"使用双指针的方法":["126.0"],"一个指针指向首元素":["126.0"],"一个指针指向尾元素":["126.0"],"翻转单词":["127.0"],"中的分隔符替换为空格":["128.0"],"请返回加密后的字符串":["128.0"],"遍历":["128.0"],"如果当前遍历元素为":["128.0"],"将其替换为空格":["128.0"],"len":["129.0","146.0"],"break":["129.0"],"哈希":["130.0"],"set1":["130.0"],"set2":["130.0"],"twosum":["131.0"],"map":["131.0","133.0"],"sort":["132.0"],"continue":["132.0"],"summap":["133.0"],"count":["133.0"],"dfs":["134.0"],"map1":["135.0"],"transmap":["135.0"],"map2":["135.0"],"equalmap":["135.0"],"则反转前":["136.0"],"其余字符保持原样":["136.0"],"reversestr":["136.0"],"双指针指向首位":["137.0"],"遍历交换":["137.0"],"reversestring":["137.0"],"getnext":["138.0"],"不断缩小查找区间":["139.0"],"更新中间元素为":["139.1"],"mid":["139.1"],"排序":["140.0"],"看到这个题目的第一个思路就是遍历数组":["140.0"],"将数组中每一个元素平方":["140.0"],"然后对数组使用":["140.0"],"额外空间并":["141.0"],"修改输入数组":["141.0"],"元素的顺序可以改变":["141.0"],"你不需要考虑数组中超出新长度后面的元素":["141.0"],"题目要求原地移除":["141.0"],"考虑使用双指针方法":["141.0"],"num":["142.0"],"while":["142.0","145.0"],"滑动窗口":["143.0"],"minlen":["143.0"],"infinity":["143.0"],"listnode":["145.0"],"获取链表的长度":["146.0"],"getlen":["146.0"],"计算要删除的节点再正向遍历中的位置":["146.0"],"targetn":["146.0"],"评测系统内部使用整数":["147.0"],"pos":["147.0"],"来表示链表尾连接到链表中的位置":["147.0"],"索引从":["147.0"],"开始":["147.0"],"如果":["147.0"],"当下一个节点的":["149.0"],"target":["149.0"],"让下一个节点的":["149.0"],"next":["149.0","150.0"],"指向":["149.0"],"getintersectionnode":["151.0"],"安装":["155.0"],"development":["155.1"],"模式":["155.1"],"默认两种":["155.1"],"production":["155.1"],"minicssextractplugin":["155.4"],"main":["155.4"],"plugin":["155.5"],"优化项":["155.6"],"minimizer":["155.6"],"文件转换成":["155.7","155.10"],"这种语法的":["155.8"],"插入到":["155.9"],"preset":["155.12"]},{"0":["8.10","8.13","8.21","35.0","46.1","67.15","119.2","124.0","126.0","131.0","135.0","137.0","148.0","149.0"],"1":["21.0","26.2","63.6","76.8","108.0","129.0","139.1","147.0"],"2":["11.0","63.6","66.4","68.0","73.6","91.4","91.10","97.0"],"3":["2.0","35.0","38.0","41.0","63.6","64.3","66.1","71.0","83.11","94.10","95.19","100.1"],"4":["33.0","36.0","42.0","63.6","94.12"],"5":["69.0","83.5","87.3"],"6":["95.15","95.25"],"7":["94.4","95.25"],"8":["59.0"],"9":["94.3"],"10":["67.16"],"32":["67.6"],"64":["67.11"],"302":["77.2"],"502":["77.4"],"引擎的":["1.0"],"高并发":["1.1"],"节约内存":["1.2"],"异步就是再执行某段代码的时候":["1.3"],"等会可能":["2.0"],"执行完成或者时间到达":["2.0"],"维护一个事件":["2.0"],"队列":["2.0"],"先进先出":["2.0"],"不停的扫描队列":["2.0"],"将队列中的任务拿出来放到上下文执行栈中执行":["2.0"],"事件循环线程就是做这件事情的":["2.0"],"检查当前执行栈是否为空":["2.0"],"如果为空":["2.0"],"从事件队列中取出一个来执行":["2.0"],"端":["7.0"],"用户是否将浏览器全屏也是个问题":["7.0"],"不同屏幕分辨率也不同":["7.0"],"的约束":["7.1"],"img":["7.1"],"来标记图像背景尺寸":["7.1"],"适用于图片尺寸自适应":["7.1"],"overflow":["7.1","8.26"],"x":["7.1","15.4"],"排版横向列表":["7.1"],"flexbox":["7.1"],"或":["7.1","8.10"],"inline":["7.1","19.1"],"block":["7.1","19.1"],"的形式横行排列元素":["7.1"],"且属性会继承":["8.2"],"会影响后代行内内容":["8.2"],"如果子元素宽度大于父元素宽度就会失效":["8.2"],"宽度要小于父元素":["8.3"],"否则无效":["8.3"],"css":["8.3","43.1","98.1","155.10"],"align对其生效":["8.4"],"优点":["8.4","8.6","75.0","95.7"],"兼容性好":["8.4"],"00ff00":["8.5"],"简单":["8.6"],"与height等值":["8.8"],"元素在页面呈现为5行":["8.9"],"则line":["8.9"],"height的值为height":["8.9"],"兼容性不好":["8.10"],"ie9":["8.10"],"当":["8.10"],"为":["8.10","67.16","76.3","124.1"],"时":["8.10","90.0","92.9"],"会无限延伸占满空间并且平分":["8.10"],"self":["8.11"],"font":["8.13","46.1"],"size":["8.13","46.1"],"text":["8.14","98.1"],"center":["8.14"],"如果是行内元素就添加这个":["8.14"],"定宽高时等同于margin":["8.15"],"负自身宽度一半":["8.15"],"height":["8.16","8.19","8.22","24.1","24.2"],"50px":["8.16"],"top":["8.16"],"align":["8.17","15.4","26.1"],"items":["8.17","26.1"],"width":["8.19","8.20","8.21","8.27"],"100px":["8.19","8.27","41.0"],"color":["8.20","8.21"],"f00":["8.20","8.21"],"background":["8.21","8.27"],"500px":["8.22"],"display":["8.22","19.1","43.1"],"10px":["8.23","8.24","8.27"],"只设置浮动":["8.23"],"不设宽度":["8.24"],"margin":["8.24","8.27","36.0"],"间距":["8.27"],"user":["11.0"],"scalable":["11.0"],"no":["11.0"],"fastclick":["11.0"],"js":["11.0","67.11","98.3","128.0","140.0","149.0","155.13"],"才能开始渲染":["12.0"],"因此":["12.0"],"加载是会阻塞":["12.0"],"的渲染的":["12.0"],"可能会操作之前的":["12.0"],"节点和":["12.0"],"样式":["12.0"],"因此浏览器会维持":["12.0"],"中":["12.0","21.0"],"带宽":["13.0"],"webkit":["14.0","20.2","40.0"],"blink":["14.0"],"segmentfault":["15.0"],"同源策略就是浏览器的一种重要的安全策略":["15.1"],"通过限制不同源之间的资源不能相互访问来保证浏览器的安全":["15.1"],"同源策略限制的内容":["15.1"],"cookie":["15.1"],"wd":["15.3"],"b":["15.3"],"show":["15.3"],"arrs":["15.3"],"for":["15.3","131.0","135.0","136.0","140.0","146.0"],"key":["15.3","122.0"],"in":["15.3","114.0","122.0"],"multipart":["15.4"],"form":["15.4"],"data":["15.4","56.1","95.10","95.18","121.0"],"application":["15.4","103.0"],"拿到服务器响应数据":["15.5"],"响应处理":["16.0"],"检查响应类型":["16.0"],"content":["16.0","43.1","77.1"],"type":["16.0","56.3","74.0","98.1","103.0"],"如果是字节流类型":["16.0"],"则将该请求提交给下载管理器":["16.0"],"该导航流程结束":["16.0"],"不再进行后续的渲染":["16.0"],"html":["16.0","73.4"],"则通知浏览器进程准备渲染进程准备进行渲染":["16.0"],"准备渲染进程":["16.0"],"浏览器进程检查当前":["16.0"],"是否和之前打开的渲染进程根域名是否相同":["16.0"],"如果相同":["16.0"],"则复用原来的进程":["16.0"],"是进程内的最小执行单位":["17.1"],"是进程的一部分":["17.1"],"一个进程可以包含多个线程":["17.1"],"转换为用户可以与之交互的网页":["17.2"],"gpu":["17.2"],"进程":["17.2"],"与其他区域相互隔离":["19.0"],"的边界会包裹浮动元素":["19.2"],"垂直外边距重叠":["19.2"],"在同一个":["19.2","73.3"],"input":["20.2"],"hidden":["21.0"],"是一样的":["21.0"],"chrome":["21.0"],"使用":["21.0","57.1","95.21"],"圆角边框":["22.0"],"边框图像":["22.0"],"减少选择器的复杂性":["23.0"],"避免使用":["23.0"],"weight":["24.0","24.1"],"大小由内容撑开":["24.0"],"当空间不足时":["25.0"],"缩小的比例相同":["25.0"],"空间不足时":["25.0"],"该项目不会缩小":["25.0"],"它的所有子元素自动成为容器成员":["26.0"],"两端对齐":["26.1"],"项目之间的间隔相等":["26.1"],"around":["26.1"],"两个项目两侧间隔相等":["26.1"],"定义在交叉轴上的对齐方式":["26.1"],"交叉轴起点对齐":["26.1"],"都为":["26.2"],"等分剩余空间":["26.2"],"shrink":["26.2"],"css2":["27.0"],"才有的语法":["27.0"],"故只可在":["27.0"],"ie5":["27.0"],"它们发生重叠一个是因为它们相":["28.0"],"邻":["28.0"],"一个是因为父元素的高度不固定":["28.0"],"因此我们可以为父元素设置":["28.0"],"直到相对于":["29.0"],"大小来计算":["30.0"],"vh":["30.0"],"viewport":["30.0"],"来绘制图形":["31.0"],"需要重新绘制才能进行修改":["31.0"],"需要在特定状态触发后才能执行":["32.0"],"animation":["32.0"],"绝对定位":["33.0"],"父元素设置为相对定位":["33.0"],"左边元素设置为绝对定位":["33.0"],"右边元素的":["33.0"],"设置为":["33.0"],"来描述这个元素的状态":["34.0"],"双冒号":["34.0"],"读屏器会读取":["35.0"],"opacity":["35.0"],"auto":["36.0","41.0"],"资源预加载":["37.0"],"这样即使外部样式表加载延迟":["38.0"],"页面仍然可以有基本的样式展示":["38.0"],"避免出现完全无样式的情况":["38.0"],"使用样式预加载":["38.0"],"如果需要手写编写动画":["39.0"],"可以将最小时间间隔设置为":["39.0"],"box":["40.0","45.0"],"line":["40.0"],"clamp":["40.0"],"负值":["41.0"],"必须定宽高":["41.0"],"如果元素为绝对定位":["42.0"],"position":["42.0"],"所以父元素在计算高度的时候并没有将浮动元素的高度计算出来":["43.0"],"伪元素":["43.1"],"outer":["43.1"],"after":["43.1","107.0"],"border":["44.0"],"可以通过":["45.0","63.3"],"sizing":["45.0"],"属性来改变元素的盒模型":["45.0"],"而文本节点默认会应用一定的样式":["46.0"],"导致":["46.0"],"父元素设置":["46.1"],"伪元素选择器":["47.0"],"后代选择器":["47.0"],"属性选择器":["47.1"],"伪类选择器":["47.1"],"标签选择器":["47.1"],"前者回调函数中的":["48.0"],"this":["48.0","66.5"],"指向当前元素":["48.0"],"这意味着如果脚本的加载速度很快":["49.0"],"可能会在页面的其他资源加载之前执行":["49.0"],"导致可能的依赖问题":["49.0"],"脚本的执行时机是在文档解析完毕后":["49.0"],"domcontentloaded":["49.0"],"id":["50.0","91.2","91.9"],"来实现":["50.0"],"video":["51.0"],"canvas":["51.0"],"画布":["51.0"],"拖拽元素":["51.0"],"代码复用":["52.0"],"可以将共享的内容嵌套在多个页面中":["52.0"],"mobile":["53.0"],"number":["53.0","67.8"],"以备将来可能需要用到":["54.0"],"适用于当前页面未使用但可能在后续页面或用户操作中可能会用到的资源":["54.0"],"preload":["54.0"],"预加载":["54.0"],"href":["55.0"],"指向网络资源所在位置":["55.0"],"建立和当前元素或当前文档之间的链接":["55.0"],"a":["55.0"],"link":["55.0"],"area":["55.0"],"处理接收到的消息":["56.1"],"发送消息":["56.1"],"send":["56.1"],"var":["56.2","128.0"],"val":["56.2"],"name":["56.3","83.5","91.5"],"就会有明显的语调上的变化":["57.1"],"标签则没有":["57.1"],"如果是搜索引擎的爬虫对我们的网页进行分析的话":["57.1"],"它会依赖":["57.1"],"侧边栏":["57.2"],"footer":["57.2"],"页脚":["57.2"],"figure":["57.2"],"对象":["59.0","83.5","93.2"],"用于更好地处理异步操作":["59.0"],"解决了回调地狱的问题":["59.0"],"并提供了更清晰的异步编程模式":["59.0"],"类和模块化":["59.0"],"es6":["59.0"],"引入了类的概念":["59.0"],"可以使用":["59.0","73.2","95.25","96.3"],"class":["59.0"],"关键字定义类":["59.0"],"await":["60.0"],"事件轮询执行时机":["60.0"],"隐式返回":["60.0"],"promise":["60.0","94.12","112.0"],"会产生一个微任务":["60.0"],"后面的代码是在微任务时执行":["60.0"],"event":["60.0"],"loop":["60.0"],"和浏览器更新渲染时机1":["60.0"],"浏览器更新渲染会在":["60.0"],"中的":["60.0","93.4"],"和":["60.0","61.0","72.1","76.5","92.9","93.5","94.9","119.4"],"使用let":["61.0"],"声明的变量不会被绑定到window上":["61.0"],"这里需要注意的时候":["61.0"],"true":["62.0","83.2","90.1","138.0"],"来阻止冒泡":["62.0"],"默认事件的话通过事件对象的":["62.0"],"之前的":["62.1"],"ie":["62.1"],"不支持":["62.1"],"方法":["62.1","63.6"],"而是设置事件对象":["62.1"],"cancelbubble":["62.1"],"属性为":["62.1"],"在块级作用域中":["63.3"],"也不能跨函数访问":["63.4"],"没有变量提升":["63.4"],"不能重复声明":["63.4"],"如果还没有找到":["63.5"],"一直找到全局上下文的变量对象":["63.5"],"后":["63.6"],"打印":["63.6"],"使用立即执行函数创建了闭包":["63.6"],"将当前的":["63.6"],"值传递给回调函数":["63.6"],"就会去原型的proto属性所指向的原型对象上去查找":["64.1"],"直到找到":["64.1"],"属性":["64.3"],"奔溃等问题":["65.0"],"有自动的垃圾回收机制":["65.1"],"当一个值":["65.1"],"如果发现有对象没有被标识为可到达对象":["65.2"],"那么就将此对象占用的内存回收":["65.2"],"weakset":["65.4"],"执行上下文就是指当前环境中的变量":["66.0"],"函数声明":["66.0"],"eval":["66.1"],"执行上下文":["66.1"],"全局上下文只有一个":["66.2"],"也就是":["66.2"],"每当":["66.3"],"引擎调用一个函数的时候":["66.3"],"会为该函数创建一个新的执行上下文并压入栈的顶部":["66.3"],"指向":["66.4"],"代码中":["66.5"],"动态语言":["67.0"],"object":["67.1"],"普通对象":["67.1"],"函数":["67.1","94.5"],"文件在不同模块":["67.2"],"值作为对象的属性名":["67.3"],"通过":["67.3","92.10","94.9"],"只需要在数字末尾追加":["67.4"],"来解除引用":["67.5"],"字面意思就是":["67.5"],"的最初版本中使用的是":["67.6"],"位系统":["67.6"],"引用数据类型用堆存储":["67.7"],"堆内存是动态分配":["67.7"],"都是":["67.8"],"nan":["67.8","67.12"],"instanceof":["67.8","104.0"],"value":["67.9","67.15","135.0"],"将要判断的变量作为参数传入":["67.9"],"并判断返回的字符串是否为":["67.9"],"if":["67.10","103.0","104.0","133.0"],"hasownproperty":["67.10","120.0","122.0"],"在转换为二进制表示的时候会出现位数无限循环的情况":["67.11"],"中是以":["67.11"],"位双精度格式来存储数字的":["67.11"],"只有":["67.11"],"的判断":["67.12"],"一般情况下和":["67.13"],"相同":["67.13"],"首先转换成布尔值":["67.14"],"false":["67.14"],"valueof":["67.15"],"且第一个参数不以":["67.16"],"0x":["67.16"],"开头时":["67.16"],"按照":["67.16"],"为基数返回":["67.16"],"本质上是健值对的集合":["67.17"],"activexobject":["68.0"],"microsoft":["68.0"],"xmlhttp":["68.0"],"兼容ie6及以下版本":["68.0"],"配置":["68.0"],"ajax请求地址":["68.0"],"open":["68.0"],"get":["68.0","92.9"],"但在某些方面功能较为简单":["68.1"],"需要进行封装来处理错误":["68.1"],"超时等情况":["68.1"],"是一个第三方库":["68.1"],"服务器上读取数据":["69.0"],"减少远程访问":["69.0"],"的带宽":["69.0"],"分担网络流量":["69.0"],"减轻原站点web":["69.0"],"负载等功能":["69.0"],"集群抗攻击":["69.0"],"广泛分布的":["69.0"],"服务器发起解析请求":["70.0"],"服务器接收请求并返回":["70.0"],"没有限制":["71.0"],"请求是安全且幂等的":["71.0"],"无论操作多少次":["71.0"],"的报文传输":["72.0"],"三次握手之后还需要进行":["72.0"],"tcp":["72.1"],"之间加入了":["72.1"],"加密这个随机数":["72.3"],"发给服务端":["72.3"],"第四步":["72.3"],"服务端使用自己的私钥":["72.3"],"可以发布给任何人":["72.4"],"并且加密的内容只有相匹配的密钥才能解":["72.4","87.2"],"这样带来的一个好处就是能保证传输的内容是安全的":["72.4","87.2"],"因为例如如果是公钥加密的数据":["72.4","87.2"],"就算是第三方截取了这个数据但是没有对应的私钥也破解不了":["72.4"],"不过它也有缺点":["72.4"],"一是公钥因为是公开的":["72.4"],"谁都可以过去":["72.4"],"如果内容是通过私钥加密的话":["72.4"],"那拥有对应公钥的黑客就可以用这个公钥来进行解密得到里面的信息":["72.4"],"payload":["72.5"],"如账号密码":["72.5"],"生成一个字符串":["72.5"],"简单文本的形式":["73.1"],"易于理解":["73.1"],"学习和使用的门槛低":["73.1"],"当要完成有关联性的操作时会麻烦":["73.2"],"减轻了服务器端的负载":["73.3"],"持久连接就是只要任意一端没有明确提出断开连接":["73.3"],"就会报错":["73.3"],"连接状态":["73.3"],"管道":["73.3"],"握手和慢启动过程耗费的时间":["73.4"],"常见的合并请求比如精灵图就是将请求多个小图片合并成请求成一张大的图片":["73.4"],"请求的次数":["73.4"],"减少网络开销":["73.4"],"延迟发送请求":["73.4"],"一个":["73.4"],"文件中会包含很多的":["73.4"],"如果是当前页面不需要的资源":["73.4"],"没必要一次性全部获取":["73.4"],"可以通过按需获取的方式":["73.4"],"减少第一时间的":["73.4"],"比如请求网页的时候":["73.4"],"就没有必要把全部的资源获取到":["73.4"],"是没办法做其它事情的":["73.6"],"如果响应迟迟不来":["73.6"],"后续的请求是无法发送的":["73.6"],"这就造成了队头阻塞的问题":["73.6"],"通过使用多个":["73.6"],"stream":["73.6"],"复用一条":["73.6"],"连接":["73.6"],"达到并发的效果":["73.6"],"连接包含一个或者多个":["73.6"],"是":["73.6","91.1","147.0"],"并发的关键技术":["73.6"],"里可以包含":["73.6"],"个或多个":["73.6"],"message":["73.6","95.5"],"对应":["73.6"],"表示本次回应的数据长度":["74.0"],"信息识别":["75.0"],"让应用系统能够识别已经登录过的用户":["75.0"],"其实要把":["75.0"],"发送到认证系统进行校验":["75.0"],"单点登录":["75.0"],"用户只需登录一次":["75.0"],"消息队列等方式":["76.0"],"而不同的设备之间想要进行通信":["76.0"],"一对一":["76.1"],"调整发送速度":["76.2"],"等特点":["76.2"],"基于这些特点能够保证数据包能够可靠的传输给对方":["76.2"],"所有是安全的":["76.2"],"可靠的":["76.2"],"只负责传输数据":["76.2"],"不保证数据能否抵达":["76.2"],"传输效率比较高":["76.2"],"实时性也比较好":["76.2"],"当应用传输的数据非常大的时候":["76.2"],"用来解决丢包问题":["76.3"],"控制位":["76.3"],"ack":["76.3","76.5"],"不保证网络包中数据的完整性":["76.4"],"如果需要保证网络数据包的可靠性":["76.4"],"置为":["76.5"],"最后把这个报文发给客户端":["76.5"],"服务端处于":["76.5"],"rcvd":["76.5"],"客户端收到":["76.6"],"一样发送一个":["76.6"],"报文作为应答":["76.6"],"且把服务端的序列号值":["76.6"],"作为自己":["76.6"],"ticket":["76.7"],"另一种方式是":["76.7"],"此会出现丢包":["76.8"],"对实时的应用比如":["76.8"],"ip":["76.8"],"电话和视频会议等":["76.8"],"只能是":["76.8"],"对":["76.8","92.3","100.1"],"但是响应头没有body数据":["77.1"],"found":["77.2"],"表示临时重定向":["77.2"],"表示服务器禁止访问资源":["77.3"],"不是客户端的请求出错":["77.3"],"通常是服务器作为网关或代理时返回的错误码":["77.4"],"复杂请求":["78.0"],"不符合以上条件的就是复杂请求":["78.0"],"复杂请求的":["78.0"],"cors":["78.0"],"则到达一定的时间限制才返回":["79.0"],"客户端":["79.0","95.21"],"javascript":["79.0","80.3"],"响应处理函数会在处理完服务器返回的信息后":["79.0"],"再次发出请求":["79.0"],"重新建立连接":["79.0"],"长轮询和短轮询比起来":["79.0"],"cache":["80.0"],"service":["80.0","80.3"],"worker":["80.0","80.3"],"不再是一个时间戳":["80.1"],"而是一个时间长度":["80.1"],"意味着该资源在当前时间长度内都是有效的":["80.1"],"这就完美规避了时间戳带来的潜在问题":["80.1"],"相对于":["80.1"],"更加准确":["80.1"],"优先级也更高":["80.1"],"两者同时出现":["80.1"],"以":["80.1","94.9"],"为准":["80.1"],"s":["80.1"],"服务端并不知道我们是否真正改变了文件":["80.2"],"它仍然通过最后编辑时间进行判断":["80.2"],"因此这个资源在再次被请求时":["80.2"],"会被当作新资源":["80.2"],"进而引发一次完整的响应":["80.2"],"不该重新请求的时候":["80.2"],"也会重新请求":["80.2"],"当我们修改文件的速度过快时":["80.2"],"由于":["80.2"],"只能检查到以秒为最小计量单位的时间差":["80.2"],"所以是感知不到这个改动的":["80.2"],"该请求的时候没有请求":["80.2"],"也可以放进去":["80.3"],"但是较大的":["80.3"],"就不可以了":["80.3"],"因为内存资源是有限的":["80.3"],"独立于主线程之外的":["80.3"],"线程":["80.3"],"脱离于浏览器窗体":["80.3"],"的时候":["80.5","141.0","155.4"],"就可以获取到客户端的状态":["80.5"],"有体积上限":["80.5"],"存储只适用于当前会话的信息":["80.7"],"相同点":["80.7"],"localstorage":["80.8"],"一份到":["80.9"],"服务器上的过程":["80.9"],"回源":["80.9"],"这个就是懒加载":["81.0"],"懒加载的实现有两个关键的数值":["81.0"],"一个是当前可视区域的高度":["81.0"],"const":["81.0","116.0","117.0","118.0","121.0","136.0"],"在一段时间内":["81.1"],"seo":["82.0"],"客户端渲染":["82.0"],"在搜索引擎搜索某个关键字":["82.0"],"是找不到的":["82.0"],"因为搜索引擎只会搜现成的内容":["82.0"],"所以这种情况下":["82.0"],"会使用服务端渲染":["82.0"],"渲染引擎开始解析":["82.1"],"转换树中的标签到":["82.1"],"节点":["82.1"],"被称为内容树":["82.1"],"cssom":["82.1"],"标签":["82.2"],"会暂停渲染过程":["82.2"],"将控制器交给":["82.2"],"引擎":["82.2"],"引擎对内联的":["82.2"],"代码会直接执行":["82.2"],"对外部":["82.2"],"文件要先获取到脚本":["82.2"],"再进行执行":["82.2"],"浏览器不需要重新计算元素的几何属性":["82.3"],"直接为该元素绘制新的样式":["82.3"],"这个过程叫重绘":["82.3"],"所以":["82.3"],"重绘不一定导致回流":["82.3"],"连接这两个步骤":["83.0"],"前端可以做的非常有限":["83.0"],"核心是在":["83.0"],"只需要为":["83.2"],"添加":["83.2"],"cachedirectory":["83.2"],"manifest":["83.3"],"json":["83.3","103.0"],"context需要和webpack":["83.3"],"js保持一致":["83.3"],"context":["83.3"],"编译完成之后":["83.3"],"运行这个文件":["83.3"],"dist文件夹多出两个文件":["83.3"],"会充分释放":["83.4"],"在多核并发方面的优势":["83.4"],"output":["83.5"],"chunkfilename":["83.5"],"chunkhash":["83.5"],"chunk":["83.5"],"写路由的时候":["83.5"],"压缩是服务器的工作":["83.6"],"服务器接收到需要压缩的文件":["83.6"],"会启动自己的":["83.6"],"cpu":["83.6"],"去完成这个任务":["83.6"],"压缩本身也是需要耗费时间的":["83.6"],"它可以表示的颜色种类就越多":["83.7"],"成像效果就越细腻":["83.7"],"文件体积相应就越大":["83.7"],"一个二进制位表示两种颜色":["83.7"],"在我们日常的开发中":["83.8"],"图片经常作为大的背景图":["83.8"],"轮播图或":["83.8"],"banner":["83.8"],"对线条的处理更加细腻":["83.9"],"对透明度有良好的支持":["83.9"],"当追求最佳的显示效果":["83.9"],"不在意文件体积大小的时候":["83.9"],"推荐使用":["83.9"],"是文本文件":["83.10"],"我们既可以像写代码一样定义":["83.10"],"也可以把他写在":["83.10"],"如果把大图也编码到":["83.11"],"文件中":["83.11"],"后者的体积会明显增加":["83.11"],"即便减少了":["83.11"],"如果浏览器环境支持":["83.12"],"优先使用":["83.12"],"格式":["83.12"],"否则把图片降级为":["83.12"],"验证请求来源":["84.0"],"可以使用参数化的":["85.0"],"或者直接使用存储过程进行数据查询存取":["85.0"],"中的用户私密信息":["86.0"],"或者攻击者在论坛中加一个恶意表单":["86.0"],"当用户提交表单的时候":["86.0"],"却把信息传送到攻击者的服务器中":["86.0"],"有公钥和私钥之分":["87.1"],"公钥所有人都知道":["87.1"],"客户端把解密后的":["87.3"],"传递给服务端":["87.3"],"使用随机码":["87.3"],"并通过和服务器建立的对称加密的密钥进行解密":["87.4"],"中间人再通过和客户端建立的对称加密对响应数据进行加密后传输给客户端":["87.4"],"客户端通过与中间人建立的对称加密的密钥对数据进行解密":["87.4"],"简单来说":["87.4"],"生成唯一且安全的文件名":["88.0"],"防止刷票和灌水":["89.0"],"可以打开":["90.1"],"deep":["90.1","92.2"],"选项":["90.1"],"这样便会对对象中的每一项进行监听":["90.1"],"每个属性提供的函数作为属性的":["90.2"],"从而确保对象的每一个属性更新时都会触发传入的回调函数":["90.3"],"主要原因在于对象属于引用类型":["90.3"],"单个属性的更新并不会触发对象":["90.3"],"params":["91.0"],"等":["91.1"],"vue":["91.1","98.3"],"属性加上":["91.2"],"babel":["91.3"],"的问题":["91.3"],"都会在浏览器的访问历史中增加一个记录利用":["91.4"],"的以上特点":["91.4"],"就可以来实现前端路由":["91.4"],"更新视图但不重新请求页面":["91.4"],"的功能了":["91.4"],"特点":["91.4"],"兼容性好但是不美观":["91.4"],"采用":["91.4"],"html5":["91.4"],"的新特性":["91.4"],"且提供了两个新方法":["91.4"],"pushstate":["91.4"],"replacestate":["91.4"],"是要显示组件的占位组件":["91.5"],"可以嵌套":["91.5"],"对应路由配置的嵌套关系":["91.5"],"配合":["91.5"],"back":["91.6"],"后退":["91.6"],"forward":["91.6"],"new":["91.7","110.0","131.0","135.0","149.0","155.6"],"例如":["91.8","91.9"],"beforeenter":["91.8"],"守卫只在进入路由时触发":["91.8"],"因此只会影响这个路由":["91.8"],"控制更精确":["91.8"],"path":["91.9"],"users":["91.9"],"匹配对应路由":["91.10"],"将":["91.10","94.1","124.0","155.12"],"router":["91.10"],"定义成一个":["91.10"],"还需要深度遍历":["92.0"],"优势":["92.0"],"针对对象":["92.0"],"proxy":["92.1","92.7"],"可以通过配置选项来控制监听行为":["92.2"],"比如":["92.2"],"immediate":["92.2"],"tree":["92.3"],"shaking":["92.3"],"友好":["92.3"],"代码也更容易压缩":["92.3"],"体积更小":["92.4"],"更好的":["92.4"],"beforeunmount":["92.5"],"destroyed":["92.5"],"在":["92.6"],"闭包中缓存了变量":["92.6"],"无需顾虑调用顺序":["92.6"],"编译器优化":["92.7"],"静态提升":["92.7","92.8"],"patchflags":["92.7"],"静态标记":["92.7"],"事件监听缓存":["92.7"],"基于":["92.7"],"的响应式系统":["92.7"],"ssr":["92.7"],"只对比有标记的":["92.8"],"dom":["92.8","94.9"],"元素":["92.8","96.3"],"事件增加缓存":["92.8"],"set":["92.9"],"实现响应式":["92.9"],"用于模板":["92.9"],"reactive":["92.9"],"不需要":["92.9"],"getcurrentinstance":["92.10"],"获取当前实例":["92.10"],"否则会报错":["93.0"],"的方式":["93.1"],"调用":["93.1"],"两个":["93.1"],"时几乎完全一样":["93.1"],"但是定义两者时却不甚相同":["93.1"],"回调函数接收":["93.2"],"mutation":["93.2","93.4"],"对象和":["93.2"],"这样可以进一步判断":["93.2"],"编写的代码就不够优雅":["93.3"],"每个提交的地方都要单独做保存处理":["93.3"],"这里就可以利用":["93.3"],"提供的":["93.3"],"中只有":["93.4"],"state":["93.4","95.6"],"getter":["93.4"],"action":["93.4"],"抛弃了":["93.4"],"一直都不太受小伙伴们的待见":["93.4"],"对外暴露状态":["93.5"],"提供":["93.5"],"修改属性":["93.5"],"这里需要设置":["93.5"],"来劫持各个属性的":["94.0"],"setter":["94.0"],"还负责合并":["94.1"],"option":["94.1"],"然后":["94.1"],"会经过":["94.1"],"generate":["94.1"],"并不知道后续还有":["94.3"],"次更新操作":["94.3"],"所以会马上执行流程":["94.3"],"最终执行":["94.3"],"次流程":["94.3"],"而通过":["94.3"],"vnode":["94.3"],"个变异的方法":["94.4"],"能改变原数组的方法":["94.4"],"render":["94.5","94.7"],"此时会触发属性依赖收集":["94.5"],"为什么不推荐使用":["94.6"],"index":["94.6","110.1","155.1"],"作为":["94.6"],"因为使用":["94.6"],"和不带":["94.6"],"的效果是一样的":["94.6"],"或者":["94.7"],"的优先级更高":["94.7"],"如果用户写的是":["94.7"],"会做模板编译":["94.7"],"算法支持":["94.8"],"但是这样粒度过细导致":["94.8"],"无法承载较大应用":["94.8"],"中为了降低":["94.8"],"watcher":["94.8","94.11"],"粒度":["94.8"],"每个组件只有一个":["94.8"],"与之对应":["94.8"],"此时就需要引入":["94.8"],"mvvm":["94.9","95.0"],"框架中要解决的一个核心问题是连接数据层和视图层":["94.9"],"数据驱动":["94.9"],"应用":["94.9"],"数据变化":["94.9"],"视图更新":["94.9"],"要做到这点的就需要对数据做响应式处理":["94.9"],"这样一旦数据发生变化就可以立即做出更新处理":["94.9"],"为例说明":["94.9"],"通过数据响应式加上虚拟":["94.9"],"patch":["94.9"],"算法":["94.9"],"开发人员只需要操作数据":["94.9"],"关心业务":["94.9"],"初始化组件状态":["94.10"],"创建各种响应式数据":["94.10"],"建立更新机制这一步会立即执行一次组件更新函数":["94.10"],"去通知":["94.11"],"进行更新操作":["94.11"],"依次调用":["94.11"],"更新后的状态":["94.12"],"比如希望获取列表更新后的高度":["94.12"],"签名如下":["94.12"],"function":["94.12","121.0","124.0","126.0","128.0","137.0"],"callback":["94.12"],"void":["94.12"],"我们知道":["94.13"],"进行了优化":["94.14"],"转换成了":["94.14"],"模式启发":["95.0"],"简化了映射关系":["95.0"],"一个组件被复用多次的话":["95.1"],"也会创建多个实例":["95.1"],"本质上":["95.1"],"这些实例用的都是同一个构造函数":["95.1"],"触发组件的":["95.2"],"beforecreate":["95.2"],"create":["95.2"],"beforemount":["95.2"],"mounted":["95.2"],"钩子":["95.2"],"的时候触发组件的":["95.2"],"beforedestory":["95.2"],"destory":["95.2"],"vue3":["95.3"],"中完全相反":["95.3"],"值":["95.4","102.1"],"再通过":["95.4"],"的字样":["95.5"],"可以在":["95.5"],"的":["95.6"],"和用户的交互":["95.7"],"用户体验好":["95.7"],"内容的改变不需要重新加载整个页面":["95.7"],"避免了不必要的跳转和重复渲染":["95.7"],"解决办法":["95.8"],"减小入口文件体积":["95.8"],"静态资源本地缓存":["95.8"],"其中":["95.9"],"的优先级比":["95.9"],"高":["95.9"],"对应两个钩子函数":["95.9"],"这样会导致大量的":["95.11"],"mergeoptions":["95.12"],"方法进行合并":["95.12"],"采用策略模式针对不同的属性进行合并":["95.12"],"当组件和混入对象含有同名选项时":["95.12"],"层上":["95.13"],"会自动将数据渲染到页面中":["95.13"],"视图变化会通知":["95.13"],"层更新数据":["95.13"],"代表数据模型":["95.13"],"也可以在":["95.13"],"中定义数据修改和操作的业务逻辑":["95.13"],"是因为引入了":["95.14"],"fragment":["95.14"],"的概念":["95.14"],"这是一个抽象的节点":["95.14"],"如果发现组件是多根的":["95.14"],"函数式组件的":["95.15"],"props":["95.15"],"可以不用显示声明":["95.15"],"所以没有在":["95.15"],"里面声明的属性都会被自动隐式解析为":["95.15"],"prop":["95.15"],"而普通组件所有未声明的属性都解析到":["95.15"],"事件监听器":["95.16"],"它可以通过":["95.16"],"provide":["95.16"],"inject":["95.16"],"祖先组件中通过":["95.16"],"provider":["95.16"],"来提供变量":["95.16"],"然后在子孙组件中通过":["95.16"],"来注入变量":["95.16"],"api":["95.16","95.19"],"主要解决了跨级组件间的通信问题":["95.16"],"不过它的使用场景":["95.16"],"主要是子组件获取上级组件的状态":["95.16"],"混入对象可以包含任意组件选项":["95.17"],"当组件使用混入对象时":["95.17"],"所有混入对象的选项将被混入该组件本身的选项":["95.17"],"用来传递一个初始值":["95.18"],"这个子组件接下来希望将其作为一个本地的":["95.18"],"数据来使用":["95.18"],"在这种情况下":["95.18"],"最好定义一个本地的":["95.18"],"上实现":["95.19"],"一个库":["95.19"],"提供自己的":["95.19"],"同时提供上面提到的一个或多个功能":["95.19"],"两者的区别":["95.19"],"两者的区别主要表现在以下几个方面":["95.19"],"编写形式":["95.19"],"编写一个组件":["95.19"],"可以有很多方式":["95.19"],"我们最常见的就是":["95.19"],"格式不同":["95.20"],"num":["95.20"],"作为客户端与服务端的公用入口":["95.21"],"导出":["95.21"],"根实例":["95.21"],"供客户端":["95.21"],"entry":["95.21","101.0","155.1"],"与服务端":["95.21"],"主要作用挂载到":["95.21"],"上":["95.21"],"服务端":["95.21"],"除了创建和返回实例":["95.21"],"还进行路由匹配与数据预获取":["95.21"],"webpack":["95.21"],"为客服端打包一个":["95.21"],"client":["95.21"],"bundle":["95.21"],"为服务端打包一个":["95.21"],"服务器接收请求时":["95.21"],"会根据":["95.21"],"undefined":["95.22","148.0"],"其他的元素的键值还是不变":["95.22"],"pug":["95.24"],"编写":["95.24"],"用":["95.24"],"sass":["95.24"],"ts":["95.24"],"结合":["95.25"],"prettier":["95.25"],"eslint":["95.25"],"即可":["95.25"],"最后是提交规范":["95.25"],"husky":["95.25"],"lint":["95.25"],"staged":["95.25"],"commitlint":["95.25"],"目录结构我有如下习惯":["95.25"],"等属性":["96.0"],"实例挂载之前发生":["96.0"],"在这之前":["96.0"],"template":["96.0"],"模板已经导入渲染函数编译":["96.0"],"当前阶段虚拟":["96.0"],"已经创建完成":["96.0"],"即将开始渲染":["96.0"],"在此时也可以对数据进行更改":["96.0"],"不会触发":["96.0"],"挂载完成之后发生":["96.0"],"可以在这里取消订阅":["96.1"],"确保不再接收到不需要的事件获取数据更新":["96.1"],"销毁第三方库实例":["96.1"],"updated":["96.2"],"traverse":["97.0","100.1"],"是一个对":["97.0"],"文件都必须被对应的":["98.0"],"setattribute":["98.1"],"执行顺序为从右到左":["98.2"],"单文件组件":["98.3"],"raw":["98.3"],"加载文件原始内容":["98.3"],"在运行过程中会广播事件":["99.1"],"tap":["99.2"],"my":["99.2"],"plugin":["99.2"],"compilation":["99.2"],"递归遍历引入的其它js":["100.0"],"生成最终的依赖关系图":["100.0"],"然后通过":["100.1"],"ast":["100.1"],"进行遍历":["100.1"],"遍历的目的找到文件的":["100.1"],"import引用节点":["100.1"],"有关":["101.0"],"不同的":["101.0"],"局部刷新":["102.0"],"无需刷新整个页面":["102.0"],"会生成一个":["102.1"],"hash":["102.1"],"代表每一次编译的标识":["102.1"],"本次输出的":["102.1"],"onreadystatechange":["103.0"],"let":["104.0","119.4","121.0","126.0","128.0","136.0","137.0","140.0","149.0","150.0","151.0"],"f":["104.0"],"symbol":["104.0"],"result":["104.0","109.0","110.1"],"result如果作为构造函数被调用":["104.0"],"typeof":["105.0"],"while":["106.0","119.2","127.0","129.0","143.0"],"first":["107.0"],"wake":["107.0"],"up":["107.0"],"如果缓存中不存在该键":["108.0"],"返回":["108.0"],"put":["108.0"],"prototype":["109.0","122.0"],"调用构造函数":["109.0"],"将新对象作为上下文":["109.0"],"try":["110.0"],"catch":["110.0"],"then":["110.0","110.2"],"resolvecallback":["110.0"],"rejectcallback":["110.0"],"解决链式调用的情况":["110.0"],"继续返回promise":["110.0"],"func":["110.2"],"res":["110.2","119.4","121.0"],"mysettimeout":["111.0"],"resolve":["112.0"],"length":["114.0","136.0","143.0"],"filter":["115.0"],"item":["115.0"],"只保留不需要取消的回调函数的项":["115.0"],"只执行一次订阅事件":["115.0"],"once":["115.0"],"字符串类型直接就是文本节点":["116.0"],"return":["116.0","124.0","127.0","130.0"],"document":["116.0"],"createtextnode":["116.0"],"普通dom":["116.0"],"迭代":["117.0","118.0"],"使用栈":["117.0","118.0"],"stack":["117.0","118.0"],"时间复杂度为n的情况":["119.0"],"i是左边界":["119.1"],"j是右边界":["119.1"],"j":["119.1","119.4","132.0","138.0","141.0"],"若":["119.1"],"大":["119.2"],"返回排序后的数组":["119.3"],"定义名为partition的分区函数":["119.3"],"将最右边的元素作为枢轴元素":["119.3"],"pivot":["119.3"],"i":["119.4","131.0","135.0","136.0","140.0","141.0","146.0"],"初始化结果数组":["119.4"],"缓存arr1的长度":["119.4"],"len1":["119.4"],"通过这个字段来确定子父级":["121.0"],"实现代码如下":["121.0"],"treetolist":["121.0"],"reduce":["123.0"],"处理结果当作函数返回":["124.0"],"args":["124.0"],"获取当前时间":["124.0"],"cleartimeout":["124.1"],"time":["124.1"],"新增部分":["124.1"],"start":["124.1"],"侵删":["125.0"],"reversestring":["126.0"],"left":["126.0","137.0","139.2"],"right":["126.0","137.0","143.0"],"join":["127.0"],"删除多余空格":["127.0"],"slowindex":["127.0"],"fastindex":["127.0"],"pathencryption":["128.0"],"arr":["128.0"],"continue":["129.0"],"l":["129.0"],"r":["129.0"],"break":["132.0"],"num1":["133.0"],"of":["133.0"],"num2":["133.0"],"sum":["133.0"],"终止条件1":["134.0"],"变为":["134.0"],"是快乐数":["134.0"],"终止条件2":["134.0"],"出现循环":["134.0"],"不是快乐数":["134.0"],"len":["136.0"],"resarr":["136.0"],"split":["136.0"],"根据中间元素和目标元素":["139.0"],"继续查找左半部分":["139.1"],"如果中间元素小于目标元素":["139.1"],"二分法":["139.2"],"因为题目给出是有序的":["139.2"],"没有重复的数组":["139.2"],"所以可以考虑使用二分法":["139.2"],"sort":["140.0"],"指针":["141.0"],"用来遍历原数组":["141.0"],"用于当遍历值":["141.0"],"target":["141.0"],"存储新的值":["141.0"],"nums":["143.0"],"next":["145.0"],"cur":["145.0","146.0","150.0"],"cur指向dummy节点":["146.0"],"用于遍历链表":["146.0"],"遍历到要删除的节点的前一个节点":["146.0"],"则在该链表中没有环":["147.0"],"注意":["147.0"],"不作为参数进行传递":["147.0"],"dummy":["149.0"],"listnode":["149.0"],"虚拟头节点":["149.0"],"temp":["150.0"],"null":["150.0"],"pre":["150.0"],"交点不是数值相等":["151.0"],"而是指针相等":["151.0"],"pa":["151.0"],"pb":["151.0"],"add":["155.0"],"src":["155.1"],"title":["155.3"],"html页面的标题":["155.3"],"在配置":["155.4"],"loader":["155.4"],"优化压缩":["155.5"],"uglifyjsplugin":["155.6"],"可以理解的模块":["155.7"],"head":["155.9"],"env":["155.12"]},{"0":["8.14","8.16","42.0","61.0","83.7","128.0","134.0","136.0","140.0","141.0"],"1":["56.1","76.3","83.7","91.6","133.0","135.0","136.0"],"2":["21.0","40.0","136.0"],"3":["66.3","68.0","91.5","93.2","93.5","94.8","95.17","95.24","102.1"],"4":["2.0","22.0","27.0","35.0","68.0","91.9","93.3","100.0","100.1","103.0"],"5":["2.0","8.9","80.7","94.12"],"6":["87.3"],"7":["94.9"],"8":["98.3"],"9":["59.0"],"20":["8.26"],"50":["36.0"],"53":["67.11"],"200":["103.0"],"206":["77.1"],"304":["77.2"],"404":["77.3"],"1000":["107.0"],"javascript":["1.0"],"同一时间并发访问服务器":["1.1"],"且不需要再切换执行上下文":["1.2"],"代码不好立即得到返回结果":["1.3"],"当代码执行时还会有一些任务":["2.0"],"promise":["2.0"],"为例":["2.0"],"微任务":["2.0"],"每次执行宏任务的时候":["2.0"],"都会单独创建一个微任务":["2.0"],"微任务执行完毕后":["2.0"],"浏览器会检查是否需要重新渲染":["2.0"],"浏览器有刷新频率":["2.0"],"同一张图片在不同的设备上":["7.0"],"大小可能天差地别":["7.0"],"响应式界面的标准是什么":["7.0"],"同一页面在不同大小和比例上看起来都应该是舒适的":["7.0"],"对父元素设置":["7.1"],"auto":["7.1","8.10","26.1"],"横行滚动查看":["7.1"],"适用于横行滚动列表":["7.1"],"元素过多但位置有限的导航栏":["7.1"],"控制文本溢出":["7.1"],"适用于单行文字":["7.1"],"多行文字溢出":["7.1"],"transform":["7.1"],"描绘":["7.1"],"1px":["7.1"],"注意":["8.2"],"只控制行内内容如何相对父元素对齐":["8.2"],"css":["8.2","46.1","95.5"],"son":["8.3","8.13","8.14"],"width":["8.3","30.0"],"缺点":["8.4","8.6","8.9","52.0","95.7"],"只对行内元素有效":["8.4"],"属性会继承影响到后代行内内容":["8.4"],"子绝父相":["8.5"],"top":["8.5"],"bottom":["8.5","8.16","44.1"],"right":["8.5","42.0","139.2"],"是相对于父元素尺寸的":["8.5"],"margin":["8.5","8.14","8.15"],"容易理解":["8.6"],"优点":["8.8","8.9","95.15"],"兼容性好":["8.8","8.9"],"简单":["8.10"],"消除幽灵空白节点的bug":["8.13"],"display":["8.13"],"inline":["8.13"],"负自身高度一半":["8.15"],"500px":["8.19","8.20","8.21","8.23","8.24"],"100px":["8.20","8.21","8.22"],"height":["8.20","8.21","8.23","8.24","28.0","43.1"],"background":["8.22","8.23","8.24","20.2"],"color":["8.22","8.23","8.24","8.27"],"f00":["8.22","8.23","8.24","8.27"],"不设宽度":["8.23"],"原理是检查到":["11.0"],"touched":["11.0"],"事件的时候":["11.0"],"会通过":["11.0"],"dom":["11.0","80.3","83.10","95.0","116.0"],"的顺序":["12.0"],"样式表会在后面的":["12.0"],"执行前先加载执行完毕":["12.0"],"所以":["12.0","95.3"],"会阻塞后面":["12.0"],"的执行":["12.0"],"怎么解决":["12.0"],"使用":["12.0","83.8","91.2","96.0","97.0"],"cdn":["12.0"],"因为":["12.0"],"会根据你的网络状况":["12.0"],"解析执行":["14.0"],"代码":["14.0"],"com":["15.0"],"localstorage":["15.1"],"indexdb":["15.1"],"等存储性内容":["15.1"],"push":["15.3","80.0","110.0","129.0"],"src":["15.3","155.3"],"join":["15.3"],"www":["15.4"],"urlencoded":["15.4"],"复杂请求":["15.4"],"不符合以上的就是复杂请求":["15.4"],"将响应转发给客户端":["15.5"],"如果不同":["16.0"],"则开启新的渲染进程":["16.0"],"传输数据":["16.0"],"更新状态":["16.0"],"渲染进程准备好后":["16.0"],"浏览器向渲染进程发起":["16.0"],"提交文档":["16.0"],"的消息":["16.0"],"渲染进程接收到消息和网络进程建立传输数据的":["16.0"],"管道":["16.0"],"渲染进程接收完数据后":["16.0"],"向浏览器发送":["16.0"],"确认提交":["16.0"],"浏览器进程接收到确认消息后更新浏览器界面状态":["16.0"],"安全":["16.0"],"地址栏":["16.0"],"每个线程都有自己的独立执行路径和栈空间":["17.1"],"进程和线程的特点":["17.1"],"进程中的任一线程执行出错":["17.1"],"绘制":["17.2"],"网络进程":["17.2"],"不会影响到外部布局":["19.0"],"table":["19.1"],"cell":["19.1"],"caption":["19.1"],"中的元素":["19.2"],"webkit":["20.1"],"autofill":["20.1","20.2"],"值和使用":["21.0"],"没有区别":["21.0"],"flex":["22.0"],"important":["23.0"],"可以使用":["24.0","24.1","80.8"],"padding":["24.0","24.2"],"空间不足时缩小的比例是":["25.0"],"容器中默认存在两条轴":["26.0"],"主轴和交叉轴":["26.0"],"交叉轴终点对齐":["26.1"],"居中对齐":["26.1"],"baseline":["26.1"],"项目的第一行文字的基线对齐":["26.1"],"stretch":["26.1"],"默认值":["26.1"],"如果项目未设置高度或者设置为":["26.1"],"占满整个容器的高度":["26.1"],"定义项目缩小比例":["26.2"],"如果空间不足":["26.2"],"项目缩小":["26.2"],"才能识别":["27.0"],"标签作为":["27.0"],"元素":["27.0","29.0"],"不存在兼容性问题":["27.0"],"来分隔它们":["28.0"],"也可以为":["28.0"],"父元素设置一个高度":["28.0"],"max":["28.0"],"min":["28.0"],"body":["29.0"],"视口的宽":["30.0"],"适用场景":["31.0"],"通常用于创建图像和图表":["31.0"],"可以用":["32.0"],"position":["33.0"],"relative":["33.0","42.0"],"absolute":["33.0"],"不会生成新的元素":["34.0"],"伪元素":["34.0"],"如果该元素绑定了事件会触发":["35.0"],"重绘":["35.0"],"content":["35.0"],"移出文档流":["35.0"],"但是再次显示时消耗性能低":["35.0"],"固定宽高时设置":["36.0"],"接口预加载":["37.0"],"在":["38.0"],"的":["38.0","76.8","94.11","95.21"],"中使用":["38.0"],"这样可以确保每帧动画能够在显示器刷新之前完成":["39.0"],"如果时间间隔小于":["39.0"],"指定要显示的行数":["40.0"],"元素设为":["42.0"],"因此就造就了高度塌陷的问题":["43.0"],"block":["43.1"],"visibility":["43.1"],"hidden":["43.1"],"把任意三边隐藏掉":["44.0"],"默认为":["45.0"],"标准盒子模型":["45.0"],"li":["46.0"],"子元素重新设置字体大小和行高":["46.1"],"原理是":["46.1"],"中字体继承的特性和文字基线对齐":["46.1"],"相邻后代选择器":["47.0"],"伪元素选择器":["47.1"],"后者指向":["48.0"],"window":["48.0","66.2","81.0"],"第三个参数涉及到冒泡和捕获":["48.0"],"是":["48.0"],"事件触发之前执行":["49.0"],"这确保了脚本的执行在整个文档结构构建完成之后":["49.0"],"使用场景":["49.0","95.2","95.10"],"如果页面中有多个带有":["49.0"],"添加":["50.0"],"webworker":["51.0"],"webscoket":["51.0"],"协议":["51.0","72.1"],"新增":["51.0"],"实现代码复用":["52.0"],"input":["53.0","95.20"],"type":["53.0","93.2"],"用于告诉浏览器在页面加载时立即开始加载指定的资源":["54.0"],"与":["54.0"],"用于定义超链接和外部样式表":["55.0"],"不会立即请求资源":["55.0"],"而是将链接添加到文档的超链接列表中":["55.0"],"当用户点击链接时":["55.0"],"才会根据":["55.0"],"hello":["56.1"],"from":["56.1"],"tab":["56.1"],"处理连接关闭":["56.1"],"标签页2":["56.2"],"button":["56.3"],"标签来确定上下文和各个关键字的权重":["57.1"],"一个语义化的文档对爬虫来说是友好的":["57.1"],"是有利于爬虫对文档内容解读的":["57.1"],"从而有利于网站的":["57.1"],"seo":["57.1"],"表示一组媒体内容":["57.2"],"一般包括图像":["57.2"],"图表":["57.2"],"实现了更接近传统面向对象编程的方式":["59.0"],"同时":["59.0"],"还提供了模块化的支持":["59.0"],"import":["59.0","91.9","100.1"],"export":["59.0"],"语法导入和导出模块":["59.0"],"完成后进行":["60.0"],"即":["60.0","72.3"],"渲染更新":["60.0"],"先宏任务":["60.0"],"再微任务":["60.0"],"然后再渲染更新":["60.0"],"宏任务队列中":["60.0"],"如果有大量任务等待执行时":["60.0"],"将":["60.0","94.11"],"dom的变动作为微任务":["60.0"],"能更快的将变化呈现给用户":["60.0"],"这样就可以在这一次的事件轮询中更新":["60.0"],"domevent":["60.0"],"是window调用的foo函数":["61.0"],"所以foo中的this指向window":["61.0"],"obj2":["61.0"],"foo1":["61.0"],"foo2":["61.0"],"settimeout":["61.0","112.0"],"preventdefault":["62.0","62.1"],"方法来阻止":["62.0"],"true":["62.1","68.0","120.0","124.1","155.6"],"来实现阻止事件进一步传播":["62.1"],"e":["62.1"],"可以阻止事件的默认行为发生":["62.1"],"默认行为是指":["62.1"],"点击":["62.1"],"a":["62.1"],"标签就转跳到其他页面":["62.1"],"let":["63.3","134.0","141.0"],"用来定义常量":["63.4"],"声明时必须赋值":["63.4"],"也就是全局对象":["63.5"],"j":["63.6"],"timer":["63.6"],"fn":["63.6","115.0"],"null":["64.1","68.0","83.5","91.4","111.0"],"是一个对象指向一个函数":["64.3"],"这个函数就是这个对象的构造函数":["64.3"],"构造函数":["64.3"],"构造函数本身":["64.3"],"在内存中失去引用时":["65.1"],"垃圾回收机制会根据特殊的算法找到它":["65.1"],"并将原来标记为可到达对象的标识清除":["65.2"],"以便进行下一次垃圾回收操作":["65.2"],"因为它们对于值的引用不计入垃圾回收机制":["65.4"],"作用域链":["66.0"],"运行在":["66.1"],"函数中的代码":["66.1"],"对象":["66.2","93.1"],"当该函数执行结束":["66.3"],"执行上下文从栈中弹出":["66.3"],"执行阶段":["66.4"],"对变量进行赋值":["66.4"],"指向全局对象":["66.5"],"全局变量会作为该对象的属性来被查询":["66.5"],"在运行过程中需要检查数据类型的语言":["67.0"],"静态语言":["67.0"],"function":["67.1","67.15","115.0"],"数组":["67.1"],"array":["67.1","138.0"],"所以可能添加相同的键名":["67.2"],"就会出现冲突的问题":["67.2"],"in":["67.3"],"object":["67.3","116.0"],"n":["67.4","94.14"],"或者使用":["67.4"],"未定义的值":["67.5"],"语义是表示一个变量最原始的状态":["67.5"],"而不是人为操作的结果":["67.5"],"声明一个变量":["67.5"],"但是没有赋值":["67.5"],"为了性能考虑使用低位存储变量的类型信息":["67.6"],"000":["67.6"],"开头代表对象":["67.6"],"可以容纳各种大小的数据":["67.7"],"对于复制操作":["67.7"],"可以判断引用类型":["67.8"],"检测当前实例是否是属于这个类的":["67.8"],"底层机制":["67.8"],"只要当前类出现在实例的原型上":["67.8"],"结果都是":["67.8"],"key":["67.10"],"return":["67.10","105.0"],"位的有效数字":["67.11"],"超过这个长度的位数会被截取掉这样就造成了精度丢失的问题":["67.11"],"解决":["67.11","73.2"],"将其转换为整数之后再进行运算":["67.11"],"会首先判断传入参数是否为数字":["67.12"],"如果是数字再继续判断是否为":["67.12"],"处理了一些特殊的情况":["67.13"],"比如":["67.13"],"再转换成数字为":["67.14"],"this":["67.15","92.3","95.4"],"基数为":["67.16"],"表示的数中":["67.16"],"最大值小于":["67.16"],"类似集合":["67.17"],"方法很多":["67.17"],"可以跟各种数据格式转换":["67.17"],"接受对象作为健名":["67.17"],"index":["68.0","155.3"],"xml":["68.0"],"发送请求":["68.0"],"send":["68.0"],"严谨写法":["68.0"],"可以用于浏览器和":["68.1"],"node":["68.1"],"js":["68.1","82.3","95.5","95.16","141.0","147.0"],"环境中发出":["68.1"],"http":["68.1","78.0","80.0","83.12","84.0"],"节点加上节点之间的智能冗余":["69.0"],"机制":["69.0"],"可以有效地预防黑客":["69.0"],"入侵以及降低各种":["69.0"],"d":["69.0"],"o":["69.0"],"s":["69.0"],"攻击对网站的影响":["69.0"],"name":["70.0"],"server":["70.0"],"服务器":["70.0"],"通常情况下就是你注册的域名服务器":["70.0"],"服务器上的数据都是安全的":["71.0"],"每次的结果都是相同的":["71.0"],"浏览器会对":["71.0"],"的握手过程":["72.0"],"才可以进行密文传输":["72.0"],"ssl":["72.1"],"tsl":["72.1"],"获取客户端发来的随机数":["72.3"],"第五步":["72.3"],"二来公钥里并没有包含服务器的信息":["72.4"],"也就是并不能确保服务器身份的合法性":["72.4"],"并且非对称加密的时候要消耗一定的时间":["72.4"],"减低了数据的传输效率":["72.4","87.2"],"混合加密机制的好处是什么":["72.4"],"对称密钥加密和非对称密钥加密都有它们各种的优缺点":["72.4"],"而混合加密机制就是将两者结合利用它们各自的优点来进行加密传输":["72.4"],"比如既然对称密钥的优点是加解密效率快":["72.4"],"那么在客户端与服务端确定了连接之后就可以用它来进行加密传输":["72.4"],"返回前端":["72.5"],"前端每次":["72.5"],"灵活和易于扩展":["73.1"],"协议中的各类请求方法":["73.1"],"cookie":["73.2"],"连接中":["73.3"],"客户端发起多个请求":["73.3"],"发出了第一个请求之后":["73.3"],"不用等待返回结果":["73.3"],"可以发第二个请求":["73.3"],"只获取当前用户能看到的页面资源":["73.4"],"当用户向下滑动页面的时候":["73.4"],"再去请求服务器获取相应的资源":["73.4"],"达到延迟发送请求的效果":["73.4"],"一般来说":["73.4"],"的响应数据要比请求大":["73.4"],"所以可以考虑对响应的资源进行压缩":["73.4"],"减少响应的数据大小":["73.4"],"提高网络传输的效率":["73.4"],"无损压缩":["73.4"],"无损压缩是指源码经过压缩后":["73.4"],"信息不被破坏":["73.4"],"还能恢复到压缩前的模样":["73.4"],"适合用在文本文件":["73.4"],"程序可执行文件":["73.4"],"程序源代码":["73.4"],"一般情况下":["73.4"],"中的请求或响应":["73.6"],"由":["73.6"],"头部和包体构成":["73.6"],"里包含一条或者多个":["73.6"],"frame":["73.6"],"最小单位":["73.6"],"以二进制压缩格式存放":["73.6"],"中的内容":["73.6"],"头部和包体":["73.6"],"多个":["73.6"],"跑在一条":["73.6"],"同一个":["73.6"],"请求与响应是跑在同一个":["73.6"],"消息可以由多个":["73.6"],"用于服务器回应时":["74.0"],"告诉客户端":["74.0"],"即可通过单点登录系统":["75.0"],"etruesso":["75.0"],"访问后台的多个":["75.0"],"应用系统":["75.0"],"二次登陆时无需重新输入用户名和密码":["75.0"],"基于角色访问控制":["75.0"],"根据用户的角色和":["75.0"],"url":["75.0","95.21"],"就需要网络进行通信":["76.0"],"但是设备是多样性的":["76.0"],"保证一个报文一定能到达接收端":["76.1"],"如果直接传输就很不好控制":["76.2"],"所有当传输的数据包大于":["76.2"],"最大报文长度的时候":["76.2"],"就要将数据包分块":["76.2"],"这样的好处就是如果传输过程中有一个丢失或者损坏":["76.2"],"只需要重新发送丢失的分块即可":["76.2"],"不需要重新发送整个数据包":["76.2"],"传输层的报文中会携带端口号":["76.2"],"接收方根据这个端口号来判断这个报文要传输给那个应用":["76.2"],"时":["76.3","94.6"],"确认应答的字段变为有效":["76.3"],"需要":["76.4"],"这个报文也不包含应用层数据":["76.5"],"客户端收到服务端的报文后":["76.5"],"向服务端回应最后一个应答报文":["76.5"],"首先将应答报文":["76.5"],"首部":["76.5"],"标志位置为":["76.5"],"time":["76.6"],"需要过一阵子以确保服务端收到自己的":["76.6"],"报文之后才会进入":["76.6"],"closed":["76.6"],"是服务器在上一次对话中发送给客户的":["76.7"],"这个":["76.7"],"支持":["76.8","92.4","93.4"],"partial":["77.1"],"说明请求的资源还在":["77.2"],"但是暂时需要用另一个url来访问":["77.2"],"not":["77.3"],"表示服务器自身工作正常":["77.4"],"访问后端服务器发生了错误":["77.4"],"请求":["78.0","83.11"],"会在正式通信之前":["78.0"],"增加一次":["78.0"],"它的优点是":["79.0"],"明显减少了很多不必要的":["79.0"],"请求次数":["79.0"],"相比之下节约了资源":["79.0"],"长轮询的缺点在于":["79.0"],"连接挂起也会导致资源的浪费":["79.0"],"websocket":["79.0"],"maxgae":["80.1"],"优先级高于":["80.1"],"如果":["80.1","95.1"],"maxage":["80.1"],"未过期":["80.1"],"向代理服务器请求缓存内容":["80.1"],"只在代理服务器中生效":["80.1"],"客户端只考虑":["80.1"],"public":["80.1","95.25"],"private":["80.1"],"如果为资源设置了":["80.1"],"那么它既可以被浏览器缓存":["80.1"],"所以使用":["80.2"],"可能会有一个":["80.2"],"bug":["80.2"],"那就是服务器并没有正确感知文件的变化":["80.2"],"为了解决这个问题":["80.2"],"etag":["80.2"],"出现了":["80.2"],"是由服务器为每个资源生成的唯一的标识字符串":["80.2"],"这个标识字符串是基于文件内容编码的":["80.2"],"只要文件内容不同":["80.2"],"对应的":["80.2"],"所以无法直接访问":["80.3"],"可以帮我们实现离线缓存":["80.3"],"消息推送和网络代理等功能":["80.3"],"借助":["80.3"],"实现的离线缓存就是":["80.3"],"生命周期包括":["80.3"],"最大只能有":["80.5"],"4kb":["80.5"],"所以只能存少量的信息":["80.5"],"过量的":["80.5"],"存储容量大":["80.7"],"可以达到":["80.7"],"无法解决的程度":["80.8"],"发现自己没有这个资源":["80.9"],"一般是缓存的数据过期了":["80.9"],"转头向根服务器去要这个资源":["80.9"],"viewheight":["81.0"],"innerheight":["81.0"],"document":["81.0"],"无论调用多少次":["81.1"],"服务端渲染也可以解决首屏加载速度过慢":["82.0"],"除了加载":["82.0"],"还要等渲染所需的这部分":["82.0"],"创建的是":["82.1"],"的解析过程是并行的":["82.1"],"渲染树":["82.1"],"等":["82.2","92.2","92.8"],"引擎运行完毕":["82.2"],"浏览器会把控制器交还给渲染引擎":["82.2"],"继续":["82.2"],"和":["82.2"],"的构建":["82.2"],"通过":["82.2"],"有人":["82.2"],"回流一定会导致重绘":["82.3"],"如何避免":["82.3"],"将一些属性使用":["82.3"],"变量缓存起来":["82.3"],"计算完毕再提交给浏览器发出重计算请求":["82.3"],"连接上进行优化":["83.0"],"在webpack":["83.3"],"js中对dll做配置":["83.3"],"帮我们把任务分解给多个子进程去并发执行":["83.4"],"大大提升打包效率":["83.4"],"使用方法":["83.4"],"getcomponent":["83.5"],"location":["83.5"],"cb":["83.5","99.2"],"ensure":["83.5"],"pages":["83.5"],"所以可以理解为以服务器压缩的时间开销和":["83.6"],"开销为代价":["83.6"],"省下了一些传输过程中的时间开销":["83.6"],"但是我们都知道服务器的":["83.6"],"黑":["83.7"],"白":["83.7"],"图":["83.8"],"呈现大图":["83.8"],"既可以保证图片的质量":["83.8"],"但是在日常开发中":["83.9"],"我们为了避免文件体积过大":["83.9"],"一般不使用":["83.9"],"html":["83.10"],"里成为":["83.10"],"的一部分":["83.10"],"也可以把对图形的描述写入以":["83.10"],"无法弥补这庞大的体积带来的性能开销":["83.11"],"只有在传输非常小的图片的时候":["83.11"],"带来的文件体积膨胀":["83.11"],"以及浏览器解析":["83.11"],"jgp":["83.12"],"还有就是让后端去根据":["83.12"],"头部的":["83.12"],"accept":["83.12"],"字段来决定返回什么格式的图片":["83.12"],"验证":["84.0"],"永远不要使用管理员权限的数据库连接":["85.0"],"为每个应用使用单独的权限有限的数据库连接":["85.0"],"不要把机密信息明文存放":["85.0"],"请加密或者":["85.0"],"而不是用户原本以为的信任站点":["86.0"],"防护原理":["86.0"],"对用户输入进行合适的转义和过滤":["86.0"],"使用安全的模板引擎或自动转义函数":["86.0"],"tls":["87.0"],"可以将数据用公钥加密":["87.1"],"就算是第三方截取了这个数据但是没有对应的私钥也解密不了":["87.2"],"缺点是非对称加密的时候要消耗一定的时间":["87.2"],"对传输数据进行对称加密":["87.3"],"服务端拿私钥解密随机码":["87.3"],"中间人攻击中":["87.4"],"中间人首先伪装成服务端和客户端进行通信":["87.4"],"然后又伪装成客户端和服务端进行通信":["87.4"],"可以阻止自动化程序大规模注册账号":["89.0"],"如果当前监控的值是数组类型":["90.0"],"会对对象中的每一项进行求值":["90.0"],"此时会将当前":["90.0"],"这样会带来性能问题":["90.1"],"优化的话可以使用字符串形式监听":["90.1"],"如果没有写到组件中":["90.1"],"不要忘记使用":["90.1"],"unwatch":["90.1"],"转化":["90.2"],"依赖收集":["90.2"],"因此引入":["90.3"],"能够很好地解决监听对象的问题":["90.3"],"的实例":["91.1"],"想要导航到不同":["91.1"],"对象的":["91.2"],"安装":["91.3"],"可以对浏览器历史记录栈进行修改":["91.4"],"以及":["91.4"],"popstate":["91.4"],"事件的监听到状态变更":["91.4"],"path":["91.4"],"程序员poetry":["91.4"],"代码已经复制到剪贴板":["91.4"],"这两个方法有个共同的特点":["91.4"],"可以显示具名组件":["91.5"],"起到更强的布局作用":["91.5"],"组件内部根据":["91.5"],"属性判断如何渲染最终生成节点":["91.5"],"前进":["91.6"],"go":["91.6"],"前进或者后退几步":["91.6"],"event":["91.7"],"创建这两个事件":["91.7"],"我们还可以为路由组件添加守卫配置":["91.8"],"beforerouteenter":["91.8"],"会在渲染该组件的对应路由被验证前调用":["91.8"],"views":["91.9"],"userdetails":["91.9"],"结合注释":["91.9"],"插件":["91.10","93.5"],"即实现":["91.10"],"install":["91.10","95.19"],"方法":["91.10","95.2","95.19"],"内部做两件事":["91.10"],"实现两个全局组件":["91.10"],"针对整个对象":["92.0"],"而不是对象的某个属性":["92.0"],"所以也就不需要对":["92.0"],"keys":["92.0","116.0"],"通常用于处理单值的响应式问题":["92.1"],"底层采用的是":["92.1"],"相对更简单":["92.2"],"没有额外的选项":["92.2"],"中见不到":["92.3"],"的使用":["92.3"],"ts":["92.4"],"umounted":["92.5"],"需要保证":["92.6"],"的顺序一致":["92.6"],"优化":["92.7"],"更小":["92.7"],"更好的摇树优化":["92.7"],"tree":["92.7","121.0"],"shaking":["92.7"],"移除一些不常用的":["92.7"],"更友好":["92.7"],"对不参与更新的元素":["92.8"],"会做静态提升":["92.8"],"只会被创建一次":["92.8"],"之后会在每次渲染时候被不停的复用":["92.8"],"可以有效跳过大量":["92.8"],"其他情况都要":["92.9"],"初衷":["92.9"],"不丢失响应式的情况下":["92.9"],"若使用":["92.10"],"options":["92.10","155.13"],"的回调函数接收参数是":["93.1"],"state":["93.1"],"则是与":["93.1"],"实例具有相同方法和属性的上下文":["93.1"],"context":["93.1"],"因此一般会解构它为":["93.1"],"是否是期待的那个":["93.2"],"从而进一步做后续处理":["93.2"],"方式简单好用":["93.2"],"且能获取变化前后值":["93.2"],"subscribe":["93.3"],"方法做一个统一的处理":["93.3"],"甚至可以封装一个":["93.3"],"插件以便复用":["93.3"],"直接抛弃它了":["93.4"],"这无疑减少了我们工作量":["93.4"],"支持同步和异步":["93.4"],"不支持":["93.4"],"良好的":["93.4"],"typescript":["93.4"],"毕竟我们":["93.4"],"为响应式对象":["93.5"],"同时将":["93.5"],"定义为一个":["93.5"],"vue":["93.5"],"getter":["94.0"],"语法树转化成":["94.1"],"funtion":["94.1"],"字符串的过程":["94.1"],"函数":["94.1","94.7","94.8"],"同样更新":["94.3"],"虚拟":["94.3"],"不会立即操作":["94.3"],"通过原型链":["94.4"],"函数劫持的方式实现的":["94.4"],"depend":["94.5"],"当属性发生修改时会触发":["94.5"],"每个列表项的":["94.6"],"在变更前后是一样的":["94.6"],"都是直接判断为":["94.6"],"samenode":["94.6"],"然后复用":["94.6"],"最终拿到":["94.7"],"内部挂载的时候会产生一个":["94.7"],"watcher":["94.7"],"会调用":["94.7"],"算法才能精确找到发生变化的地方并高效更新":["94.8"],"中":["94.8"],"执行的时刻是组件内响应式数据变更触发实例执行其更新函数时":["94.8"],"更新函数会再次执行":["94.8"],"render":["94.8"],"函数获得最新的虚拟":["94.8"],"然后执行":["94.8"],"并传入新旧两次虚拟":["94.8"],"通过比对两者找到变化的地方":["94.8"],"最后将其转化为对应的":["94.8"],"完全不用接触繁琐的":["94.9"],"操作":["94.9"],"从而大大提升开发效率":["94.9"],"降低开发难度":["94.9"],"中的数据响应式会根据数据类型来做不同处理":["94.9"],"如果是":["94.9","119.2"],"对象则采用":["94.9"],"的方式定义数据拦截":["94.9"],"当数据被访问或发生变化时":["94.9"],"我们感知并作出响应":["94.9"],"如果是数组则通过覆盖数组对象原型的":["94.9"],"个变更方法":["94.9"],"使这些方法可以额外的做更新通知":["94.9"],"这会首次执行组件渲染函数并执行":["94.10"],"patch":["94.10"],"将前面获得":["94.10"],"update":["94.11"],"所以我们只需要在传入的回调函数中访问最新":["94.12"],"状态即可":["94.12"],"或者我们可以":["94.12"],"await":["94.12"],"方法返回的":["94.12"],"之后做这件事":["94.12"],"本质上不过是语法糖":["94.13"],"可以看成是":["94.13"],"value":["94.13","95.20","123.0"],"采用虚拟":["95.0"],"是对象的话":["95.1"],"对象属于引用类型":["95.1"],"性能消耗":["95.2"],"有更高的切换消耗":["95.2"],"有更高的初始渲染消耗":["95.2"],"里加":["95.5"],"如果被其它地方复用":["95.6"],"就放在":["95.6"],"前后端职责分离":["95.7"],"架构清晰":["95.7"],"服务器压力小":["95.7"],"初次加载耗时多":["95.7"],"ui":["95.8"],"框架按需加载":["95.8"],"图片资源压缩":["95.8"],"activated":["95.9"],"deactivated":["95.9"],"当组件被激活时":["95.9"],"触发钩子函数":["95.9"],"函数返回的对象":["95.10"],"的产生而浪费内存":["95.11"],"如果粒度过低也无法精准检测变化":["95.11"],"所以采用":["95.11"],"这些选项将以恰当的方式进行":["95.12"],"合并":["95.12"],"如果混入的数据和本身组件的数据冲突":["95.12"],"我们可以把":["95.13"],"称为数据层":["95.13"],"因为它仅仅关注数据本身":["95.13"],"不关心任何行为":["95.13"],"用户操作界面":["95.13"],"当":["95.13"],"就创建一个":["95.14"],"节点":["95.14","96.0","100.1"],"把多个根节点作为它的":["95.14"],"children":["95.14"],"attrs":["95.15"],"里面":["95.15"],"并自动挂载到组件根元素上面":["95.15"],"可以通过":["95.15"],"inheritattrs":["95.15"],"属性禁止":["95.15"],"由于函数式组件不需要实例化":["95.15"],"跨级组件间建立了一种主动提供与依赖注入的关系":["95.16"],"root":["95.16"],"访问根组件中的属性或方法":["95.16"],"是根组件":["95.16"],"不是父组件":["95.16"],"只对根组件有用":["95.16"],"vuex":["95.16"],"是一个专为":["95.16"],"应用程序开发的状态管理模式":["95.16"],"每一个":["95.16","95.19"],"插槽主要用于":["95.17"],"组件中的内容分发":["95.17"],"并将这个":["95.18"],"用作其初始值":["95.18"],"以一种原始的值传入且需要进行转换":["95.18"],"单文件的这种格式":["95.19"],"文件我们都可以看成是一个组件":["95.19"],"use":["95.19"],"插件的实现应该暴露一个":["95.19"],"这个方法的第一个参数是":["95.19"],"构造器":["95.19"],"第二个参数是一个可选的选项对象":["95.19"],"注册形式":["95.19"],"组件注册主要分为":["95.19"],"加载相应组件":["95.21"],"获取和解析异步数据":["95.21"],"创建一个读取":["95.21"],"bundlerenderer":["95.21"],"然后生成":["95.21"],"发送给客户端":["95.21"],"客户端混合":["95.21"],"客户端收到从服务端传来的":["95.21"],"与自己的生成的":["95.21"],"进行对比":["95.21"],"把不相同的":["95.21"],"使其可以能够响应后续变化":["95.21"],"这个过程称为客户端激活":["95.21"],"为确保混合成功":["95.21"],"客户端与服务器端需要共享同一套数据":["95.21"],"在服务端":["95.21"],"可以在渲染之前获取数据":["95.21"],"填充到":["95.21"],"msg":["95.23"],"调用子组件中的方法":["95.23"],"我们的":["95.24"],"还可以单独作用当前组件":["95.24"],"打包时":["95.24"],"vscode":["95.25"],"用来放项目中的":["95.25"],"配置":["95.25"],"plugins":["95.25"],"用来放":["95.25"],"插件的":["95.25"],"plugin":["95.25"],"用来放一些诸如":["95.25"],"页头":["95.25"],"icon":["95.25"],"真实":["96.0"],"已经挂载完毕":["96.0"],"数据完成双向绑定":["96.0"],"可以访问到":["96.0"],"refs":["96.0"],"属性对":["96.0"],"进行操作":["96.0"],"也可以向后台发送请求":["96.0"],"拿到返回数据":["96.0"],"更新之前发生":["96.0"],"也就是响应式数据发生更新":["96.0"],"如果在":["96.1"],"中使用了第三方库":["96.1"],"父组件更新过程":["96.2"],"如果需要等待":["96.3"],"进行遍历":["97.0"],"插件转化成新的":["97.0"],"处理转换成":["98.0"],"innerhtml":["98.1"],"head":["98.1"],"从下到上":["98.2"],"utf":["98.3"],"把文件输出到一个文件夹中":["98.3"],"在代码中通过相对":["98.3"],"去引用输出的文件":["98.3"],"image":["98.3"],"插件只需要监听它所关系的事件":["99.1"],"console":["99.2"],"log":["99.2"],"将es6语法转化成es5":["100.0"],"因为现在我们引入文件都是通过":["100.1"],"的方式引入":["100.1"],"所以找到了":["100.1"],"就找到了文件的依赖关系":["100.1"],"会生出不同的":["101.0"],"contenthash":["101.0"],"好处":["102.0"],"值会编译新生成的文件标识":["102.1"],"被作为下次热更新的标识":["102.1"],"监听文件变化":["102.1"],"主要是通过文件的生成时间判断是否有变化":["102.1"],"readystate":["103.0"],"status":["103.0"],"this指向的是new出来的对象":["104.0"],"判断new出来的对象是否为fn的实例":["104.0"],"thisf":["104.0"],"传入的所有参数都必须为函数":["105.0"],"prototype":["106.0"],"if":["107.0","114.0","119.1","121.0","130.0","131.0","147.0","149.0"],"unshift":["107.0"],"放到任务队列顶部":["107.0"],"else":["107.0","127.0","133.0"],"删除旧的数据":["108.0"],"apply":["109.0"],"如果构造函数显示返回了一个对象":["109.0"],"将then传入的回调函数":["110.0"],"注册到resolvetask中":["110.0"],"重点":["110.0"],"判断resolvecallback事件的返回值":["110.0"],"假如用户注册的resolvecallback事件又返回一个promise":["110.0"],"将resolve和reject传进去":["110.0"],"这样就实现控制了链式调用的顺序":["110.0"],"const":["110.0","129.0"],"res":["110.0"],"catch":["110.2"],"err":["110.2"],"接口失败后":["110.2"],"判断剩余次数不为0时":["110.2"],"继续重发":["110.2"],"timeout":["111.0"],"moreargs":["113.0"],"定义一个内部函数fn":["115.0"],"会在触发时执行回调函数并取消订阅":["115.0"],"执行回调函数":["115.0"],"createelement":["116.0"],"遍历属性":["116.0"],"while":["117.0","118.0","119.4","126.0","132.0","137.0","139.2","147.0","149.0","150.0","151.0"],"next":["117.0","118.0","146.0"],"区别在这里":["119.0"],"我们加了一个标志位":["119.0"],"flag":["119.0"],"false":["119.0"],"处的数据项比当前最小值还要小":["119.1"],"则更新最小值索引为":["119.1"],"则将":["119.2"],"前面的一个元素后移一位":["119.2"],"为":["119.2"],"让出位置":["119.2"],"初始化左边界的索引":["119.3"],"leftindex":["119.3"],"lef":["119.3"],"遍历从左边界到右边界之前的元素":["119.3"],"for":["119.3","128.0","134.0","138.0","141.0"],"i":["119.3","128.0","134.0","138.0"],"如果当前元素小于枢轴元素":["119.3"],"缓存arr2的长度":["119.4"],"len2":["119.4"],"合并两个子数组":["119.4"],"方法4":["120.0"],"dfs":["121.0"],"foreach":["121.0"],"item":["121.0"],"call":["122.0"],"func":["123.0"],"转换成时间戳":["124.0"],"单位毫秒":["124.0"],"now":["124.0"],"new":["124.0","138.0"],"date":["124.0"],"将当前时间和上一次执行函数的时间进行对比":["124.0"],"表示第一次触发后执行":["124.1"],"为空表示首次触发":["124.1"],"length":["126.0","131.0","137.0","140.0"],"移除开始位置和重复的空格":["127.0"],"移除末尾空格":["127.0"],"split":["128.0"],"sum":["129.0","132.0","134.0"],"size":["130.0"],"has":["131.0","133.0","135.0"],"l":["132.0","136.0"],"r":["132.0","136.0"],"set":["133.0","135.0"],"get":["133.0","135.0"],"记录当前":["134.0"],"防止循环":["134.0"],"fill":["138.0"],"的比较关系来确定目标元素在那一半":["139.0"],"说明目标元素在右半部分":["139.1"],"mid":["139.2"],"找可行解":["143.0"],"优化可行解":["143.0"],"pre":["145.0"],"删除要删除的节点":["146.0"],"仅仅是为了标识链表的实际情况":["147.0"],"不允许修改":["147.0"],"链表":["147.0"],"解题思路":["147.0"],"cur":["149.0"],"cue":["149.0"],"cli":["155.0"],"入口":["155.1"],"output":["155.1"],"出口":["155.1"],"filename":["155.1"],"bundle":["155.1"],"template":["155.3"],"处理css文件":["155.4"],"test":["155.4"],"cache":["155.6"],"parallel":["155.6"],"特点":["155.7"],"功能单一":["155.7"],"的标签中":["155.9"],"文件":["155.10"],"es6":["155.12"]},{"0":["33.0","43.1","67.13","110.2"],"1":["8.22"],"3":["93.1","95.18","97.0"],"4":["41.0","64.3","66.2","66.3","67.9","94.8","95.17","95.24","102.1"],"5":["22.0","33.0","35.0","36.0","42.0","100.0","100.1"],"6":["2.0","35.0"],"7":["2.0","87.3"],"10":["59.0"],"16":["2.0"],"20":["76.8"],"80":["72.0"],"100":["73.6"],"304":["103.0"],"443":["72.0"],"503":["77.4"],"3000":["15.3"],"运行环境":["1.0"],"不需要管锁的问题":["1.2"],"可以继续执行其它代码":["1.3"],"6ms":["2.0"],"每次循环一次":["2.0"],"都会执行一个宏任务并清空对应的微任务队列":["2.0"],"每次循环完毕后":["2.0"],"都要看看是否要渲染":["2.0"],"如果需要渲染才渲染":["2.0"],"如果微任务在执行过程中再次生成微任务":["2.0"],"会在本轮直接清空":["2.0"],"常见宏任务":["2.0"],"script":["2.0"],"同一页面在不同分辨率上看起来应该合理":["7.0"],"同一页面在不同操作方式下":["7.0"],"体验应该是统一的":["7.0"],"边框":["7.1"],"适用于容器":["7.1"],"翻转内容":["7.1"],"scale3d":["7.1"],"对内容进行翻转":["7.1"],"适用于内容翻转":["7.1"],"letter":["7.1"],"spacing":["7.1"],"排版倒序文本":["7.1"],"parent":["8.2"],"100px":["8.3","8.14"],"块级元素改为":["8.4"],"或":["8.5"],"是相对于自身尺寸的":["8.5"],"组合使用达到水平居中的目的":["8.5"],"优点":["8.5"],"使用":["8.5","42.0","67.11","86.0","91.1","94.6"],"pc":["8.6"],"端兼容性不好":["8.6"],"缺点":["8.8","65.2","75.0"],"只能用于单行行内内容":["8.8"],"只能用于行内内容":["8.9"],"需要知道高度和最终呈现多少行来计算出":["8.9"],"兼容性较好":["8.10"],"ie8":["8.10"],"items":["8.10","41.0"],"center":["8.10","41.0"],"self":["8.10"],"direction":["8.11"],"column":["8.11"],"justify":["8.11","41.0"],"block":["8.13"],"如果是块级元素需改为行内或行内块级才生效":["8.13"],"vertical":["8.13","40.0"],"auto":["8.14","25.0"],"如果是块级元素就添加这个":["8.14"],"transform":["8.15"],"translate":["8.15"],"left":["8.16","44.1","127.0"],"right":["8.16"],"0f0":["8.19","8.20","8.22","8.24"],"值大于等于":["8.21"],"left的宽度":["8.21"],"均分了父元素剩余空间":["8.22"],"hidden":["8.23"],"触发bfc":["8.23"],"间隔":["8.26"],"在此定义和":["8.26"],"的间隔":["8.26"],"200px":["8.27"],"eeff2b":["8.27"],"自定义事件立即发出":["11.0"],"click":["11.0"],"事件":["11.0"],"并把浏览器在":["11.0"],"替你挑选最近的一个具有缓存内容的节点为你提供资源":["12.0"],"因此可以减少加载时间":["12.0"],"对":["12.0"],"进行压缩":["12.0"],"可以用很多打包工具":["12.0"],"比如":["12.0","92.6"],"webpack":["12.0","83.6"],"gulp":["12.0"],"等":["12.0"],"也可以通过开启":["12.0"],"gzip":["12.0","73.4","95.8"],"压缩":["12.0","95.8"],"合理的使用缓存":["12.0"],"设置":["12.0"],"cache":["12.0"],"control":["12.0"],"expires":["12.0"],"实现网页的动态交互":["14.0"],"v8":["14.0"],"a":["15.0","73.3"],"1190000010719058":["15.0"],"dom":["15.1","16.0","27.0","94.10"],"节点":["15.1"],"ajax":["15.1"],"appendchild":["15.3","98.1"],"http":["15.3","15.4","86.0"],"localhost":["15.3"],"say":["15.3"],"请求地址":["15.3"],"发送复杂请求":["15.4"],"会在正式通信之前":["15.4"],"增加一次":["15.4"],"查询请求":["15.4","78.0"],"前进后退的历史状态":["16.0"],"更新":["16.0","94.5"],"页面":["16.0"],"渲染流程":["16.0"],"渲染进程将":["16.0"],"内容转换为能够读懂的":["16.0"],"树结构":["16.0"],"渲染引擎将":["16.0"],"css":["16.0","55.0","95.25"],"样式表转化为浏览器可以理解的":["16.0"],"stylesheets":["16.0"],"计算出":["16.0"],"都会导致整个进程奔溃":["17.1"],"线程之间共享进程中的数据":["17.1"],"当一个进程关闭后":["17.1"],"负责页面的网络资源加载":["17.2"],"插件进程":["17.2"],"负责插件的运行":["17.2"],"flex":["19.1","41.0"],"grid":["19.1"],"中的元素":["19.1"],"overflow":["19.1","43.1"],"它们的边界会被限制在":["19.2"],"的内部":["19.2"],"私有属性造成的":["20.1"],"color":["20.2"],"transparent":["20.2"],"firefox":["21.0"],"opera":["21.0"],"和":["21.0","91.10"],"ie":["21.0"],"弹性盒子布局":["22.0"],"使用缓存":["23.0"],"使用精灵图":["23.0"],"margin":["24.0","24.1","24.2"],"上下不生效":["24.0"],"padding":["24.1"],"定义在分配多余空间之前":["25.0"],"项目占据的主轴空间":["25.0"],"main":["25.0","83.3"],"size":["25.0","108.0","135.0"],"浏览器根据此属性计算主轴是否有多余空间":["25.0"],"默认值为":["25.0"],"项目原本大小":["25.0"],"项目默认沿主轴排列":["26.0"],"多根轴线的对齐方式":["26.1"],"如果只有一根轴线":["26.1"],"不起作用":["26.1"],"和交叉轴的起点对齐":["26.1"],"和交叉轴终点对齐":["26.1"],"和交叉轴的中点对齐":["26.1"],"可以通过":["27.0"],"js":["27.0","62.1","80.9","94.3"],"操作":["27.0","62.1"],"插入":["27.0"],"标签来改变样式":["27.0"],"也能解决这个问题":["28.0"],"当然将父元素设置为":["28.0"],"是最简单的方法":["28.0"],"第四种情况":["28.0"],"是没有内容的元素":["28.0"],"自身的":["28.0"],"即相对于浏览器窗口":["29.0"],"vw":["30.0"],"通常用于创建动画":["31.0"],"游戏和交互式图形":["31.0"],"如果需要创建可伸缩的图形或需要处理文本或样式的图形":["31.0"],"应该适用":["31.0"],"keyframes定义动画序列":["32.0"],"可以设置动画执行的次数":["32.0"],"父元素设置为绝对定位":["33.0"],"左边元素设置为":["33.0"],"右边元素设置为绝对定位":["33.0"],"左边定位为":["33.0"],"其余方向为":["33.0"],"用于创建一些不在文档树中的元素":["34.0"],"并为其添加样式":["34.0"],"z":["35.0"],"index":["35.0","83.3","120.0"],"负值":["35.0"],"将层级放到底部":["35.0"],"被覆盖":["35.0"],"相当于隐藏了":["35.0"],"为":["36.0","45.0"],"2height":["36.0"],"文本垂直居中设置":["36.0"],"接口合并":["37.0"],"link":["38.0","91.10"],"ref":["38.0"],"preload":["38.0"],"将样式提前预加载":["38.0"],"确保在页面渲染之前样式表已经下载完毕":["38.0"],"则会导致某些帧在显示器刷新之后才能呈现":["39.0"],"orient":["40.0"],"display":["41.0"],"content":["41.0","73.4","86.0"],"align":["41.0"],"解决高度塌陷的问题就叫做清除浮动":["43.0"],"bfc":["43.1"],"布局规则":["43.1"],"给父元素添加":["43.1"],"剩下的就是一个三角形":["44.0"],"盒子模型":["45.0"],"指定":["45.0"],"之间产生间隔":["46.0"],"字体是继承属性":["46.1"],"所以在默认情况下":["46.1"],"子元素的文本内容会根据父元素的字体大小来渲染":["46.1"],"如果父元素的字体大小不设置为":["46.1"],"兄弟选择器":["47.0"],"通配符选择器":["47.0"],"继承":["47.1"],"true":["48.0","67.8","106.0"],"时为捕获":["48.0"],"属性的脚本":["49.0"],"它们的执行顺序是不确定的":["49.0"],"因为它们可能在下载完成后立即执行":["49.0"],"而下载速度快慢不一":["49.0"],"导致顺序混乱":["49.0"],"download":["50.0"],"属性":["50.0","94.7"],"email":["51.0"],"number":["51.0"],"url":["51.0","73.1","91.1"],"等表单类型":["51.0"],"浏览器兼容问题":["52.0"],"搜索引擎的检索程序无法解读这种页面":["52.0"],"text":["53.0"],"id":["53.0","100.1"],"不同":["54.0"],"会在页面加载时立即下载资源":["54.0"],"而不是在后台异步加载":["54.0"],"属性的值请求相应的资源":["55.0"],"如果使用":["55.0"],"来引入":["55.0"],"文件":["55.0","98.3"],"会并行下载资源而且不会停止对当前文档的处理":["55.0"],"close":["56.1"],"window":["56.2","66.5","95.21"],"addeventlistener":["56.2"],"event":["56.2"],"console":["56.2"],"btn":["56.3"],"value":["56.3","116.0","120.0"],"提交":["56.3"],"从":["57.1"],"html5":["57.1","79.0"],"可以看出":["57.1"],"标准是倾向于以语义化的方式构建网页的":["57.1"],"比如新增了":["57.1"],"header":["57.1","72.5"],"footer":["57.1"],"视频等":["57.2"],"abbr":["57.2"],"缩写词":["57.2"],"address":["57.2"],"模块化":["59.0"],"引入了模块化的概念":["59.0"],"提供了更好的代码组织和模块复用的方式":["59.0"],"迭代器和生":["59.0"],"成器":["59.0"],"vue":["60.0","90.1","94.1"],"nexttick1":["60.0"],"nexttick":["60.0"],"的源码实现":["60.0"],"优先级判断":["60.0"],"总结就是":["60.0"],"这里优先使用":["60.0"],"因为根据":["60.0"],"与浏览器更新渲染时机":["60.0"],"对于settimeout中的函数":["61.0"],"存在隐式绑定的丢失":["61.0"],"也就是当讲函数作为参数传递的时候":["61.0"],"会被隐式赋值":["61.0"],"回调函数丢失this绑定":["61.0"],"所以settimeout中函数内的this指向window":["61.0"],"name":["61.0"],"通过设置事件对象的":["62.0"],"returnvalue":["62.0"],"拖拽一个图片到浏览器会自动打开":["62.1"],"点击表单的提交按钮会提交表单":["62.1"],"事件委托":["62.1"],"在":["62.1","72.5","80.3","94.12"],"中性能优化的一个主要思想就是减少":["62.1"],"const":["63.3","130.0","135.0"],"声明变量":["63.3","63.6"],"只能在块级作用域中访问":["63.4"],"不能修改":["63.4"],"这种由多个执行上下文的变量对象构成的链表就叫作用域链":["63.5"],"第三个参数":["63.6"],"将作为":["63.6"],"的参数":["63.6"],"let":["63.6"],"具有块级作用域":["63.6"],"而不是函数作用域":["63.6"],"在每次迭代的时候都会创建一个新的变量":["63.6"],"而不是共享一个全局变量":["63.6"],"当循环执行的时候":["63.6"],"这个查找的路线就是原型链":["64.1"],"一个对象的":["64.3"],"指向其构造函数的":["64.3"],"并将其回收":["65.1"],"释放内存":["65.1"],"垃圾收集后可能会造成大量的内存碎片":["65.2"],"this":["66.0","124.1"],"等信息":["66.0"],"对于每个执行上下文":["66.1"],"都有变量对象":["66.1"],"作用域链":["66.1"],"函数每调用一次就会产生一个新的执行上下文环境":["66.2"],"控制流程到达当前栈中的下一个上下文中":["66.3"],"一旦所有代码都执行完毕":["66.3"],"函数引用":["66.4"],"执行其它代码":["66.4"],"在浏览器中":["66.5"],"在使用之前就需要确认其变量数据类型的语言":["67.0"],"数学函数":["67.1"],"math":["67.1","143.0"],"正则对象":["67.1"],"regexp":["67.1"],"所以":["67.2","67.3","80.2","83.6"],"keys":["67.3"],"都是获取不到的":["67.3"],"构造函数来创建":["67.4"],"访问对象上不存在的属性或者没有定义的变量":["67.5"],"函数定义了形参":["67.5"],"但是调用的时候":["67.5"],"没有传递实参":["67.5"],"但是":["67.6"],"表示为全零":["67.6"],"原始类型的数据直接完整地复制变量值":["67.7"],"对象数据类型的数据则是复制引用地址":["67.7"],"基于原型链和构造函数":["67.8"],"但是不能检测基本数据类型":["67.8"],"prototype":["67.8"],"es5":["67.9","155.12"],"新增的":["67.9"],"isarray":["67.9"],"false":["67.10"],"json":["67.10","98.3"],"stringfy":["67.10"],"运算之后再转换为小数":["67.11"],"tofixed":["67.11"],"控制小数点后的位数":["67.11"],"不会进行数据类型的转换":["67.12"],"这种方法对于判断":["67.12"],"nan":["67.13"],"return":["67.15","98.1","131.0","140.0","146.0","147.0"],"无法解析":["67.16"],"返回":["67.16"],"null":["67.17","109.0","148.0"],"除外":["67.17"],"不接受其他类型的值作为健名":["67.17"],"健名所指向的对象":["67.17"],"不计入垃圾回收机制":["67.17"],"监听请求":["68.0"],"接受响应":["68.0"],"onreadysatechange":["68.0"],"function":["68.0"],"if":["68.0","91.2","109.0","110.1","110.2","124.0","128.0","141.0"],"readysate":["68.0"],"请求":["68.1"],"提供了更多的功能和选项":["68.1"],"同时保证较好的服务质量":["69.0"],"作用":["69.0"],"使用户就近获取所需内容":["69.0"],"降低网络拥塞":["69.0"],"提高用户访问响应速度和命中率":["69.0"],"原理":["69.0"],"最简单的":["69.0"],"网络由一个":["69.0"],"dns":["69.0"],"服务器和几台缓存服务器组成":["69.0"],"而工作的核心就是缓存服务器":["69.0"],"它记录了用户所需内容":["69.0"],"而且离用户较近":["69.0"],"服务器返回":["70.0"],"请求进行缓存":["71.0"],"请求会修改服务器上的资源":["71.0"],"是不安全的":["71.0"],"多次提交会创建多个资源":["71.0"],"默认端口":["72.0"],"将信息加密":["72.1"],"使得交易信息不能被获取":["72.1"],"通过校验机制":["72.1"],"客户端和服务端根据约定的加密方法":["72.3"],"使用前面的三个随机数":["72.3"],"生成":["72.3"],"对话密钥":["72.3"],"不过前提是得解决双方都能安全的拿到这把对称密钥":["72.4"],"这时候就可以里用非对称密钥加密来传输这把对称密钥":["72.4"],"因为我们知道非对称密钥加密的优点就是能保证传输的内容是安全的":["72.4"],"所以它的好处是即保证了对称密钥能在双方之间安全的传输":["72.4"],"又能使用对称加密方式进行通信":["72.4"],"这比单纯的使用非对称加密通信快了很多":["72.4"],"以此来解决了":["72.4"],"中内容可能被窃听的问题":["72.4"],"混合加密的缺点":["72.4"],"request":["72.5"],"uri":["73.1"],"状态码":["73.1"],"内容很容易被窃取":["73.2"],"但是服务器必须按照接收请求的顺序发送对这个管道化请求的响应":["73.3"],"如果服务端在处理":["73.3"],"请求耗时比较长":["73.3"],"就会导致后续的请求的处理都会被堵塞":["73.3"],"这就是":["73.3"],"队头堵塞":["73.3"],"代码文件中会有很多换行符或空格":["73.4"],"目的是为了更好的可读性":["73.4"],"但是机器执行的时候不需要这些符合":["73.4"],"所以可以把这些多余的字符去除":["73.4"],"就是常见的无损压缩":["73.4"],"客户端也支持":["73.4"],"客户端会在请求中提高头部":["73.4"],"accept":["73.4"],"encoding":["73.4","74.0"],"字段告知服务器支持的压缩算法":["73.4"],"服务器从中选择一个服务器支持的合适的压缩算法":["73.4"],"使用这个算法对代码进行压缩":["73.4"],"通过响应头中的":["73.4"],"字段告诉客户端当前资源使用的压缩算法":["73.4"],"服务器应该选择压缩效率更高的":["73.4"],"br":["73.4"],"压缩算法":["73.4"],"有损压缩":["73.4"],"构成":["73.6"],"一个":["73.6"],"可以由多个":["73.6"],"报文构成":["73.6"],"当":["73.6","83.12","95.16"],"实现":["73.6"],"个并发":["73.6"],"时":["73.6","83.12"],"只需要建立一次":["73.6"],"而":["73.6","76.8","93.4"],"需要建立":["73.6"],"每个":["73.6"],"连接都要经过":["73.6"],"本次数据是什么格式":["74.0"],"实现访问控制功能":["75.0"],"集群":["75.0"],"通过集群功能":["75.0"],"实现多台服务器之间的动态负载均衡":["75.0"],"传输加密":["75.0"],"支持多种对称和非对称加密算法":["75.0"],"保证用户信息在传输过程中不被窃取和篡改":["75.0"],"为了兼容多种设备":["76.0"],"就协商出了一套通用的网络协议":["76.0"],"字节流":["76.1"],"网络层":["76.2"],"完成实际的传输功能":["76.2"],"最常使用的是":["76.2"],"协议":["76.2"],"层将传输层的报文作为数据部分":["76.2"],"加上":["76.2"],"包头组成":["76.2"],"表示希望建立连接":["76.3"],"fin":["76.3"],"来负责":["76.4"],"工作在传输层":["76.4"],"将服务端的":["76.5"],"作为确认应答号":["76.5"],"最后把报文发给服务端":["76.5"],"这次报文可以携带客户到服务端的数据":["76.5"],"之后客户端处于":["76.5"],"established":["76.5"],"报文之后":["76.6"],"就处于关闭连接了":["76.6"],"处于":["76.6"],"服务端在收到客户端断开连接":["76.6"],"报文后":["76.6"],"是加密的":["76.7"],"只有服务器能够解密":["76.7"],"里面包含了本次会话的信息":["76.7"],"比如对话秘钥和加密方法等":["76.7"],"这样不管我们的请求是否转移到其他的服务器上":["76.7"],"当服务器将":["76.7"],"对多":["76.8"],"的首部较大为":["76.8"],"字节":["76.8"],"只有":["76.8"],"用于http分块下载或断点续传":["77.1"],"表示响应返回的body数据不是资源的全部":["77.1"],"not":["77.2"],"modified":["77.2"],"表示资源未修改":["77.2"],"found":["77.3"],"请求的资源在服务器上找不到或不存在":["77.3"],"表示服务器当前很忙":["77.4"],"称为":["78.0"],"预检请求":["78.0"],"该请求的方法是":["78.0"],"是":["79.0"],"定义的一个新协议":["79.0"],"与传统的":["79.0"],"协议不同":["79.0"],"该协议允许由服务器主动的向客户端推送信息":["79.0"],"缓存分为强缓存和协商缓存":["80.0"],"强缓存的优先级高于协商缓存":["80.0"],"也可以被代理服务器缓存":["80.1"],"如果设置了":["80.1"],"则只能被浏览器缓存":["80.1"],"为默认值":["80.1"],"一般情况下":["80.1"],"不需要单独设置":["80.1"],"因为一般情况下会同时写":["80.1"],"这就表明是可以被浏览器和代理服务器缓存的":["80.1"],"no":["80.1"],"store":["80.1","95.16","95.21"],"就是不同的":["80.2"],"能精准的感知文件的变化":["80.2"],"当首次请求的时候":["80.2"],"会在响应头里获取到一个最初的标识字符串":["80.2"],"那么在下一次请求的时候":["80.2"],"请求头中就会带有一个值相同的":["80.2"],"名为":["80.2"],"none":["80.2"],"match":["80.2"],"的字符串供服务端比对了":["80.2"],"install":["80.3"],"active":["80.3"],"working":["80.3"],"一旦被":["80.3"],"将始终存在":["80.3"],"之间切换":["80.3"],"server":["80.3"],"会带来巨大的性能浪费":["80.5"],"同一个域名下的所有请求":["80.5"],"都会携带":["80.5"],"10m":["80.7"],"只位于浏览器端":["80.7"],"往往被用来存储静态资源":["80.9"],"就是":["80.9","119.2"],"documentelement":["81.0"],"clientheight":["81.0"],"另一个是元素距离可视区域顶部的高度":["81.0"],"getclientrects":["81.0"],"只执行最后一次":["81.1"],"加载完":["82.0"],"之后还需要把这部分":["82.0"],"代码在浏览器上跑一遍":["82.0"],"这一切发生在用户点击了链接之后发生的事":["82.0"],"在这个过程结束之前":["82.0"],"树和":["82.1"],"结合":["82.1"],"得到渲染树":["82.1"],"布局渲染树":["82.1"],"从根节点递归调用":["82.1"],"计算每一个元素的大小":["82.1"],"位置等":["82.1"],"默认会阻塞浏览器":["82.2"],"浏览器必须等待当前":["82.2"],"脚本执行完毕才会去继续做其它的事情":["82.2"],"async":["82.2"],"模式下":["82.2"],"不会阻塞浏览器做任何其它的事情":["82.2"],"加载是异步的":["82.2"],"当它加载结束":["82.2"],"脚本会立即执行":["82.2"],"不能保证脚本的执行顺序":["82.2"],"避免逐条改变样式":["82.3"],"使用类名去合并样式":["82.3"],"离线化":["82.3"],"先把元素":["82.3"],"优化有两个大方向":["83.0"],"减少请求次数和减少单次请求所花费的时间":["83.0"],"主要通过":["83.0"],"这样至少可以将":["83.2"],"的工作效率提升两倍":["83.2"],"当然":["83.2"],"mode":["83.3"],"production":["83.3"],"编译入口":["83.3"],"src":["83.3","95.25"],"目标文件":["83.3"],"只需要把":["83.4"],"laoder":["83.4"],"的配置转移到":["83.4"],"bugcomponent":["83.5"],"default":["83.5"],"bug":["83.5"],"route":["83.5"],"path":["83.5"],"核心就是":["83.5"],"的性能不是无限的":["83.6"],"如果存在大量的压缩需求":["83.6"],"服务器也是扛不住的":["83.6"],"如果服务器慢下来了":["83.6"],"用户还是要等":["83.6"],"如果一个图片格式对应的二进制位数有":["83.7"],"n":["83.7"],"个":["83.7"],"那么它就可以呈现":["83.7"],"文件体积也不会太大":["83.8"],"但是也存在一定的缺陷":["83.8"],"当处理矢量图形和":["83.8"],"logo":["83.8"],"等线条感较强":["83.8"],"去处理较复杂的图片":["83.9"],"所有会优先选择":["83.9"],"为后缀的独立文件":["83.10"],"使得":["83.10"],"文件可以被非常多的工具读取和修改":["83.10"],"的时间开销":["83.11"],"和节省掉的":["83.11"],"请求开销相比":["83.11"],"可以忽略不计":["83.11"],"此时才能体现出优势":["83.11"],"什么时候才会用":["83.11"],"满足以下条件":["83.11"],"字段包含":["83.12"],"image":["83.12"],"referer":["84.0"],"hash":["85.0"],"掉密码和敏感的信息":["85.0"],"防护原理":["85.0"],"使用参数化查询或预编译语句":["85.0"],"头部中的":["86.0"],"ssl":["87.0"],"但是将数据解密必须使用私钥解密":["87.1"],"私有只有分发公钥的一方才知道":["87.1"],"因为公钥是公开的":["87.2"],"拥有对应公钥的黑客可以用这个公钥进行解密得到里面的信息":["87.2"],"公钥中没有包含服务器的信息":["87.2"],"对传输的数据进行对称加密":["87.3"],"把对称加密后的内容传递给客户端":["87.3"],"整个过程中":["87.4"],"由于缺少了证书的验证过程":["87.4"],"虽然使用了":["87.4"],"刷屏或在论坛上发布大量无意义的帖子":["89.0"],"watcher":["90.0"],"存入到对应属性的依赖中":["90.0"],"手动注销":["90.1"],"用于观察和监听页面上的":["90.1"],"实例":["90.1"],"用于依赖发生变化时":["90.2"],"触发属性重新计算":["90.2"],"若出现当前":["90.2"],"计算属性嵌套其他":["90.2"],"同时也会引入判断机制":["90.3"],"确保在多个属性更新时回调函数仅触发一次":["90.3"],"避免性能浪费":["90.3"],"params":["91.2"],"polypill":["91.3"],"插件解决":["91.3"],"当调用他们修改浏览器历史记录栈后":["91.4"],"虽然当前":["91.4"],"改变了":["91.4"],"但浏览器不会刷新页面":["91.4"],"这就为单页应用前端路由":["91.4"],"提供了基础":["91.4"],"路由模式的实现主要基于存在下面几个特性":["91.4"],"repalcestate":["91.4"],"两个":["91.4"],"api":["91.4","94.9","95.25"],"来操作实现":["91.4"],"的变化":["91.4"],"内部提供导航方法":["91.5"],"navigate":["91.5","91.8"],"用户点击之后实际调用的是该方法":["91.5"],"此方法最终会修改响应式的路由变量":["91.5"],"然后重新去":["91.5"],"routes":["91.5"],"匹配出数组结果":["91.5"],"从触发事件的监听上来说":["91.6"],"replacestate":["91.6"],"不能被":["91.6"],"并全局监听":["91.7"],"控制的范围更精确了":["91.8"],"用户的任何导航行为都会走":["91.8"],"方法":["91.8"],"内部有个":["91.8"],"webpackchunkname":["91.9"],"group":["91.9"],"user":["91.9"],"view":["91.10"],"分别实现页面跳转和内容显示":["91.10"],"进行遍历":["92.0"],"支持数组":["92.0"],"不需要对数组的方法进行重载":["92.0"],"object":["92.1"],"defineproperty":["92.1"],"的回调函数会接收新值和旧值作为参数":["92.2"],"可以根据需要进行比较和处理":["92.2"],"减少了":["92.3"],"指向不明的情况":["92.3"],"如果是小型组件":["92.3"],"可以继续使用":["92.3"],"更好的代码组织":["92.4"],"更好的逻辑抽离":["92.4"],"其他沿用":["92.5"],"不能放在循环":["92.6"],"判断":["92.6"],"里面":["92.6"],"在兼顾":["92.7"],"vue2":["92.7"],"的":["92.7"],"options":["92.7"],"的同时还推出了":["92.7"],"过程":["92.8"],"打包时更好的支持":["92.8"],"tree":["92.8"],"shaking":["92.8"],"把对象数据":["92.9"],"分解":["92.9"],"扩散":["92.9"],"前端":["92.9"],"针对的是响应式对象":["92.9"],"封装的":["92.9"],"非普通对象":["92.9"],"可以照常使用":["92.10"],"从而方便编码":["93.1"],"另外":["93.1"],"会返回":["93.1"],"promise":["93.1"],"实例便于处理内部异步结果":["93.1"],"实现上":["93.1"],"首选":["93.2"],"方法会被所有":["93.2"],"commit":["93.2","95.16"],"行为触发":["93.2"],"因此还需要判断":["93.2"],"类似的插件有":["93.3"],"persist":["93.3"],"persistedstate":["93.3"],"都推荐使用":["93.4"],"ts":["93.4"],"来编写":["93.4"],"这个时候使用":["93.4"],"就非常合适了":["93.4"],"无需再创建各个模块嵌套了":["93.4"],"中如果数据过多":["93.4"],"我们通常分模块来进行管理":["93.4"],"稍显麻烦":["93.4"],"方法中可以获取用户传入":["93.5"],"mutations":["93.5"],"并执行它":["93.5"],"这样可以按用户提供的方法修改状态":["93.5"],"在数据变动时发布消息给订阅者":["94.0"],"触发相应的监听回调":["94.0"],"的返回值是":["94.1"],"的虚拟":["94.1"],"而是将这":["94.3"],"次更新的":["94.3"],"diff":["94.3"],"内容保存到本地的一个":["94.3"],"对象中":["94.3"],"最终将这个":["94.3"],"缺陷是不能检索索引更改和数组长度的更改":["94.4"],"数组中的元素也会被再次观测":["94.4"],"比如有一个":["94.6"],"ul":["94.6"],"其中有三个":["94.6"],"li":["94.6"],"checkbox":["94.6"],"包裹":["94.6"],"当选择一个复选框时":["94.6"],"可以点击删除按钮将其删除":["94.6"],"如果不设置":["94.6"],"函数触发依赖收集":["94.7"],"内部还会给所有的响应式数据增加":["94.7"],"dep":["94.7"],"让属性记录当前的":["94.7"],"过程是一个递归过程":["94.8"],"遵循深度优先":["94.8"],"同层比较的策略":["94.8"],"以":["94.8"],"vue3":["94.8"],"为例":["94.8"],"首先判断两个节点是否为相同同类节点":["94.8"],"不同则删除重新创建":["94.8"],"如果双方都是文本则更新文本内容":["94.8"],"如果双方都是元素节点则递归更新子元素":["94.8"],"同时更新元素属性":["94.8"],"从而作出响应":["94.9"],"这种机制很好的解决了数据响应化的问题":["94.9"],"但在实际使用中也存在一些缺点":["94.9"],"比如初始化时的递归遍历会造成性能损失":["94.9"],"新增或删除属性时需要用户使用":["94.9"],"set":["94.9"],"delete":["94.9","121.0"],"这样特殊的":["94.9"],"才能生效":["94.9"],"对于":["94.9"],"es6":["94.9"],"中新产生的":["94.9"],"map":["94.9"],"这些数据结构不支持等问题":["94.9"],"为了解决这些问题":["94.9"],"vnode":["94.10"],"转换为":["94.10"],"去重之后放到队列中":["94.11"],"然后通过":["94.11"],"内部":["94.12"],"之所以能够让我们看到":["94.12"],"更新后的结果":["94.12"],"是因为我们传入的":["94.12"],"会被添加到队列刷新函数":["94.12"],"flushschedulerqueue":["94.12"],"方法的语法糖":["94.13"],"复杂度的问题":["94.14"],"只比较同级不考虑跨级问题":["94.14"],"比较新旧虚拟节点":["95.0"],"找到变化再进行更新":["95.0"],"会影响到所有的实例":["95.1"],"所以为了保证组件在不同的实例之间":["95.1"],"不冲突":["95.1"],"都能控制":["95.2"],"元素在页面的显示":["95.2"],"开销更大的":["95.2"],"直接操作":["95.2"],"执行的时候":["95.3"],"调用的变量还不存在":["95.3"],"就会导致异常":["95.3"],"如果一定要一起使用":["95.3"],"可以把":["95.3"],"domname":["95.4"],"来获取":["95.4"],"v":["95.5"],"cloak":["95.5"],"disply":["95.5"],"action":["95.6"],"前进后退路由难管理":["95.7"],"seo":["95.7"],"难度大":["95.7"],"怎么解决":["95.7"],"ssr":["95.7"],"开启":["95.8"],"当组件被移除时":["95.9"],"的中还运用了":["95.9"],"实现非父子组件通信":["95.10"],"算法":["95.11"],"组件级":["95.11"],"会以组件的数据为准":["95.12"],"有很多缺陷如":["95.12"],"命名冲突":["95.12"],"进行更新的时候":["95.13"],"会通过数据绑定更新到":["95.13"],"业务逻辑层":["95.13"],"需要什么数据":["95.13"],"要提供这个数据":["95.13"],"将来":["95.14"],"的时候":["95.14"],"如果发现是一个":["95.14"],"无状态":["95.15"],"没有生命周期":["95.15"],"所以渲染性能要好于普通组件":["95.15"],"函数式组件结构比较简单":["95.15"],"代码结构更清晰":["95.15"],"使用场景":["95.15","95.19"],"一个简单的展示组件":["95.15"],"作为容器组件使用":["95.15"],"应用的核心就是":["95.16"],"仓库":["95.16"],"基本上就是一个容器":["95.16"],"它包含着你的应用中大部分的状态":["95.16"],"state":["95.16","95.21"],"的状态存储是响应式的":["95.16"],"组件从":["95.16"],"中读取状态的时候":["95.16"],"若":["95.16"],"中的状态发生变化":["95.16"],"那么相应的组件也会相应地得到高效更新":["95.16"],"改变":["95.16"],"中的状态的唯一途径就是显式地提交":["95.16"],"也可以用于组件扩展":["95.17"],"组件选项中还有一个不太常用的选项":["95.17"],"最好使用这个":["95.18"],"的值来定义一个计算属性":["95.18"],"实践中如果确实想要改变父组件属性应该":["95.18"],"全局注册":["95.19"],"与":["95.19"],"局部注册":["95.19"],"插件的注册通过":["95.19"],"的方式进行注册":["95.19"],"安装":["95.19"],"第一个参数为插件的名字":["95.19"],"第二个参数是可选择的配置项":["95.19"],"component":["95.19"],"是用来构成你的":["95.19"],"app":["95.19"],"update":["95.20"],"stroe":["95.21"],"里":["95.21"],"这样":["95.21"],"在客户端挂载到":["95.21"],"之前":["95.21"],"可以直接从":["95.21"],"里取数据":["95.21"],"首屏的动态数据通过":["95.21"],"initial":["95.21"],"发送到客户端":["95.21"],"的实现":["95.21"],"主要就是把":["95.21"],"的组件输出成一个完整":["95.21"],"renderer":["95.21"],"就是干这事的":["95.21"],"直接删除了数组":["95.22"],"改变了数组的键值":["95.22"],"会以":["95.24"],"的方式调用":["95.24"],"之类的公共文件":["95.25"],"会被打包到":["95.25"],"dist":["95.25"],"根目录下":["95.25"],"用来放项目代码文件":["95.25"],"的一些接口配置":["95.25"],"assets":["95.25"],"用来放一些":["95.25"],"之类的静态资源":["95.25"],"虚拟":["96.0"],"重新渲染之前被触发":["96.0"],"可以在当前阶段进行数据更改":["96.0"],"不会造成重新渲染":["96.0"],"更新完成之后发生":["96.0"],"当前阶段":["96.0"],"已完成更新":["96.0"],"需要注意的是在此期间应该避免更改数据":["96.0"],"因为可能会导致无限循环的更新":["96.0"],"实例销毁之前发生":["96.0"],"在当前阶段实例完全可以被使用":["96.0"],"可以在这个阶段进行清除定时器等工作":["96.0"],"比如地图库":["96.1"],"图表库":["96.1"],"可以在这里销毁这些库的实例":["96.1"],"销毁过程":["96.2"],"beforedestroy":["96.2"],"准备好才执行一些操作":["96.3"],"generator":["97.0"],"代码":["98.0"],"加载并且压缩图片文件":["98.3"],"babel":["98.3"],"在特定的时间对资源做处理":["99.1"],"分为同步和异步的钩子":["99.2"],"异步钩子必须执行对应的回调":["99.2"],"module":["99.2"],"最终生成一个可以在浏览器加载执行的js文件":["100.0"],"同时每个模块生成一个唯一的":["100.1"],"并将解析过的":["100.1"],"模块缓存":["100.1"],"起来":["100.1"],"如果其他地方也引入该模块":["100.1"],"就无需重新解析":["100.1"],"最后根据依赖关系生成依赖图谱":["100.1"],"根据文件内容来定义":["101.0"],"文件内容不变":["101.0"],"节省开发时间":["102.0"],"提升开发体验":["102.0"],"当文件变化后":["102.1"],"重新编译":["102.1"],"编译结束后":["102.1"],"通知浏览器请求变化的资源":["102.1"],"同时将新生成的":["102.1"],"responsetext":["103.0"],"else":["103.0","104.0","110.0","119.4","122.0","131.0","139.2","147.0"],"bind返回的函数作为普通函数被调用时":["104.0"],"contextf":["104.0"],"input":["105.0"],"reduceright":["105.0"],"result":["105.0"],"放到任务队列尾部":["107.0"],"eat":["107.0"],"如果缓存已满":["108.0"],"返回该对象":["109.0"],"typeof":["109.0"],"instanceof":["110.0"],"假如返回值为普通值":["110.0"],"resolve传递出去":["110.0"],"同理":["110.0"],"判断rejectcallback事件的返回值":["110.0"],"reject传递出去":["110.0"],"输出结果的顺序和promises的顺序一致":["110.1"],"settimeout":["110.2"],"执行回调":["111.0"],"clearinterval":["111.0"],"清除定时器":["111.0"],"调用on方法":["115.0"],"将fn添加为回调函数":["115.0"],"触发事件":["115.0"],"emit":["115.0"],"rest":["115.0"],"如果存在":["115.0"],"依次调用所有回调函数":["115.0"],"foreach":["116.0"],"key":["116.0","135.0"],"setattribute":["116.0"],"pop":["117.0","118.0"],"如果":["119.1"],"对应元素不是目前的头部元素":["119.1"],"则交换两者":["119.1"],"循环让位":["119.2"],"最后得到的":["119.2"],"交换当前元素和左边界元素":["119.3"],"push":["119.4","132.0"],"若其中一个子数组首先被合并完全":["119.4"],"则直接拼接另一个子数组的剩余部分":["119.4"],"使用filter":["120.0"],"filter":["120.0"],"大于等待时间就把":["124.0"],"设置为当前时间并执行函数":["124.0"],"apply":["124.1"],"end":["124.1","127.0"],"翻转从":["127.0"],"到":["127.0"],"的字符":["127.0"],"length":["128.0","134.0","141.0"],"res":["130.0"],"for":["130.0"],"num":["130.0"],"get":["131.0"],"num3":["133.0"],"num4":["133.0"],"target":["133.0"],"parseint":["134.0"],"val1":["135.0"],"val2":["135.0"],"while":["136.0","138.0"],"直到找到元素或者确定不存在":["139.0"],"继续查找右半部分":["139.1"],"重复":["139.1"],"min":["143.0"],"返回要删除的节点":["146.0"],"获取链表长度":["146.0"],"flag":["147.0"],"next":["151.0"],"d":["155.0"],"打包后的文件名":["155.1"],"resolve":["155.1"],"使用自定义模板":["155.3"],"可选":["155.3"],"filename":["155.3"],"use":["155.4"],"资源":["155.5"],"执行顺序":["155.7"],"默认从右向左":["155.7"],"转化成":["155.12"],"outputpath":["155.13"]},{"1":["8.24","8.27"],"2":["83.7"],"4":["38.0"],"5":["102.1"],"6":["100.1"],"8":["76.8"],"11":["59.0"],"200":["68.0"],"304":["68.0"],"404":["91.4"],"返回值通过回调来获取":["1.3"],"脚本":["2.0"],"界面渲染":["2.0"],"setinterval":["2.0"],"posemessage":["2.0"],"messagechannel":["2.0"],"setimmediate":["2.0"],"常见微任务":["2.0"],"then":["2.0","15.3"],"mutationobserver":["2.0"],"同一页面在不同类型的设备上":["7.0"],"交互方式应该是符合习惯的":["7.0"],"设置负值字体间距将文本倒序":["7.1"],"适用于文言文":["7.1"],"margin":["7.1"],"left":["7.1"],"排版左重右轻列表":["7.1"],"横行布局时":["7.1"],"最后一个元素通过设置":["7.1"],"实现向右对齐":["7.1"],"适用于右侧带图标的导航栏":["7.1"],"换行":["8.4"],"空格会产生元素间隔":["8.4"],"兼容性好":["8.5"],"不管是块级还是行内都能实现":["8.5"],"缺点":["8.5"],"代码较多":["8.5"],"脱离文档流":["8.5"],"兼容性不好":["8.5"],"需要知道高度的值":["8.8"],"的值":["8.9"],"这个尚未搞清楚":["8.10"],"应该是":["8.10"],"使":["8.10"],"上下边界无限延伸至剩余空间并平分了":["8.10"],"content":["8.11","42.0"],"middle":["8.13"],"50px":["8.14"],"self":["8.17","120.0"],"大于等于":["8.19"],"left的宽度":["8.19"],"hidden":["8.20","8.26"],"触发bfc达到自适应":["8.20"],"0f0":["8.21","8.23","8.27"],"一列不定":["8.22"],"一列自适应":["8.22"],"盒子宽带随着内容增加或减少发生变化":["8.22"],"另一个盒子自适应":["8.22"],"均分":["8.24","8.27"],"parent剩余的部分":["8.24"],"触发":["8.26","43.1"],"bfc":["8.26"],"parent剩余的部分达到自适应":["8.27"],"之后真正的":["11.0"],"事件阻止掉":["11.0"],"还可以解决穿透问题":["11.0"],"以及":["12.0"],"e":["12.0"],"tag":["12.0"],"都是不错的":["12.0"],"不过要注意一个问题":["12.0"],"就是文件更新后":["12.0"],"你要避免缓存而带来的影响":["12.0"],"其中一个解决防范是在文件名字后面加一个版本号":["12.0"],"减少":["12.0"],"http":["12.0"],"请求数":["12.0"],"将多个":["12.0"],"文件合并":["12.0"],"或者是干脆直接写成内联样式":["12.0"],"内联样式的一个缺点就是不能缓存":["12.0"],"spidermonkey":["14.0"],"firefox":["14.0"],"发送请求后":["15.1"],"结果被浏览器拦截了":["15.1"],"iloveyou":["15.3"],"参数":["15.3"],"console":["15.3","68.0"],"log":["15.3","56.2","68.0"],"预检请求":["15.4"],"option":["15.4","78.0"],"方法":["15.4","91.1"],"通过这个请求来获取服务端是否允许跨域请求":["15.4"],"节点的样式":["16.0"],"创建布局树":["16.0"],"并计算元素的布局信息":["16.0"],"对布局树进行分层":["16.0"],"并生成分层树":["16.0"],"为每个图层生成绘制列表":["16.0"],"并将其提交到合成线程":["16.0"],"合成线程将图层分成图块":["16.0"],"并在光栅化线程池中将图块转换成位图":["16.0"],"合成线程发送绘制图块命令":["16.0"],"drawquad":["16.0"],"给浏览器进程":["16.0"],"浏览器进程根据":["16.0"],"消息生成页面":["16.0"],"并显示到显示器上":["16.0"],"操作系统会回收进程所占用的内存":["17.1"],"进程之间的内容相互隔离":["17.1"],"通过插件进程进行隔离":["17.2"],"保证插件进行奔溃不会对浏览器和页面造成影响":["17.2"],"属性值不为":["19.1"],"visible":["19.1"],"的元素":["19.1"],"阻止它们的边界垂直交叠":["19.2"],"display":["21.0","82.3"],"none":["21.0","82.3","95.5"],"没有什么区别":["21.0"],"媒体查询":["22.0"],"使用硬件加速":["23.0"],"之后":["25.0"],"因为有":["25.0"],"的设置会自动放大或缩小":["25.0"],"和交叉轴两端对齐":["26.1"],"轴线之间的间隔平均分布":["26.1"],"每根轴线两侧的间隔都相等":["26.1"],"轴线占满整个交叉轴":["26.1"],"当空间不足时":["26.2"],"等比例缩小":["26.2"],"basis":["26.2"],"由于":["27.0"],"方法是基于文档的":["27.0"],"无法使用":["27.0"],"的方式插入样式":["27.0"],"发生的重叠":["28.0"],"我们可以通过为其设置":["28.0"],"pa":["28.0"],"dding":["28.0"],"或者高度来解决这个问题":["28.0"],"height":["30.0","36.0"],"视口的高":["30.0"],"如果需要创建动画":["31.0"],"游戏或交互式图形":["31.0"],"不需要触发特定状态即可执行":["32.0"],"top":["33.0"],"bottom":["33.0"],"单冒号":["34.0"],"会生成新的元素":["34.0"],"transform":["35.0"],"scale":["35.0"],"将元素缩放为":["35.0"],"依然占据空间":["35.0"],"不可交互":["35.0"],"line":["36.0"],"使用媒体查询避免不必要的样式加载":["38.0"],"通过媒体查询在适当的条件下加载特定的样式":["38.0"],"避免在不需要的情况下加载不必要的样式":["38.0"],"造成不连续的动画效果":["39.0"],"出现跳帧现象":["39.0"],"skyblue":["41.0"],"flex":["42.0"],"布局":["42.0"],"justify":["42.0"],"或":["43.1","91.4"],"auto":["43.1"],"yellow":["44.1"],"inherit":["45.0"],"时":["45.0"],"会从父元素继承":["45.0"],"由于字体的基线对齐":["46.1"],"子元素之间可能会存在一些额外的空白间隙":["46.1"],"浏览器默认":["47.1"],"false":["48.0","62.0"],"则为冒泡":["48.0"],"它们的执行顺序是按照它们在文档中出现的顺序执行的":["49.0"],"保证了它们之间的顺序性":["49.0"],"变为下载链接":["50.0"],"queryselector":["51.0"],"queryselectorall":["51.0"],"不利于":["52.0"],"seo":["52.0"],"适用于当前页面需要用到的重要资源":["54.0"],"以优化关键资源的加载时间":["54.0"],"这也是为什么建议使用":["55.0"],"方式来加载":["55.0"],"而不是":["55.0"],"import":["55.0"],"的方式":["55.0"],"关闭连接":["56.1"],"newvalue":["56.2"],"页面2":["56.3"],"这些语义标签":["57.1"],"删除了":["57.1"],"big":["57.1"],"font":["57.1"],"这些没有语义的标签":["57.1"],"联系信息":["57.2"],"cite":["57.2"],"标记引用的作者或来源":["57.2"],"引入了迭代器和生成器的概念":["59.0"],"可以通过自定义迭代器来遍历数据集合":["59.0"],"并使用生成器函数来生成迭代器":["59.0"],"管道操作符":["59.0"],"提案阶段的特性":["59.0"],"引入了管道操作符":["59.0"],"可以将表达式的结果作为参数传递给下一个表达式":["59.0"],"简化了函数调用和方法链的写法":["59.0"],"使用微任务":["60.0"],"本次":["60.0"],"轮询就可以获取到更新的":["60.0"],"如果使用宏任务":["60.0"],"要到下一次":["60.0"],"中":["60.0","96.0"],"才能获取到更新的":["60.0"],"domnode":["60.0"],"process":["60.0"],"执行顺序早于微任务":["60.0"],"return":["61.0","109.0","114.0","119.1","119.2","120.0","121.0","126.0","128.0","129.0","133.0","136.0","137.0","141.0","142.0","143.0","145.0","149.0","151.0"],"对于obj":["61.0"],"函数的调用":["61.0"],"它的外层作用域是window":["61.0"],"因为对象obj不属于作用域":["61.0"],"所以会打印window":["61.0"],"第一个this":["61.0"],"name指向的就是调用者obj":["61.0"],"返回的匿名函数是一个箭头函数":["61.0"],"this由外层函数决定":["61.0"],"所以和foo函数的this一样":["61.0"],"指向obj":["61.0"],"来阻止默认事件":["62.0"],"事件委托是利用了事件的冒泡原理实现的":["62.1"],"当我们为最外层的节点添加点击事件":["62.1"],"那么里面的":["62.1"],"ul":["62.1"],"li":["62.1"],"的点击事件会冒泡到最外层节点上":["62.1"],"委托它代为执行事件":["62.1"],"这个变量在块级作用域外无法被访问":["63.3"],"会在每次迭代中创建一个新的块级作用域":["63.6"],"并在这个作用域内声明一个新的变量":["63.6"],"不会污染外部作用域":["63.6"],"所以在每个回调函数中都能访问到正确的":["63.6"],"值":["63.6","94.12"],"函数创建的对象":["64.3"],"该函数":["64.3"],"this":["66.1","96.0","124.0"],"这三个属性":["66.1"],"引擎从当前栈中移除全局执行上下文":["66.3"],"就是全局对象":["66.5"],"日期对象":["67.1"],"date":["67.1"],"数据类型的主要作用就是为对象添加独一无二的属性名":["67.2"],"类型的属性也适合作为对象的私有属性":["67.3"],"使用":["67.5","79.0","85.0","95.8","96.3"],"void":["67.5"],"对表达式求值":["67.5"],"所以误判为对象":["67.6"],"tostring":["67.8"],"call":["67.8","96.0"],"constructor":["67.8"],"支持基本数据类型":["67.8"],"方法判断一个值是否为数组":["67.9"],"然后判断是否等于":["67.10"],"将结果四舍五入到指定的精度":["67.11"],"将相加的结果和右边相减":["67.11"],"如果相减的结果小于一个极小数":["67.11"],"就可以认定结果是相等的":["67.11"],"更准确":["67.12"],"方法同":["67.17"],"get":["67.17"],"status":["68.0"],"responsetxml":["68.0"],"如拦截请求和响应":["68.1"],"转换数据":["68.1"],"取消请求等":["68.1"],"负载较小":["69.0"],"因此提高了服务器响应速度":["69.0"],"实际上":["69.0"],"的工作过程要更复杂":["69.0"],"为了便于理解":["69.0"],"上面只是简述":["69.0"],"我们从用户访问一个":["69.0"],"url":["69.0"],"地址说起":["69.0"],"访问url":["69.0"],"cname指向的cdn专用dns服务器对url解析":["69.0"],"负载均衡设备根据解析的ip地址和内容选择一台缓存服务器":["69.0"],"返回缓存服务器ip地址给用户":["69.0"],"地址给本地服务器":["70.0"],"本地服务器缓存解析结果":["70.0"],"返回解析结果给用户":["70.0"],"不是幂等的":["71.0"],"浏览器一般不会缓存":["71.0"],"请求":["71.0"],"需要向":["72.0"],"ca":["72.0"],"申请数字证书":["72.0"],"保证服务器的身份是可信的":["72.0"],"使得不能篡改通信内容":["72.1"],"通过数字证书保证服务器的合法性":["72.1"],"session":["72.3"],"key":["72.3"],"用来加密接下来的整个对话过程":["72.3"],"混合加密主要是为了解决":["72.4"],"但是它并不能保证数据的完整性":["72.4"],"也就是说在传输的时候数据是有可能被第三方篡改的":["72.4"],"比如完全替换掉":["72.4"],"所以说它并不能校验数据的完整性":["72.4"],"如果需要做到这一点就需要使用到数字签名":["72.4"],"中带上":["72.5"],"后端用同样的算法解密":["72.5"],"头字段每个组成要求都没有被固定死":["73.1"],"允许开发人员自定义和扩展":["73.1"],"所以":["73.3"],"管道解决了请求的队头阻塞":["73.3"],"但是没有解决响应的队头阻塞":["73.3"],"经过有损压缩压缩之后的数据":["73.4"],"解压之后和原始数据不同但是非常相近":["73.4"],"有损压缩主要将次要的数据舍弃":["73.4"],"通过牺牲一些质量来减少数据量":["73.4"],"提高压缩比":["73.4"],"常用于压缩多媒体数据":["73.4"],"比如音视频":["73.4"],"图片":["73.4"],"可以通过":["73.4"],"请求头部中的":["73.4"],"字段中的":["73.4"],"q":["73.4"],"质量因子":["73.4"],"告诉服务器期望的资源质量":["73.4"],"压缩比较高的是":["73.4"],"webp":["73.4"],"格式":["73.4"],"握手":["73.6"],"慢启动以及":["73.6"],"tls":["73.6"],"握手过程":["73.6"],"这些都是很耗时的":["73.6"],"服务器主动推送资源":["73.6"],"客户端发起的请求":["73.6"],"必须使用的是奇数号":["73.6"],"服务器主动的推送":["73.6"],"使用的是偶数号":["73.6"],"服务器在推送资源时":["73.6"],"会通过":["73.6"],"push":["73.6","80.3","91.1","114.0","121.0"],"promise":["73.6","93.5"],"帧传输":["73.6"],"并通过帧中的":["73.6"],"promised":["73.6"],"id":["73.6"],"字段告知客户端":["73.6"],"接下来会在哪个偶数号":["73.6"],"中发送包体":["73.6"],"说明数据的压缩方法":["74.0"],"表示服务器返回的数据使用了什么格式":["74.0"],"不利于重构":["75.0"],"因为涉及到的系统很多":["75.0"],"要重构必须要兼容所有的系统":["75.0"],"可能很耗时":["75.0"],"无人看守桌面":["75.0"],"因为只需要登录一次":["75.0"],"所有的授权的应用系统都可以访问":["75.0"],"可能导致一些很重要的信息泄露":["75.0"],"交由网络接口层":["76.2"],"网络接口层":["76.2"],"在":["76.2"],"报文的前面加上":["76.2"],"mac":["76.2"],"头部":["76.2"],"封装成数据帧发送到网络上":["76.2"],"表示今后不会再有数据发送":["76.3"],"希望断开连接":["76.3"],"服务端接收到应答报文后":["76.5"],"也处于":["76.5"],"至此建立连接":["76.5"],"只有第三次可以携带数据":["76.5"],"并不会立即关闭连接":["76.6"],"而是先发送一个":["76.6"],"包先告诉客户端收到关闭连接的请求":["76.6"],"只有当服务器的所有报文发送完毕之后":["76.6"],"才发送":["76.6"],"报文断开连接":["76.6"],"因此需要四次挥手":["76.6"],"解密以后":["76.7"],"就能够获取上次对话的信息":["76.7"],"就不用重新生成对话秘钥了":["76.7"],"是面向连接的可靠性传输":["76.8"],"是不可靠的":["76.8"],"而是其中的一部分":["77.1"],"重定向已经存在的缓存文件":["77.2"],"也叫做缓存重定向":["77.2"],"暂时无法响应客户端":["77.4"],"通过该请求来查询服务端是否允许跨域请求":["78.0"],"协议的缺点是在服务器端的配置比较复杂":["79.0"],"是一个全双工的协议":["79.0"],"也就是通信双方是平等的":["79.0"],"可以相互发送消息":["79.0"],"在命中强缓存失败的情况下":["80.0"],"才会走协商缓存":["80.0"],"绕开了浏览器":["80.1"],"设置了":["80.1"],"后":["80.1"],"每一次发起请求的时候都不会去询问浏览器的缓存情况":["80.1"],"而是直接向服务端去确认资源是否过期":["80.1"],"就是不使用任何缓存策略":["80.1"],"只允许直接向服务端发送请求":["80.1"],"并下载完整的响应":["80.1"],"优先级高于":["80.2"],"但是":["80.2"],"的生成过程需要服务器付出开销":["80.2"],"会影响服务端的性能":["80.2"],"不能替代":["80.2"],"只是对其的补充":["80.2"],"要求协议必须是":["80.3"],"https":["80.3"],"是指":["80.3"],"http2":["80.3"],"阶段存在的缓存":["80.3"],"有哪些字段":["80.5"],"不和服务器发起通信":["80.7"],"css":["80.9"],"图片等不需要业务服务器进行计算就可以得到的资源":["80.9"],"动态资源就是需要后端实时动态生成的资源":["80.9"],"来获取元素的大小以及相对于视口的位置":["81.0"],"js":["81.0"],"用户始终看不到网页上的内容":["82.0"],"用户一直在等":["82.0"],"但是服务端渲染模式下":["82.0"],"服务器给客户端的已经是一个直接可以拿来呈现给用户的网页":["82.0"],"中间环节早在服务端就帮我们做掉了":["82.0"],"给每个节点所应该出现在屏幕上的精确坐标":["82.1"],"得到基于渲染树的布局渲染树":["82.1"],"绘制渲染树":["82.1"],"遍历渲染树":["82.1"],"每个节点将使用":["82.1"],"ui":["82.1"],"后端层来绘制":["82.1"],"整个过程叫做绘制渲染树":["82.1"],"defer":["82.2"],"的加载是异步的":["82.2"],"执行是被推迟的":["82.2"],"等整个文档解析完成":["82.2"],"被标记了":["82.2"],"的":["82.2","94.9"],"文件才会开始依次执行":["82.2"],"可以保证脚本的执行顺序":["82.2"],"操作完之后再":["82.3"],"block":["82.3"],"webpack":["83.0","91.9"],"去优化":["83.0"],"其它":["83.2"],"原理也一样":["83.2"],"dll相关配置":["83.3"],"dllreferenceplugin":["83.3"],"manifest就是我们第一步中打包出来的json文件":["83.3"],"中即可":["83.4"],"这个方法":["83.5"],"这是一个异步的方法":["83.5"],"在打包时":["83.5"],"会被单独打成一个文件":["83.5"],"只有在我们跳转到这个路由的时候":["83.5"],"这个异步方法的回调才会生效":["83.5"],"才会真正的去获取这个组件的内容":["83.5"],"这就是按需加载":["83.5"],"存在":["83.6"],"压缩操作":["83.6"],"就是在构建的过程中去做一些服务器的工作":["83.6"],"为服务器分压":["83.6"],"种颜色":["83.7"],"颜色对比强烈的图像时":["83.8"],"人为压缩导致的图片模糊会非常明显":["83.8"],"而且不支持透明":["83.8"],"一般用于呈现小的":["83.9"],"logo":["83.9"],"颜色简单且对比强烈的图片或背景":["83.9"],"很灵活":["83.10"],"缺点是渲染成本比较高":["83.10"],"有一定的学习成本":["83.10"],"常用于图标":["83.10"],"图片的实际尺寸很小":["83.11"],"一般小于":["83.11"],"2kb":["83.11"],"图片没有办法以雪碧图的形式和其它小图结合":["83.11"],"图片的更新频率非常低":["83.11"],"不需要重复编码和修改文件内容":["83.11"],"维护成本低":["83.11"],"返回":["83.12"],"格式的图片":["83.12"],"否则返回原图":["83.12"],"头":["84.0"],"orm":["85.0"],"框架或查询构建器":["85.0"],"对用户输入进行输入验证和过滤":["85.0"],"security":["86.0"],"policy":["86.0"],"csp":["86.0"],"所以并不能确保服务器合法的身份":["87.2"],"客户端使用之前生成的随机":["87.3"],"进行解密数据":["87.3"],"但是传输的数据已经被监听":["87.4"],"客户端却无法得知":["87.4"],"保护网站资源免受滥用":["89.0"],"这样数组中对象发生变化时也会通知数据更新":["90.0"],"如果要在数据变化的同时进行异步操作或者是比较大的开销":["90.1"],"那么":["90.1"],"为最佳选择":["90.1"],"计算属性时":["90.2"],"先进行其他的依赖收集":["90.2"],"在初始化时直接调用回调函数":["90.3"],"可以通过在":["90.3"],"created":["90.3"],"阶段手动调用回调函数实现相同的效果":["90.3"],"获取动态参数":["91.2"],"不会触发":["91.4"],"事件":["91.4"],"这时我们需要手动触发页面跳转":["91.4"],"虽然美观":["91.4"],"但是刷新会出现":["91.4"],"需要后端进行配置":["91.4"],"则根据其所处深度":["91.5"],"deep":["91.5"],"在匹配数组结果中找到对应的路由并获取组件":["91.5"],"最终将其渲染出来":["91.5"],"popstate":["91.6"],"事件所监听":["91.6"],"而后面三者可以":["91.6"],"且用户点击浏览器前进后退键时也可以":["91.6"],"guards":["91.8"],"队列按顺序执行用户注册的守卫钩子函数":["91.8"],"如果没有通过验证逻辑则会取消原有的导航":["91.8"],"vue":["91.9"],"可以做":["91.9"],"代码分块":["91.9"],"定义两个全局变量":["91.10"],"route":["91.10"],"组件内可以访问当前路由和路由器实例":["91.10"],"省去了众多":["92.0"],"hack":["92.0"],"减少代码量等于减少了维护成本":["92.0"],"的回调函数只会被执行":["92.2"],"不会传递参数":["92.2"],"也是十分友好的":["92.3"],"更多新功能":["92.4"],"ref":["92.6"],"reactive":["92.6"],"比":["92.6"],"usestate":["92.6"],"难理解":["92.6"],"大大增加了代码的逻辑组织和代码复用能力":["92.7"],"更容易维护":["92.7"],"typescript":["92.7","98.3"],"模块化":["92.7"],"更容易扩展":["92.7"],"独立的响应化模块":["92.7"],"因此整体体积更小":["92.8"],"加载更快":["92.8"],"ssr":["92.8","95.8"],"渲染以字符串方式渲染":["92.8"],"注意":["92.9"],"不创造":["92.9"],"响应式":["92.9"],"而是":["92.9"],"延续":["92.9"],"方法相当于调用":["93.1"],"options":["93.1"],"mutationstype":["93.1"],"actionstype":["93.1"],"这样就很容易理解两者使用上的不同了":["93.1"],"用起来略繁琐":["93.2"],"一般用于":["93.2"],"插件中":["93.2"],"内部的实现就是通过订阅":["93.3"],"变化做统一处理":["93.3"],"通过插件的选项控制哪些需要持久化":["93.3"],"中每个":["93.4"],"store":["93.4","95.25"],"都是独立的":["93.4"],"互相不影响":["93.4"],"体积非常小":["93.4"],"只有":["93.4"],"1kb":["93.4"],"左右":["93.4"],"支持插件来扩展自身功能":["93.4"],"支持服务端渲染":["93.4"],"类似":["93.5"],"但需要注意它可能是异步的":["93.5"],"需要返回一个":["93.5"],"给用户以处理异步结果":["93.5"],"dom":["94.1","94.7"],"节点":["94.1"],"里面有":["94.1"],"标签名":["94.1"],"子节点":["94.1"],"文本等等":["94.1"],"对象一次性":["94.3"],"attach":["94.3"],"到":["94.3"],"树上":["94.3"],"避免大量的无谓计算":["94.3"],"数组中如果元素是对象类型也会进行递归劫持":["94.4"],"notify":["94.5"],"的话":["94.6"],"发现新旧节点的标签都是":["94.6"],"就会复用":["94.6"],"将第一个的复选框的值改成第二个的":["94.6"],"第二个的复用第三个的":["94.6"],"然后将第三个删除":["94.6"],"更新的时候采用虚拟":["94.7"],"的方式进行":["94.7"],"diff":["94.7"],"算法更新":["94.7"],"更新子节点时又分了几种情况":["94.8"],"新的子节点是文本":["94.8"],"老的子节点是数组则清空":["94.8"],"并设置文本":["94.8"],"老的子节点是文本则直接更新文本":["94.8"],"新的子节点是数组":["94.8"],"老的子节点是文本则清空文本":["94.8"],"并创建新子节点数组中的子元素":["94.8"],"老的子节点也是数组":["94.8"],"那么比较两组子节点":["94.8"],"更新细节":["94.8"],"中引入的更新策略":["94.8"],"静态节点标记等":["94.8"],"重新编写了这一部分的实现":["94.9"],"利用":["94.9"],"代理要响应化的数据":["94.9"],"它有很多好处":["94.9"],"编程体验是一致的":["94.9"],"不需要使用特殊":["94.9"],"初始化性能和内存消耗都得到了大幅改善":["94.9"],"另外由于响应化的实现代码抽取为独立的":["94.9"],"reactivity":["94.9"],"包":["94.9"],"使得我们可以更灵活的使用它":["94.9"],"第三方的扩展开发起来更加灵活了":["94.9"],"同时首次执行渲染函数会创建它内部响应式数据之间和组件更新函数之间的依赖关系":["94.10"],"这使得以后数据变化时会执行对应的更新函数":["94.10"],"异步清空":["94.11"],"队列":["94.11"],"的后面":["94.12"],"这样等队列内部的更新函数都执行完毕":["94.12"],"所有":["94.12"],"操作也就结束了":["94.12"],"自然能够获取到最新的":["94.12"],"在内部为不同的输入元素使用不同的属性并抛出不同的事件":["94.13"],"提高性能":["95.0"],"必须是一个函数":["95.1"],"节点增加与删除":["95.2"],"如果需要非常频繁的切换":["95.2"],"则使用":["95.2"],"较好":["95.2"],"如果在运行时条件很少改变":["95.2"],"移动到容器元素上":["95.3"],"或者外面包一层":["95.3"],"template":["95.3"],"方便复用":["95.6"],"csr":["95.7"],"方式":["95.7"],"首屏采用服务端渲染的方式":["95.7"],"后续交互采用客户端渲染方式":["95.7"],"lru":["95.9"],"最近最少使用":["95.9"],"算法":["95.9"],"选择最近最久未使用的组件予以淘汰":["95.9"],"依赖问题":["95.12"],"数据来源问题":["95.12"],"有某些操作":["95.13"],"就要响应这些操作":["95.13"],"所以可以说它是":["95.13"],"for":["95.13"],"则直接遍历":["95.14"],"创建或更新":["95.14"],"比如":["95.15"],"router":["95.15"],"view":["95.15"],"就是一个函数式组件":["95.15"],"高阶组件":["95.15"],"用于接收一个组件作为参数":["95.15"],"返回一个被包装过的组件":["95.15"],"mutation":["95.16"],"这样使得我们可以方便地跟踪每一个状态的变化":["95.16"],"根据组件之间关系讨论组件通信最为清晰有效":["95.16"],"父子组件":["95.16"],"跨层级关系":["95.16"],"也可以起到扩展组件的目的":["95.17"],"emit":["95.18"],"一个事件让父组件去做这个变更":["95.18"],"注意虽然我们不能直接修改一个传入的对象或者数组类型的":["95.18"],"但是我们还是能够直接改内嵌的对象或属性":["95.18"],"的业务模块":["95.19"],"它的目标是":["95.19"],"件":["95.19"],"plugin":["95.19"],"是用来增强你的技术栈的功能模块":["95.19"],"本身":["95.19"],"简单来说":["95.19"],"插件就是对":["95.19"],"的功能的增强或补充":["95.19"],"只能用一次":["95.20"],"可以有多个":["95.20"],"需要做的事多点":["95.21"],"输出完整":["95.21"],"除了":["95.21"],"complier":["95.21"],"vnode":["95.21"],"还需如数据获取填充至":["95.21"],"hydration":["95.21"],"缓存等等":["95.21"],"相比于其他模板引擎":["95.21"],"ejs":["95.21"],"jade":["95.21"],"等":["95.21"],"最终要实现的目的是一样的":["95.21"],"性能上可能要差点":["95.21"],"怎么理解":["95.21"],"的单向数据流":["95.21"],"数据总是从父组件传到子组件":["95.21"],"子组件没有权利修改父组件传过来的数据":["95.21"],"只能请求父组件对原始数据进行修改":["95.21"],"这样会":["95.21"],"防止从子组件意外改变父级组件的状态":["95.21"],"从而导致你的应用的数据流向难以理解":["95.21"],"open":["95.23"],"被执行时":["95.24"],"它会对":["95.24"],"中的每个语言块用单独的":["95.24"],"链处理":["95.24"],"最后将这些单独的块装配成最终的组件模块":["95.24"],"components":["95.25"],"用来放项目通用组件":["95.25"],"layout":["95.25"],"用来放项目的布局":["95.25"],"用来放项目的路由配置":["95.25"],"用来放状态管理":["95.25"],"的配置":["95.25"],"utils":["95.25"],"用来放项目中的工具方法类":["95.25"],"views":["95.25"],"用来放项目的页面文件":["95.25"],"实例销毁之后发生":["96.0"],"此阶段组件已被拆解":["96.0"],"数据绑定被卸除":["96.0"],"监听被移出":["96.0"],"子组件实例也被销毁":["96.0"],"在编写生命周期函数的时候不用使用箭头函数":["96.0"],"因为底层代码":["96.0"],"callhook":["96.0"],"使用了":["96.0"],"apply":["96.0","115.0","124.0"],"改变了":["96.0"],"指向":["96.0"],"释放资源和避免内存泄露":["96.1"],"destroyed":["96.2"],"生成新的":["97.0"],"module":["98.1"],"exports":["98.1","99.2"],"es6":["98.3"],"转换成":["98.3"],"es5":["98.3"],"ts":["98.3"],"将":["98.3"],"递归遍历所有依赖图谱的模块":["100.1"],"组装成一个个包含多个模块的":["100.1"],"chunk":["100.1"],"块":["100.1"],"最后将生成的文件输出到":["100.1"],"output":["100.1"],"的目录中":["100.1"],"则":["101.0"],"不变":["101.0"],"值传给浏览器":["102.1"],"用于下次热更新使用":["102.1"],"浏览器拿到更新后的模块后":["102.1"],"用新模块替换掉旧的模块":["102.1"],"实现局部刷新":["102.1"],"error":["103.0"],"send":["103.0"],"如果绑定的是构造函数":["104.0"],"那么需要继承构造函数原型属性和方法":["104.0"],"实现继承的方式":["104.0"],"使用object":["104.0"],"create":["104.0"],"object":["104.0"],"function":["107.0"],"new":["107.0"],"删除最久未被访问的数据":["108.0"],"keys":["108.0"],"next":["108.0"],"否则返回新对象":["109.0"],"else":["110.2","114.0","129.0","132.0"],"foreach":["115.0"],"使用apply将参数传递给回调函数":["115.0"],"子数组进行递归操作":["116.0"],"child":["116.0"],"appendchild":["116.0"],"reverse":["117.0","118.0"],"只要发生了一次交换":["119.0"],"就修改标志位":["119.0"],"true":["119.0","135.0","147.0"],"若一次交换也没发生":["119.0"],"则说明数组有序":["119.0"],"直接放过":["119.0"],"的正确索引":["119.2"],"将枢轴元素放到左边界的位置":["119.3"],"完成一次分区操作":["119.3"],"返回枢轴元素的最终索引位置":["119.3"],"concat":["119.4"],"indexof":["120.0"],"settimeout":["124.1"],"right":["127.0"],"交换":["127.0"],"join":["128.0","136.0"],"has":["130.0"],"add":["130.0"],"set":["131.0"],"递归调用":["134.0"],"传递修改后的":["134.0"],"用于记录出现过的数字":["134.0"],"of":["135.0"],"直到查到目标元素或查找区间为空":["139.1"],"b":["140.0"],"未找到可行解":["143.0"],"返回0":["143.0"],"while":["146.0"],"continue":["149.0"],"表示开发依赖":["155.0"],"dirname":["155.1"],"dist":["155.1"],"路径必须是一个绝对路径":["155.1"],"optimizecssassetswebpackplugin":["155.6"],"从下到上":["155.7"]}]'},t={"0.0":{t:"后端学习积累与总结",p:`::: tip
这里主要记录后端知识点!
:::
`,l:"BackEnd/index.html",a:"后端学习积累与总结"},"1.0":{t:"node-是什么",p:`是一个基于 Chrome V8 引擎的 JavaScript 运行环境
`,l:"BackEnd/NodeJS/Node基本概念.html",a:"node-是什么"},"1.1":{t:"解决了什么问题",p:`在处理高并发，I/O 密集场景有明显的性能优势。
高并发：同一时间并发访问服务器
`,l:"BackEnd/NodeJS/Node基本概念.html#解决了什么问题",a:"解决了什么问题"},"1.2":{t:"js-单线程",p:`Node 的主线程是单线程的，主要是为了

节约内存，且不需要再切换执行上下文
不需要管锁的问题

`,l:"BackEnd/NodeJS/Node基本概念.html#js-单线程",a:"js-单线程"},"1.3":{t:"同步异步和阻塞非阻塞",p:`同步就是再执行某段代码时，代码没有得到返回之前，其它代码无法执行，当得到了返回值后可以继续执行其他代码
异步就是再执行某段代码的时候，代码不好立即得到返回结果，可以继续执行其它代码，返回值通过回调来获 ...`,l:"BackEnd/NodeJS/Node基本概念.html#同步异步和阻塞非阻塞",a:"同步异步和阻塞非阻塞"},"2.0":{t:"浏览器事件循环",p:`事件循环主要是为了实现 js 的异步概念
js 是单线程的
进程：计算机分配任务的最小单位
进程中包含多个进程
浏览器的进程

每一个页面都是进程（互不影响）
浏览器也有一个主进程（用户界面）
渲染进 ...`,l:"BackEnd/NodeJS/事件循环.html",a:"浏览器事件循环"},"3.0":{t:"test1",p:"",l:"Fragments/Frag1/1.html",a:"test1"},"4.0":{t:"编程踩坑积累与总结",p:`::: tip
这里主要记录突发奇想!
:::
`,l:"Fragments/index.html",a:"编程踩坑积累与总结"},"5.0":{t:"编程踩坑积累与总结",p:`::: tip
这里主要记录框架相关知识点！
:::
`,l:"Framework/index.html",a:"编程踩坑积累与总结"},"6.0":{t:"testdddd",p:"",l:"Framework/Vue/test.html",a:"testdddd"},"7.0":{t:"移动端响应式",p:`什么是响应式？
响应式就是将界面设计成能够适应不同的设备。&quot;如果将屏幕看成是容器，那么内容就像水一样&quot;
为什么要设计响应式？
首先，电脑、笔记本、手机、平板等智能设备在不断增加，其 ...`,l:"FrontEnd/CSS/响应式.html",a:"移动端响应式"},"7.1":{t:"响应式布局常用方法",p:`

使用 vm 定制 rem 自适应布局
移动端使用 rem 布局需要通过 JS 设置不同屏幕宽高比的 font-size，结合 vm 单位和 calc()可以脱离 JS 的控制
适用于 rem 布局 ...`,l:"FrontEnd/CSS/响应式.html#响应式布局常用方法",a:"响应式布局常用方法"},"8.0":{t:"css-常见布局",p:"\r",l:"FrontEnd/CSS/常见布局.html",a:"css-常见布局"},"8.1":{t:"水平布局",p:"\r",l:"FrontEnd/CSS/常见布局.html#水平布局",a:"水平布局"},"8.2":{t:"文本、行内元素、行内块级元素",p:`使用 text-align：center

优点：兼容性比较好
缺点：只对行内元素有效，且属性会继承，会影响后代行内内容，如果子元素宽度大于父元素宽度就会失效。
注意：只控制行内内容如何相对父元素对齐 ...`,l:"FrontEnd/CSS/常见布局.html#文本、行内元素、行内块级元素",a:"文本、行内元素、行内块级元素"},"8.3":{t:"单个块级元素",p:`margin:0 auto

必须定宽
优点：兼容性好
缺点：必须顶宽，值不能为 auto，宽度要小于父元素，否则无效

.son {
  width: 100px;
  margin: 0 auto ...`,l:"FrontEnd/CSS/常见布局.html#单个块级元素",a:"单个块级元素"},"8.4":{t:"多个块级元素",p:`#parent {
  text-align: center;
}
.son {
  display: inline-block; /*改为行内或者行内块级形式，以达到text-align对其生效*/ ...`,l:"FrontEnd/CSS/常见布局.html#多个块级元素",a:"多个块级元素"},"8.5":{t:"使用绝对定位",p:`#parent {
  height: 200px;
  width: 200px; /*定宽*/
  position: relative; /*父相*/
  background-color: # ...`,l:"FrontEnd/CSS/常见布局.html#使用绝对定位",a:"使用绝对定位"},"8.6":{t:"任意个元素",p:`#parent {
  display: flex;
  justify-content: center;
}


优点：简单，容易理解
缺点：PC 端兼容性不好

`,l:"FrontEnd/CSS/常见布局.html#任意个元素",a:"任意个元素"},"8.7":{t:"垂直居中",p:"\r",l:"FrontEnd/CSS/常见布局.html#垂直居中",a:"垂直居中"},"8.8":{t:"单行、行内、行内块",p:`#parent {
  height: 150px;
  line-height: 150px; /*与height等值*/
}


优点：兼容性好
缺点：只能用于单行行内内容，需要知道高度的值

`,l:"FrontEnd/CSS/常见布局.html#单行、行内、行内块",a:"单行、行内、行内块"},"8.9":{t:"多行文本、行内元素、行内块级元素",p:`#parent {
  /*或者用span把所有文字包裹起来，设置display：inline-block转换成图片的方式解决*/
  height: 150px;
  line-height: 30 ...`,l:"FrontEnd/CSS/常见布局.html#多行文本、行内元素、行内块级元素",a:"多行文本、行内元素、行内块级元素"},"8.10":{t:"单个块元素",p:`#parent {
  display: table-cell;
  vertical-align: middle;
}
- 使用 table-cell、使用绝对定位、使用 flex

/_原理：子绝 ...`,l:"FrontEnd/CSS/常见布局.html#单个块元素",a:"单个块元素"},"8.11":{t:"任意个元素",p:`#parent {
  display: flex;
  align-items: center;
}

或 #parent {
  display: flex;
}
.son {
  align-s ...`,l:"FrontEnd/CSS/常见布局.html#任意个元素",a:"任意个元素"},"8.12":{t:"水平垂直居中",p:"\r",l:"FrontEnd/CSS/常见布局.html#水平垂直居中",a:"水平垂直居中"},"8.13":{t:"行内、行内块级、图片",p:`#parent {
  height: 150px;
  line-height: 150px; /*行高的值与height相等*/
  text-align: center;
  font-size ...`,l:"FrontEnd/CSS/常见布局.html#行内、行内块级、图片",a:"行内、行内块级、图片"},"8.14":{t:"tabel-cell",p:`#parent {
  height: 150px;
  width: 200px;
  display: table-cell;
  vertical-align: middle;
  /*text ...`,l:"FrontEnd/CSS/常见布局.html#tabel-cell",a:"tabel-cell"},"8.15":{t:"绝对定位",p:`#parent {
  position: relative;
}
#son {
  position: absolute;
  top: 50%;
  left: 50%;
  /*定宽高时等同于m ...`,l:"FrontEnd/CSS/常见布局.html#绝对定位",a:"绝对定位"},"8.16":{t:"绝对居中",p:`#parent {
  position: relative;
}
#son {
  position: absolute;
  margin: auto;
  width: 100px;
  hei ...`,l:"FrontEnd/CSS/常见布局.html#绝对居中",a:"绝对居中"},"8.17":{t:"flex",p:`#parent {
  display: flex;
}
#son {
  margin: auto;
}

或 #parent {
  display: flex;
  justify-conten ...`,l:"FrontEnd/CSS/常见布局.html#flex",a:"flex"},"8.18":{t:"两列布局",p:`左列定宽，右列自适应
`,l:"FrontEnd/CSS/常见布局.html#两列布局",a:"两列布局"},"8.19":{t:"float-margin",p:`&lt;body
  &gt; &lt;div
  id=&quot;left&quot;
  &gt; 左列定宽&lt;/div
  &gt; &lt;div
  id=&quot;right&qu ...`,l:"FrontEnd/CSS/常见布局.html#float-margin",a:"float-margin"},"8.20":{t:"float-overflow",p:`&lt;body&gt;
  &lt;div id=&quot;left&quot;&gt;左列定宽&lt;/div&gt;
  &lt;div id=&quot;right&quot;&gt;右列自 ...`,l:"FrontEnd/CSS/常见布局.html#float-overflow",a:"float-overflow"},"8.21":{t:"绝对定位",p:`&lt;body&gt;
  &lt;div id=&quot;parent&quot;&gt;
    &lt;div id=&quot;left&quot;&gt;左列定宽&lt;/div&gt; ...`,l:"FrontEnd/CSS/常见布局.html#绝对定位",a:"绝对定位"},"8.22":{t:"flex",p:`&lt;body&gt;
  &lt;div id=&quot;parent&quot;&gt;
    &lt;div id=&quot;left&quot;&gt;左列定宽&lt;/div&gt; ...`,l:"FrontEnd/CSS/常见布局.html#flex",a:"flex"},"8.23":{t:"float-overflow",p:`&lt;body&gt;
  &lt;div id=&quot;parent&quot;&gt;
    &lt;div id=&quot;left&quot;&gt;左列不定宽&lt;/div&gt ...`,l:"FrontEnd/CSS/常见布局.html#float-overflow",a:"float-overflow"},"8.24":{t:"flex",p:`&lt;body&gt;
  &lt;div id=&quot;parent&quot;&gt;
    &lt;div id=&quot;left&quot;&gt;左列不定宽&lt;/div&gt ...`,l:"FrontEnd/CSS/常见布局.html#flex",a:"flex"},"8.25":{t:"三列布局",p:`两列定宽，一列自适应
`,l:"FrontEnd/CSS/常见布局.html#三列布局",a:"三列布局"},"8.26":{t:"float-margin",p:`&lt;body&gt;
  &lt;div id=&quot;parent&quot;&gt;
    &lt;div id=&quot;left&quot;&gt;左列定宽&lt;/div&gt; ...`,l:"FrontEnd/CSS/常见布局.html#float-margin",a:"float-margin"},"8.27":{t:"flex",p:`&lt;body&gt;
  &lt;div id=&quot;parent&quot;&gt;
    &lt;div id=&quot;left&quot;&gt;左列定宽&lt;/div&gt; ...`,l:"FrontEnd/CSS/常见布局.html#flex",a:"flex"},"9.0":{t:"编程踩坑积累与总结",p:`::: tip
这里主要记录前端基础知识
:::
`,l:"FrontEnd/index.html",a:"编程踩坑积累与总结"},"11.0":{t:"_300ms-延迟解决的是双击缩放。双击缩放-手指在屏幕快速点击两次。safari-浏览器就会将网页缩放至原始比例。当用户点击屏幕一次之后-浏览器并不会判断用户确实要打开至这个链接-还是想要进行双击操作-所以-safair-浏览器会等待-300ms-用来判断是否再次点击了屏幕。",p:`怎么解决？

禁止缩放，设置 meta 标签 user-scalable=no
fastclick.js 原理是检查到 touched 事件的时候，会通过 dom 自定义事件立即发出 click 事件 ...`,l:"Interview/Browser/300ms延迟.html",a:"_300ms-延迟解决的是双击缩放。双击缩放-手指在屏幕快速点击两次。safari-浏览器就会将网页缩放至原始比例。当用户点击屏幕一次之后-浏览器并不会判断用户确实要打开至这个链接-还是想要进行双击操作-所以-safair-浏览器会等待-300ms-用来判断是否再次点击了屏幕。"},"12.0":{t:"css-加载不会阻塞-dom-树的解析",p:`
css 加载会阻塞 DOM 树的渲染
css 加载会阻塞后面 js 语句的执行

原理：


HTML 解析文件，生成 DOM Tree，解析 CSS 文件生成 CSSOM Tree


将 Dom ...`,l:"Interview/Browser/CSS加载会造成阻塞吗.html",a:"css-加载不会阻塞-dom-树的解析"},"13.0":{t:"cdn-缓存方便",p:`
突破浏览器并发限制
解压 cookie 带宽

`,l:"Interview/Browser/为什么利用多个域名存储网站资源更有效.html",a:"cdn-缓存方便"},"14.0":{t:"是浏览器的核心部分-主要分为两个部分-渲染引擎和-javascript-引擎",p:`渲染引擎：负责解析网页的 HTML、图像等内容，负责处理网页的布局、计算、绘制等任务，将其转化成可视化的网页形式。常见的有 webkit、Blink
JavaScript 引擎：解析执行 JavaSc ...`,l:"Interview/Browser/对浏览器内核的理解.html",a:"是浏览器的核心部分-主要分为两个部分-渲染引擎和-javascript-引擎"},"15.0":{t:"参考文章",p:`https://juejin.cn/post/6844903767226351623 https://segmentfault.com/a/1190000010719058
`,l:"Interview/Browser/跨域问题.html",a:"参考文章"},"15.1":{t:"什么是同源策略",p:`同源就是指 URL 中的协议（http/https）、域名（www.baidu.com）、端口号（80）都相同
同源策略就是浏览器的一种重要的安全策略，通过限制不同源之间的资源不能相互访问来保证浏览器 ...`,l:"Interview/Browser/跨域问题.html#什么是同源策略",a:"什么是同源策略"},"15.2":{t:"跨域解决方案",p:"\r",l:"Interview/Browser/跨域问题.html#跨域解决方案",a:"跨域解决方案"},"15.3":{t:"jsonp",p:`原理
利用script标签没有跨域限制的漏洞，网页可以得到从其它来源动态产生的 JSON 数据
优点是简单兼容性好，可以用于解决主流浏览器的跨域数据访问的问题
缺点是只支持 get 请求方法
实现
/ ...`,l:"Interview/Browser/跨域问题.html#jsonp",a:"jsonp"},"15.4":{t:"cors",p:`服务端设置Access-Control-Allow-Origin开启 CORS，这个属性表示的是那个域名可以访问资源，如果设置为通配符表示所有网站都可以访问资源
使用这种方式解决跨域，在发送请求的时候 ...`,l:"Interview/Browser/跨域问题.html#cors",a:"cors"},"15.5":{t:"node-中间件代理",p:`服务器向服务器请求不用遵循同源策略

接受客户端请求
将请求转发给服务器
拿到服务器响应数据
将响应转发给客户端

`,l:"Interview/Browser/跨域问题.html#node-中间件代理",a:"node-中间件代理"},"16.0":{t:"用户输入-url-并回车",p:`

浏览器进程检查 url，组装协议，构成完整的 url


浏览器进程通过进程间通信（IPC）把 url 请求发送给网络进程


网络进程接收到 url 请求后检查本地缓存是否缓存了该请求资源，如果 ...`,l:"Interview/Browser/输入URL到页面呈现发生了什么.html",a:"用户输入-url-并回车"},"17.0":{t:"什么是并行处理",p:`并行处理就是同一时刻处理多个任务。
`,l:"Interview/Browser/进程问题.html",a:"什么是并行处理"},"17.1":{t:"线程-vs-进程",p:"进程：一个进程就是一个程序的运行实例。启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码，运行中的数据和一个执行任务的主线程，这样一个运行环境叫做进程。（管理任务和资源分配的基本单位）。 ...",l:"Interview/Browser/进程问题.html#线程-vs-进程",a:"线程-vs-进程"},"17.2":{t:"多进程架构",p:`
浏览器进程：主要负责界面显示、用户交互、子进程管理、同时提供存储功能
渲染进程：将 HTML、CSS、JS 转换为用户可以与之交互的网页。
GPU 进程：绘制
网络进程：负责页面的网络资源加载。
插 ...`,l:"Interview/Browser/进程问题.html#多进程架构",a:"多进程架构"},"18.0":{t:"是匹配元素之后的选择器",p:`+是匹配相邻元素的选择器
`,l:"Interview/CSS/+和~选择器有什么不同.html",a:"是匹配元素之后的选择器"},"19.0":{t:"是什么",p:`块级格式化上下文，BFC 是一个独立的渲染区域，其中的元素按照特定规则进行排布，与其他区域相互隔离，不会影响到外部布局。
`,l:"Interview/CSS/BFC.html",a:"是什么"},"19.1":{t:"触发条件",p:`
根元素（HTML）或包含根元素的元素
浮动元素： 元素的 float 属性不为 none。
绝对定位元素： 元素的 position 属性为 absolute 或 fixed。
display 属性 ...`,l:"Interview/CSS/BFC.html#触发条件",a:"触发条件"},"19.2":{t:"作用",p:`
清除浮动： 当一个元素的子元素都是浮动元素时，它将会塌陷，不会正常地包裹子元素。创建一个 BFC 可以解决这个问题，因为 BFC 的边界会包裹浮动元素。
垂直外边距重叠： 在同一个 BFC 中的元素 ...`,l:"Interview/CSS/BFC.html#作用",a:"作用"},"20.0":{t:"怎么修改-chrome-记住密码后自动填充表单的黄色背景",p:"\r",l:"Interview/CSS/Chrome自动填充问题.html",a:"怎么修改-chrome-记住密码后自动填充表单的黄色背景"},"20.1":{t:"产生原因",p:`由于 Chrome 默认会给自动填充的input表单加上 input:-webkit-autofill 私有属性造成的
`,l:"Interview/CSS/Chrome自动填充问题.html#产生原因",a:"产生原因"},"20.2":{t:"解决方案",p:`
在form标签上直接关闭了表单的自动填充：autocomplete=&quot;off&quot;
input:-webkit-autofill { background-color: transp ...`,l:"Interview/CSS/Chrome自动填充问题.html#解决方案",a:"解决方案"},"21.0":{t:"css-里的-visibility-属性有个-collapse-属性值-在不同浏览器下有什么区别",p:`通常用于表格的行和列
当用于行上的时候：该行会被隐藏，并且不会占据任何空间，相邻的行自动合并
当用于列上的时候：该列会被隐藏，但任会占据空间，不会导致相邻元素合并
当一个元素的 visibility  ...`,l:"Interview/CSS/collapse属性.html",a:"css-里的-visibility-属性有个-collapse-属性值-在不同浏览器下有什么区别"},"22.0":{t:"_1-新增伪类和伪元素-通用选择器",p:`
新增盒子模型
圆角边框、边框图像
flex 弹性盒子布局
媒体查询

`,l:"Interview/CSS/CSS3新特性.html",a:"_1-新增伪类和伪元素-通用选择器"},"23.0":{t:"合并压缩-css-文件",p:`
使用字体图标和 SVG 图标
减少选择器的复杂性
避免使用！important
使用缓存
使用精灵图
使用硬件加速

`,l:"Interview/CSS/CSS优化.html",a:"合并压缩-css-文件"},"24.0":{t:"inline",p:`

使元素变成行内元素，拥有行内元素的特性，可以和其它行内元素共占一行，不会独占一行；不能改变 height、weight，大小由内容撑开，


可以使用 padding，margin 上下不生效

 ...`,l:"Interview/CSS/Display.html",a:"inline"},"24.1":{t:"block",p:`
使元素变成块级元素，独占一行，在不设置自己的宽度的情况下，块级元素会默认填满父级元素的宽度
能够改变元素的 height、weight
可以使用 padding，margin

`,l:"Interview/CSS/Display.html#block",a:"block"},"24.2":{t:"inline-block",p:`
可以和其他元素共占一行
可以设置 weight、height
可以设置 padding、margin

`,l:"Interview/CSS/Display.html#inline-block",a:"inline-block"},"24.3":{t:"none",p:`不显示
`,l:"Interview/CSS/Display.html#none",a:"none"},"24.4":{t:"flex",p:`弹性盒子布局
`,l:"Interview/CSS/Display.html#flex",a:"flex"},"25.0":{t:"flex-实际上是-flex-grow-1-、-flex-shrink-1-和-flex-basis-0-三个属性的缩写。",p:`

flex-grow：定义项目的的放大比例；

默认为0，如果存在剩余空间，元素也不会放大，设置为 1，代表会放大，等分剩余空间
flex-grow为n的项目，占据的空间（放大的比例）是flex-g ...`,l:"Interview/CSS/flex1.html",a:"flex-实际上是-flex-grow-1-、-flex-shrink-1-和-flex-basis-0-三个属性的缩写。"},"26.0":{t:"采用-flex-布局的元素-称为-flex-容器-它的所有子元素自动成为容器成员-容器中默认存在两条轴-主轴和交叉轴-项目默认沿主轴排列",p:"\r",l:"Interview/CSS/flex布局.html",a:"采用-flex-布局的元素-称为-flex-容器-它的所有子元素自动成为容器成员-容器中默认存在两条轴-主轴和交叉轴-项目默认沿主轴排列"},"26.1":{t:"容器属性",p:`
flex-direction：决定主轴的方向，row-reverse：主轴为水平方向，起点在左端，column：主轴为垂直方向，起点在上沿，column-reverse：主轴为垂直方向，起点在下沿
 ...`,l:"Interview/CSS/flex布局.html#容器属性",a:"容器属性"},"26.2":{t:"容器成员属性",p:`
order：项目排列顺序，数值越小越靠前，默认为 0
flex-grow：如果不换行，容器宽度不够分的情况，弹性元素会根据这个来决定，项目的放大比例，默认为 0，即使存在剩余空间，也不放大，如果所有 ...`,l:"Interview/CSS/flex布局.html#容器成员属性",a:"容器成员属性"},"27.0":{t:"_1-import-是-css-提供的语法规则-只有导入样式表的作用-link-是-html-提供的标签-不仅可以加载-css-文件-还可以定义-rss、rel-连接属性等。",p:`
加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载。
@import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作 ...`,l:"Interview/CSS/link和@import.html",a:"_1-import-是-css-提供的语法规则-只有导入样式表的作用-link-是-html-提供的标签-不仅可以加载-css-文件-还可以定义-rss、rel-连接属性等。"},"28.0":{t:"margin-重叠指的是在垂直方向上-两个相邻元素的-margin-发生重叠的情况。",p:`一般来说可以分为四种情形：

第一种是相邻兄弟元素的 marin-bottom 和 margin-top 的值发生重叠。这种情况下我们可以通过设置其中一个元素为 BFC 来解决。
第二种是父元素的 m ...`,l:"Interview/CSS/margin重叠问题.html",a:"margin-重叠指的是在垂直方向上-两个相邻元素的-margin-发生重叠的情况。"},"29.0":{t:"absolute",p:`生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。如果不存在逐级向上查找，直到相对于 body 元素，即相对于浏览器窗口
`,l:"Interview/CSS/Position.html",a:"absolute"},"29.1":{t:"fixed",p:`生成绝对定位的元素，相对于浏览器窗口进行定位
`,l:"Interview/CSS/Position.html#fixed",a:"fixed"},"29.2":{t:"relative",p:`生成相对定位的元素，相对于其正常位置进行定位
`,l:"Interview/CSS/Position.html#relative",a:"relative"},"29.3":{t:"static",p:`默认值，没有定位
`,l:"Interview/CSS/Position.html#static",a:"static"},"29.4":{t:"inherit",p:`规定应该从父元素继承 position 的值
`,l:"Interview/CSS/Position.html#inherit",a:"inherit"},"30.0":{t:"rem-单位是根据根元素的-font-size-来计算",p:`
em：单位是根据自身元素的 font-size 大小来计算
vh：viewport width 视口的宽
vw：viewport height 视口的高

`,l:"Interview/CSS/rem-em-vw-vh.html",a:"rem-单位是根据根元素的-font-size-来计算"},"31.0":{t:"图像质量-svg-使用矢量图形-可以无限放大而不失真-canvas-使用像素图形-图像不可以无限放大不失真",p:`
编辑和修改：SVG 使用 XML 文档来描述图形，可以通过 JavaScript 和 CSS 来修改和操作，而 Canvas 使用 JavaScript 来绘制图形，需要重新绘制才能进行修改
适用场 ...`,l:"Interview/CSS/SVG - Canvas.html",a:"图像质量-svg-使用矢量图形-可以无限放大而不失真-canvas-使用像素图形-图像不可以无限放大不失真"},"32.0":{t:"transition",p:`只能定义两个状态：开始状态和结束状态，不能定义中间的状态

不能重复执行动画，除非一再触发动画

需要在特定状态触发后才能执行

animation
可以用@keyframes定义动画序列

可以设置 ...`,l:"Interview/CSS/transition-animation.html",a:"transition"},"33.0":{t:"一栏固定宽度-右边一栏宽度自适应-1-利用浮动-左边元素定宽-200px-向左浮动-float-left-右边元素-margin-left-200px-宽度设置为-auto-默认为-auto-撑满整个盒子",p:`.left {
  width: 200px;
  float: left;
  background-color: tomato;
}

.right {
  margin-left: 200px; ...`,l:"Interview/CSS/两栏布局.html",a:"一栏固定宽度-右边一栏宽度自适应-1-利用浮动-左边元素定宽-200px-向左浮动-float-left-右边元素-margin-left-200px-宽度设置为-auto-默认为-auto-撑满整个盒子"},"34.0":{t:"伪类",p:`用于当已有元素处于某个状态时，为其添加对应的部分，这个状态是根据用户行为而动态变化的，比如说，当用户悬停在指定的元素时，我们可以通过：hover 来描述这个元素的状态。双冒号，不会生成新的元素
伪元素 ...`,l:"Interview/CSS/伪类-伪元素.html",a:"伪类"},"35.0":{t:"_1-display-none-把元素隐藏起来-使元素完全从渲染树中消失-不占据任何空间-会改变页面布局-可以理解为在页面中把该元素删掉-非继承属性-子孙节点消失是因为元素本身从渲染树中消失-修改子孙节点的属性无法使其显示-会导致重排-读屏器不会读取-display-none-元素的内容",p:`
visibility:hidden 把元素隐藏起来，不会使元素从渲染树中消失，不会改变页面布局，不会触发该元素已经绑定的事件 继承属性，子孙节点消失是继承了 hidden 属性，可以通过设置 vis ...`,l:"Interview/CSS/使元素消失的方法.html",a:"_1-display-none-把元素隐藏起来-使元素完全从渲染树中消失-不占据任何空间-会改变页面布局-可以理解为在页面中把该元素删掉-非继承属性-子孙节点消失是因为元素本身从渲染树中消失-修改子孙节点的属性无法使其显示-会导致重排-读屏器不会读取-display-none-元素的内容"},"36.0":{t:"_1-display-table-cell-vertial-align-middle",p:`
flex 布局，align-item：center
绝对定位中，bottom：0，top：0，margin：auto
绝对定位中，固定宽高时设置 top：50%，margin-top 为-1/2he ...`,l:"Interview/CSS/垂直居中.html",a:"_1-display-table-cell-vertial-align-middle"},"37.0":{t:"dns-预解析",p:`TCP 预连接
骨架屏
资源预加载
接口预加载
接口合并
`,l:"Interview/CSS/怎么减少白屏时间.html",a:"dns-预解析"},"38.0":{t:"fouc-指的是在页面加载过程中-由于外部样式表加载较慢或延迟-导致页面先以无样式的方式显示-然后突然闪烁出样式的现象",p:`解决：

将样式表放在文档的 head 中：通过将样式表放在文档头部，确保浏览器在渲染页面内容之前先加载和解析样式表，从而避免了页面一开始的无样式状态
使用内联样式：关键样式直接写在 HTML 标签的 ...`,l:"Interview/CSS/怎么避免FOUC.html",a:"fouc-指的是在页面加载过程中-由于外部样式表加载较慢或延迟-导致页面先以无样式的方式显示-然后突然闪烁出样式的现象"},"39.0":{t:"多数显示屏默认频率是-60hz-就是-1s-刷新-60-次-所以理论上最小时间是-16-7ms-1-60-1000-如果需要手写编写动画-可以将最小时间间隔设置为-16-7ms-这样可以确保每帧动画能够在显示器刷新之前完成-如果时间间隔小于-16-7ms-则会导致某些帧在显示器刷新之后才能呈现-造成不连续的动画效果-出现跳帧现象",p:"",l:"Interview/CSS/手写动画最小间隔.html",a:"多数显示屏默认频率是-60hz-就是-1s-刷新-60-次-所以理论上最小时间是-16-7ms-1-60-1000-如果需要手写编写动画-可以将最小时间间隔设置为-16-7ms-这样可以确保每帧动画能够在显示器刷新之前完成-如果时间间隔小于-16-7ms-则会导致某些帧在显示器刷新之后才能呈现-造成不连续的动画效果-出现跳帧现象"},"40.0":{t:"单行",p:`div {
  width: 200px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

多行
di ...`,l:"Interview/CSS/文字溢出.html",a:"单行"},"41.0":{t:"_1-子绝父相-transform",p:`.box {
  background-color: red;
  width: 100%;
  height: 100vh;
  position: relative;
}

.son {
  ba ...`,l:"Interview/CSS/水平垂直居中.html",a:"_1-子绝父相-transform"},"42.0":{t:"_1-元素为行内元素-设置父元素-text-align-center",p:`
如果元素宽度固定，可以设置左右 margin 为 auto
如果元素宽度固定，通过使用绝对定位，以及设置元素 margin-left 为其宽度的一半
如果元素为绝对定位，设置父元素 position ...`,l:"Interview/CSS/水平居中.html",a:"_1-元素为行内元素-设置父元素-text-align-center"},"43.0":{t:"为什么要清除浮动",p:"为什么要清除浮动？ 浮动元素脱离了标准文档流，变成了浮动元素，不再向父元素汇报高度。所以父元素在计算高度的时候并没有将浮动元素的高度计算出来，因此就造就了高度塌陷的问题。解决高度塌陷的问题就叫做清除浮 ...",l:"Interview/CSS/浮动.html",a:"为什么要清除浮动"},"43.1":{t:"怎么清除",p:`

clear 属性

在浮动元素后添加一个空元素，对其设置 clear：both
优点：简单、代码少，浏览器兼容性好
缺点：需要添加大量无语义的代码，代码不够优雅，后期不容易维护



原理：元素的 ...`,l:"Interview/CSS/浮动.html#怎么清除",a:"怎么清除"},"44.0":{t:"原理",p:`相邻边框连接处的均分原理，将元素的宽高设置为 0，只设置 border，把任意三边隐藏掉，剩下的就是一个三角形
`,l:"Interview/CSS/画三角形.html",a:"原理"},"44.1":{t:"实现",p:`.test {
  width: 0;
  height: 0;
  border-top: 50px solid transparent;
  border-right: 50px solid tr ...`,l:"Interview/CSS/画三角形.html#实现",a:"实现"},"45.0":{t:"在标准的-css-盒子模型中-每个-html-元素被表示为一个矩形盒子",p:`盒子包括四个部分：

内存区域 content
内边距区域 padding
边框区域 border
外边距区域 margin

标准盒模型
计算宽高时，只包括内容区域
IE 盒模型
计算宽高时，包含内 ...`,l:"Interview/CSS/盒模型.html",a:"在标准的-css-盒子模型中-每个-html-元素被表示为一个矩形盒子"},"46.0":{t:"原因",p:`由于 HTML 中的换行符和空格字符引起的，这些空白字符会被解析为文本节点，而文本节点默认会应用一定的样式，导致 li 之间产生间隔
`,l:"Interview/CSS/空白间隔问题.html",a:"原因"},"46.1":{t:"解决",p:`

删除 HTML 代码中的空白字符


使用 flex 布局，将 ul 设置为 flex 容器，使 li 自动排列在一行内，间隔消失


父元素设置 font-size:0，子元素重新设置字体大小和 ...`,l:"Interview/CSS/空白间隔问题.html#解决",a:"解决"},"47.0":{t:"id-选择器",p:`类选择器
标签选择器
属性选择器
伪类选择器
伪元素选择器
后代选择器
相邻后代选择器
兄弟选择器
通配符选择器
`,l:"Interview/CSS/选择器.html",a:"id-选择器"},"47.1":{t:"优先级",p:`
同一级别：就近原则 后写的覆盖先写的
不同级别：
!important &gt; 内联样式 &gt; ID选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素 ...`,l:"Interview/CSS/选择器.html#优先级",a:"优先级"},"48.0":{t:"前者是标准浏览器中的用法-后者-ie8-以下",p:`
addEventListener可有冒泡，可有捕获；attachEvent只有冒泡，没有捕获。
前者事件名不带on，后者带on
前者回调函数中的this指向当前元素，后者指向window
第三个参数 ...`,l:"Interview/HTML/addEventListener-attachEvent.html",a:"前者是标准浏览器中的用法-后者-ie8-以下"},"49.0":{t:"为什么需要-async-和-defer",p:`js 是单线程的,如果没有 defer 或 async 属性,浏览器会立即加载并执行相应的脚本,不会等到后续加载的文档元素,读取到就会开始和执行,会阻塞后续文档的加载
defer 和 async 都是 ...`,l:"Interview/HTML/async和defer的区别.html",a:"为什么需要-async-和-defer"},"50.0":{t:"a-元素除了导航外-还有什么作用",p:`创建内部书签链接，在 href 中指定锚点的 ID 来实现
添加 download 属性 变为下载链接
`,l:"Interview/HTML/a标签.html",a:"a-元素除了导航外-还有什么作用"},"51.0":{t:"h5-新特性",p:`
为了更好的实现语义化，新增了 header、footer、nav、aside、article 等语义化标签
为了方便在客户端存储和获取数据，提供了 localStorage、sessionStora ...`,l:"Interview/HTML/H5新特性.html",a:"h5-新特性"},"52.0":{t:"优点",p:`
内容隔离：允许在一个网页中嵌套另一个网页，实现内容隔离，防止嵌套的内容对主页面的影响。
并行加载：允许在主页面加载的时候并行加载嵌套页面，提高页面并发性能。
代码复用：可以将共享的内容嵌套在多个页面 ...`,l:"Interview/HTML/iframe的优缺点.html",a:"优点"},"53.0":{t:"定义表单控件的关系-当用户选择-label-标签时-浏览器会自动将焦点转到和-label-标签相关的表单控件上",p:"&lt;label for=&quot;mobile&quot;&gt;Number:&lt;/label&gt; &lt;input type=&quot;text&quot; id=&quot;m ...",l:"Interview/HTML/label有什么作用.html",a:"定义表单控件的关系-当用户选择-label-标签时-浏览器会自动将焦点转到和-label-标签相关的表单控件上"},"54.0":{t:"相同点",p:`都是告知浏览器提前加载文件(图片、视频、js、css等)，但执行上是有区别的。
区别

prefetch预取：prefetch 是一个资源提示属性，用于告诉浏览器在页面加载完成后，异步地预取指定资源。 ...`,l:"Interview/HTML/prefetch-preload.html",a:"相同点"},"55.0":{t:"src",p:`
src 用于替换的当前元素
src用于指定外部资源的地址，通常用于引入外部文件，如图片、音频、视频、脚本等，指向的内容会嵌入到文档中当前标签所在的位置。
常用于&lt;img&gt;, &lt;sc ...`,l:"Interview/HTML/src和href的区别.html",a:"src"},"56.0":{t:"怎么实现浏览器内多个标签的通信",p:"\r",l:"Interview/HTML/浏览器内多个标签通信.html",a:"怎么实现浏览器内多个标签的通信"},"56.1":{t:"websocket",p:`

建立 WebSocket 连接，const socket = new WebSocket('ws://your-server-url')


监听消息事件：socket.addEventListe ...`,l:"Interview/HTML/浏览器内多个标签通信.html#websocket",a:"websocket"},"56.2":{t:"localstorage",p:`使用 localStorage，在一个标签页内使用 localStorage.setItem(key,value)内容，在另一个标签页里面监听 storage 事件
// 标签页1
&lt;input ...`,l:"Interview/HTML/浏览器内多个标签通信.html#localstorage",a:"localstorage"},"56.3":{t:"cookie-setinterval",p:`将要传递的消息存储在 cookie 中，每隔一段时间读取 cookie 信息
// 页面1
&lt;input id=&quot;name&quot;&gt;
&lt;input type=&quot ...`,l:"Interview/HTML/浏览器内多个标签通信.html#cookie-setinterval",a:"cookie-setinterval"},"57.0":{t:"对语义化的理解",p:"\r",l:"Interview/HTML/语义化的理解.html",a:"对语义化的理解"},"57.1":{t:"你是怎么理解语义化的-语义化的好处",p:`我认为 html 语义化主要指的是我们应该用合适的标签来划分网页内容的结构。html 的本质作用其实就是定义网页内容的结构，一个语义化的文档，能够使页面的结构更加清晰，易于理解。
这样不仅有利于开发者 ...`,l:"Interview/HTML/语义化的理解.html#你是怎么理解语义化的-语义化的好处",a:"你是怎么理解语义化的-语义化的好处"},"57.2":{t:"常见的语义化标签有哪些",p:`
header：页眉，网站标题、导航菜单等
nav：导航部分，通常包含网站的主要导航链接
main：主要内容区域
article：内容块、比如新闻文章、博客帖子等
aside：侧边栏
footer：页 ...`,l:"Interview/HTML/语义化的理解.html#常见的语义化标签有哪些",a:"常见的语义化标签有哪些"},"58.0":{t:"面试",p:`:::tip
面试题总结与归纳!
:::
`,l:"Interview/index.html",a:"面试"},"59.0":{t:"_1-块级作用域-引入-let-和-const-关键字-允许在块级作用域中声明变量-解决了变量提升和作用域污染的问题。",p:`
箭头函数：使用箭头(=&gt;)定义函数，简化了函数的书写，并且自动绑定了this。
模板字符串：使用反引号（\`）包裹字符串，可以在字符串中使用变量和表达式，实现更灵活的字符串拼接和格式化。
解构赋 ...`,l:"Interview/JavaScript/ES6.html",a:"_1-块级作用域-引入-let-和-const-关键字-允许在块级作用域中声明变量-解决了变量提升和作用域污染的问题。"},"60.0":{t:"作为浏览器脚本语言-javascript-的主要用途是和用户交互以及操作-dom-所以只能是单线程-如果不是单线程-会带来很复杂的同步问题-比如一个线程在-dom-节点上添加内容-另一个线程删除节点-此时浏览器不知道以那个为准。",p:`同一个时间只能做一件事。所有任务都需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着
所有任务可以分成两种，一种是宏任务，另一种是微任务
宏任务指的是，在 ...`,l:"Interview/JavaScript/EventLoop.html",a:"作为浏览器脚本语言-javascript-的主要用途是和用户交互以及操作-dom-所以只能是单线程-如果不是单线程-会带来很复杂的同步问题-比如一个线程在-dom-节点上添加内容-另一个线程删除节点-此时浏览器不知道以那个为准。"},"61.0":{t:"this-的绑定方式",p:`
默认绑定，非严格模式下 this 指向全局对象，严格模式下函数内的 this 指向 undefined，但是不会改变全局中 this 的指向
隐式绑定，当函数引用有上下文对象的时候，比如 obj.f ...`,l:"Interview/JavaScript/this.html",a:"this-的绑定方式"},"62.0":{t:"如何阻止事件冒泡和默认事件",p:`
标准的 DOM 对象中可以使用事件对象的 stopPropagation()方法来阻止冒泡，在 IE8 以下中 IE 的事件对象通过设置事件对象的 cancleBubble 属性为 true 来阻止 ...`,l:"Interview/JavaScript/事件.html",a:"如何阻止事件冒泡和默认事件"},"62.1":{t:"事件捕获和冒泡",p:`事件捕获阶段 处于目标阶段 事件冒泡阶段
事件流是一个事件沿着特定数据结构传播的过程。冒泡和捕获是事件流在 DOM 中两种不同的传播方法

事件捕获：当鼠标点击或者触发 dom 事件时，浏览器会从根节 ...`,l:"Interview/JavaScript/事件.html#事件捕获和冒泡",a:"事件捕获和冒泡"},"63.0":{t:"什么是作用域",p:`作用域就是可访问变量的集合，做大的作用就是隔离变量，不同作用域下同名变量不会冲突
`,l:"Interview/JavaScript/作用域闭包.html",a:"什么是作用域"},"63.1":{t:"作用域的类型",p:`全局作用域、函数作用域和块级作用域
`,l:"Interview/JavaScript/作用域闭包.html#作用域的类型",a:"作用域的类型"},"63.2":{t:"函数作用域",p:`指的是声明在函数内部的变量，函数的作用域在函数定义的时候决定的
`,l:"Interview/JavaScript/作用域闭包.html#函数作用域",a:"函数作用域"},"63.3":{t:"块作用域",p:`块作用域由 {}包括，if 和 for 语句中的{}也属于块作用域
在块级作用域中，可以通过 let 和 const 声明变量，这个变量在块级作用域外无法被访问
`,l:"Interview/JavaScript/作用域闭包.html#块作用域",a:"块作用域"},"63.4":{t:"var-let-const-区别",p:`var：没有块级作用域概念，可以跨块访问，会变量提升
let：只能在块作用域中访问，不能跨块访问，也不能跨函数访问，没有变量提升，不能重复声明
const：用来定义常量，声明时必须赋值，只能在块级作用 ...`,l:"Interview/JavaScript/作用域闭包.html#var-let-const-区别",a:"var-let-const-区别"},"63.5":{t:"作用域链",p:"当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级的执行上下文的变量对象中查找，如果还没有找到，一直找到全局上下文的变量对象，也就是全局对象。这种由多个执行上下文的变量对象构 ...",l:"Interview/JavaScript/作用域闭包.html#作用域链",a:"作用域链"},"63.6":{t:"闭包",p:`有权访问另外一个函数作用域中的变量的函数，主要的就两点，一是是一个函数，二是能访问另外一个函数作用域中的变量
闭包的特性：

可以访问当前函数以外的变量
即使外部函数已经返回，闭包仍然能访问外部函数定 ...`,l:"Interview/JavaScript/作用域闭包.html#闭包",a:"闭包"},"64.0":{t:"原型的作用",p:`原型被定义为给其它对象提供共享属性的对象，函数的实例可以共享原型上的属性和方法
`,l:"Interview/JavaScript/原型-原型链.html",a:"原型的作用"},"64.1":{t:"原型链",p:"作用就是当你在访问一个对象上的属性的时候，如果该对象内部不存在这个属性，那么就会去它的proto属性所指向的原型对象上查找，如果依旧不存在，就会去原型的proto属性所指向的原型对象上去查找，直到找到 ...",l:"Interview/JavaScript/原型-原型链.html#原型链",a:"原型链"},"64.2":{t:"原型链和作用域链的区别",p:`原型链是查找对象上的属性，作用域链是查找当前上下文中的变量
`,l:"Interview/JavaScript/原型-原型链.html#原型链和作用域链的区别",a:"原型链和作用域链的区别"},"64.3":{t:"proto、prototype、constructor",p:`
js 对象分为两种，普通对象和函数对象
proto 和 constructor 是对象独有的，prototype 是函数对象独有的，作用是给特定类型的所有实例提供共享的属性和方法，但是在 js 中， ...`,l:"Interview/JavaScript/原型-原型链.html#proto、prototype、constructor",a:"proto、prototype、constructor"},"65.0":{t:"什么是内存泄漏",p:`
内存泄漏是指应当被回收的对象没有被正常回收,导致内存占用越来越高,会导致应用程序速度变慢,高延时,奔溃等问题

`,l:"Interview/JavaScript/垃圾回收.html",a:"什么是内存泄漏"},"65.1":{t:"内存泄漏的常见原因",p:`
创建全局变量
被遗忘的计时器或回调函数
闭包
脱离 DOM 的引用

JavaScript 有自动的垃圾回收机制，当一个值，在内存中失去引用时，垃圾回收机制会根据特殊的算法找到它，并将其回收，释放内 ...`,l:"Interview/JavaScript/垃圾回收.html#内存泄漏的常见原因",a:"内存泄漏的常见原因"},"65.2":{t:"标记清除方法",p:`
标记阶段：垃圾回收器从根对象开始遍历，每一个可以从根对象访问到的对象都会被添加一个标识，这个对象被标记为可到达对象
清除阶段：垃圾回收器对堆内存从头到尾进行线性遍历，如果发现有对象没有被标识为可到达 ...`,l:"Interview/JavaScript/垃圾回收.html#标记清除方法",a:"标记清除方法"},"65.3":{t:"引用计数法",p:`将资源被引用的次数保存起来,当被引用次数为零时释放,局限性是当出现循环引用时,互相引用的对象不会被回收
`,l:"Interview/JavaScript/垃圾回收.html#引用计数法",a:"引用计数法"},"65.4":{t:"怎么防止内存泄漏",p:`
及时清除引用
使用 WeakMap 和 WeakSet，因为它们对于值的引用不计入垃圾回收机制

`,l:"Interview/JavaScript/垃圾回收.html#怎么防止内存泄漏",a:"怎么防止内存泄漏"},"66.0":{t:"什么是执行上下文",p:`当前 JavaScript 代码被解析和执行所在环境的抽象概念
JavaScript 代码都是在执行上下文中运行的，执行上下文就是指当前环境中的变量、函数声明、作用域链、this 等信息
`,l:"Interview/JavaScript/执行上下文和执行栈.html",a:"什么是执行上下文"},"66.1":{t:"执行上下文分类",p:`
全局执行上下文：只有一个，浏览器环境下为 window
函数执行上下文：存在无数个，每当一个函数被调用时，都会为该函数创建一个新的上下文
eval 执行上下文：运行在 eval 函数中的代码

对于 ...`,l:"Interview/JavaScript/执行上下文和执行栈.html#执行上下文分类",a:"执行上下文分类"},"66.2":{t:"执行上下文的特点",p:`
单线程，只在主线程上运行
同步执行，从上向下按顺序执行
全局上下文只有一个，也就是 window 对象
函数每调用一次就会产生一个新的执行上下文环境

`,l:"Interview/JavaScript/执行上下文和执行栈.html#执行上下文的特点",a:"执行上下文的特点"},"66.3":{t:"什么是执行栈",p:`是一种先进后出的数据结构，用来存储代码运行的所有执行上下文

当 JS 引擎第一次遇到 js 脚本时，会创建一个全局的执行上下文并压入当前执行栈
每当 JS 引擎调用一个函数的时候，会为该函数创建一个 ...`,l:"Interview/JavaScript/执行上下文和执行栈.html#什么是执行栈",a:"什么是执行栈"},"66.4":{t:"执行上下文的生命周期",p:`主要分为两个阶段：
1.创建阶段：在这个阶段生成变量对象，建立作用域链，确定 this 指向
2.执行阶段：对变量进行赋值，函数引用，执行其它代码
`,l:"Interview/JavaScript/执行上下文和执行栈.html#执行上下文的生命周期",a:"执行上下文的生命周期"},"66.5":{t:"什么是变量对象",p:`变量对象是和执行上下文相关的数据作用域，存储了上下文中定义的变量和函数声明
是一个抽象的概念，在全局执行上下文中，变量对象就是全局对象，在顶层 js 代码中，this 指向全局对象，全局变量会作为该对 ...`,l:"Interview/JavaScript/执行上下文和执行栈.html#什么是变量对象",a:"什么是变量对象"},"67.0":{t:"javascript-是什么语言",p:`JavaScript 是一种弱类型（可以发生隐式类型转换）、动态的语言


动态语言：在运行过程中需要检查数据类型的语言


静态语言：在使用之前就需要确认其变量数据类型的语言


`,l:"Interview/JavaScript/数据类型.html",a:"javascript-是什么语言"},"67.1":{t:"js-都有什么数据类型",p:`基本数据类型：string、number、boolean、null、undefined、symbol（ES6 新增）、bigint（ES10 新增）
引用数据类型：object （普通对象-objec ...`,l:"Interview/JavaScript/数据类型.html#js-都有什么数据类型",a:"js-都有什么数据类型"},"67.2":{t:"为什么要新增-symbol",p:"主要是为了解决全局变量冲突的问题，比如定义了一个全局对象，用来缓存数据，现在有两个 js 文件需要往这个对象中添加键名，由于 js 文件在不同模块，所以可能添加相同的键名，就会出现冲突的问题，所以 S ...",l:"Interview/JavaScript/数据类型.html#为什么要新增-symbol",a:"为什么要新增-symbol"},"67.3":{t:"如果想要复用一个-symbol-该怎么操作",p:`使用Symbol.for('字符串')，传入相同的字符串，一定会返回相同的 symbol 类型的值
使用 symbol 值作为对象的属性名，通过 for in、Object.keys 都是获取不到的， ...`,l:"Interview/JavaScript/数据类型.html#如果想要复用一个-symbol-该怎么操作",a:"如果想要复用一个-symbol-该怎么操作"},"67.4":{t:"为什么要新增-bigint-作用是什么",p:`支持比 Number 数据类型支持的范围更大的整数值
创建 bigint，只需要在数字末尾追加 n 或者使用 BigInt()构造函数来创建
`,l:"Interview/JavaScript/数据类型.html#为什么要新增-bigint-作用是什么",a:"为什么要新增-bigint-作用是什么"},"67.5":{t:"null-和-undefined-的区别",p:`

null
空值 语义是表示一个对象被认为的重置为空对象，不是一个变量最原始的状态，使用场景

明确定义的变量在将来是用于保存对象的，就应该将这个变量初始化为 null，有助于区分 null 和 u ...`,l:"Interview/JavaScript/数据类型.html#null-和-undefined-的区别",a:"null-和-undefined-的区别"},"67.6":{t:"null-是对象吗-为什么",p:`typeof null == 'object'
从逻辑上来看，null 值表示一个空对象指针，代表的其实就是一个空对象
在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型 ...`,l:"Interview/JavaScript/数据类型.html#null-是对象吗-为什么",a:"null-是对象吗-为什么"},"67.7":{t:"javascript-数据如何存储",p:`基本数据类型用栈存储，栈内存的特点的分配固定大小的内存空间，可以快速分配和释放，而基本数据类型的值是不可变的，所以可以存储在栈中，可以直接访问和复制
引用数据类型用堆存储，堆内存是动态分配，可以容纳各 ...`,l:"Interview/JavaScript/数据类型.html#javascript-数据如何存储",a:"javascript-数据如何存储"},"67.8":{t:"判断数据类型的方法",p:`
typeof：可以判断除了 null 之外的原始数据类型，判断 null 为 object，对于引用类型，会判断为 function 和 object 两种类型 直接在计算机底层基于数据类型的二进制 ...`,l:"Interview/JavaScript/数据类型.html#判断数据类型的方法",a:"判断数据类型的方法"},"67.9":{t:"怎么判断一个数组",p:`
instanceof方法：使用instanceof运算符判断对象是否为数组，返回布尔值。例如：arr instanceof Array。
constructor方法：使用constructor属性返 ...`,l:"Interview/JavaScript/数据类型.html#怎么判断一个数组",a:"怎么判断一个数组"},"67.10":{t:"如何判断一个对象是否为空",p:`
Object.keys() Object.keys(obj).length === 0
for in 循环，if (obj.hasOwnProperty(key)) {return false}
J ...`,l:"Interview/JavaScript/数据类型.html#如何判断一个对象是否为空",a:"如何判断一个对象是否为空"},"67.11":{t:"为什么没-0-1-0-2-0-3-怎么解决",p:`原因：

当计算机计算 0.1+0.2 的时候，实际上计算的是这两个数字在计算机里所存储的二进制，0.1 和 0.2 在转换为二进制表示的时候会出现位数无限循环的情况。js 中是以 64 位双精度格式 ...`,l:"Interview/JavaScript/数据类型.html#为什么没-0-1-0-2-0-3-怎么解决",a:"为什么没-0-1-0-2-0-3-怎么解决"},"67.12":{t:"isnan-和-number-isnan-函数的区别",p:`isNaN
接收参数后,会尝试将这个参数转换成数值,任何不能被转换成数值的值都会返回 true,因此非数字值传入也会返回 true,会影响 NaN 的判断
Number.isNaN
会首先判断传入参数 ...`,l:"Interview/JavaScript/数据类型.html#isnan-和-number-isnan-函数的区别",a:"isnan-和-number-isnan-函数的区别"},"67.13":{t:"object-is-和-的区别",p:`== 两边类型不一致,会进行强制类型转换再进行比较
=== 如果两边的类型不一致,不会做强制类型转换,直接返回 false
Object.is 一般情况下和===相同,处理了一些特殊的情况 比如-0  ...`,l:"Interview/JavaScript/数据类型.html#object-is-和-的区别",a:"object-is-和-的区别"},"67.14":{t:"为什么",p:`隐式类型转换
转换过程：

[]转换成数字 0
！[]首先转换成布尔值 false，再转换成数字为 0

`,l:"Interview/JavaScript/数据类型.html#为什么",a:"为什么"},"67.15":{t:"如何让-if-a-1-a-2-成立",p:`var a = {
  value: 0,
  valueOf: function () {
    this.value++;
    return this.value;
  },
};

`,l:"Interview/JavaScript/数据类型.html#如何让-if-a-1-a-2-成立",a:"如何让-if-a-1-a-2-成立"},"67.16":{t:"quot-1-quot-quot-2-quot-quot-3-quot-map-parseint-答案是多少",p:`
答案 [1, NaN, NaN] ​
parseInt 第一个参数str，即要解析的字符串
parseInt 第二个参数radix，基数（进制），范围2-36 ，以radix进制的规则去解析str字 ...`,l:"Interview/JavaScript/数据类型.html#quot-1-quot-quot-2-quot-quot-3-quot-map-parseint-答案是多少",a:"quot-1-quot-quot-2-quot-quot-3-quot-map-parseint-答案是多少"},"67.17":{t:"set、weakset、map、weakmap-的区别",p:`Set

成员不能重复
只有健值，没有健名，有点类似数组。
可以遍历，方法有 add, delete,has

WeakSet

成员都是对象
成员都是弱引用，随时可以消失。 可以用来保存 DOM 节 ...`,l:"Interview/JavaScript/数据类型.html#set、weakset、map、weakmap-的区别",a:"set、weakset、map、weakmap-的区别"},"68.0":{t:"ajax",p:`是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法
用途：无刷新获取服务器数据


优点：

通过异步 ...`,l:"Interview/JavaScript/网络请求.html",a:"ajax"},"68.1":{t:"axios、ajax、fetch-的区别",p:`
ajax 是一种技术统称，基于原生的 XHR 开发，已经有了 fetch 的替代方案。
fetch 是一个原生的 API，用于进行网络请求，支持 Promise API，但在某些方面功能较为简单，需 ...`,l:"Interview/JavaScript/网络请求.html#axios、ajax、fetch-的区别",a:"axios、ajax、fetch-的区别"},"69.0":{t:"_28-cdn",p:"&gt; CDN 的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或者网络中，在用户访问网站的时候，将其指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请 ...",l:"Interview/network/CDN.html",a:"_28-cdn"},"70.0":{t:"检查浏览器中是否缓存过该域名对应的-ip-地址",p:`
如果浏览器缓存中没有命中，将继续查找本级（操作系统）是否缓存过该 IP
向本地域名解析服务系统发起域名解析的请求（一般是本地运营商的机房）
向根域名解析服务器发起域名解析服务请求
根域名服务器返回  ...`,l:"Interview/network/DNS.html",a:"检查浏览器中是否缓存过该域名对应的-ip-地址"},"71.0":{t:"_1-get-是从服务器获取指定的资源-post-是根据请求报文对指定的资源做出处理",p:`
get 请求的参数一般放在 URL 中，浏览器对 URL 的长度有限制；post 请求携带的参数一般是写在 body 报文中，没有限制
get 请求是安全且幂等的，无论操作多少次，服务器上的数据都是 ...`,l:"Interview/network/get-post.html",a:"_1-get-是从服务器获取指定的资源-post-是根据请求报文对指定的资源做出处理"},"72.0":{t:"区别",p:`HTTP 是超文本传输协议，明文传输，存在安全风险的问题，HTTPS 是为了解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TSL 安全协议，使得报文能够密文传输
H ...`,l:"Interview/network/HTTP-HTTPS.html",a:"区别"},"72.1":{t:"https-解决了哪些问题",p:`HTTP 存在的问题：窃听风险：（通信链路上可以获取通信内容，用户信息容易泄露），篡改风险：（强制植入垃圾广告），冒充风险
HTTPS 在 HTTP 和 TCP 之间加入了 SSL/TSL 协议，将信 ...`,l:"Interview/network/HTTP-HTTPS.html#https-解决了哪些问题",a:"https-解决了哪些问题"},"72.2":{t:"混合加密",p:`通过混合加密的方法保证信息的机密性，采用对称加密和非对称加密的方式在通信建立前采用非对称加密的方式交换会话密钥，在通信过程中使用对称加密的方式进行加密明文数据
`,l:"Interview/network/HTTP-HTTPS.html#混合加密",a:"混合加密"},"72.3":{t:"https-握手过程",p:`
第一步，客户端给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法
第二步，服务端确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数
第三步 ...`,l:"Interview/network/HTTP-HTTPS.html#https-握手过程",a:"https-握手过程"},"72.4":{t:"对称加密和非对称加密",p:`
对称加密： 对称加密指的就是加密和解密使用同一个秘钥，所以叫做对称加密。对称加密只有一个秘钥。
非对称加密: 加密和解密使用不同的秘钥，一把作为公开的公钥，另一把作为私钥。公钥加密的信息，只有私钥才 ...`,l:"Interview/network/HTTP-HTTPS.html#对称加密和非对称加密",a:"对称加密和非对称加密"},"72.5":{t:"怎么实现-token-加密",p:`
需要一个 secret（随机数）
后端利用 secret 和加密算法(如：HMAC-SHA256)对 payload(如账号密码) 生成一个字符串(token)，返回前端
前端每次 request  ...`,l:"Interview/network/HTTP-HTTPS.html#怎么实现-token-加密",a:"怎么实现-token-加密"},"73.0":{t:"http1-1",p:"\r",l:"Interview/network/HTTP1.html",a:"http1-1"},"73.1":{t:"优点",p:`简单、灵活和好扩展、应用广泛和跨平台
简单：HTTP 的基本报文格式就是 header+body，头部信息也是 key-value 简单文本的形式，易于理解，学习和使用的门槛低
灵活和易于扩展：HTT ...`,l:"Interview/network/HTTP1.html#优点",a:"优点"},"73.2":{t:"缺点",p:`无状态、明文传输、不安全：浏览器不会记录 HTTP 的状态，当要完成有关联性的操作时会麻烦，可以使用 cookie 解决；明文传输，内容很容易被窃取；
`,l:"Interview/network/HTTP1.html#缺点",a:"缺点"},"73.3":{t:"性能",p:`基于 TCP/IP，使用请求-应答的通信模式
在 HTTP 1.0 中，每次发起一个请求，都要新建一次 TCP 链接，而且是串行请求，TCP 的连接和断开，增加了通信开销
HTTP1.0 为了解决这个 ...`,l:"Interview/network/HTTP1.html#性能",a:"性能"},"73.4":{t:"如何优化",p:`主要从以下三个方面来进行考虑：

尽量避免发送 HTTP 请求
在需要发送 HTTP 请求的时候，考虑如何减少 HTTP 请求数
减少服务器的 HTTP 响应的数据大小

避免发送 HTTP 请求
对 ...`,l:"Interview/network/HTTP1.html#如何优化",a:"如何优化"},"73.5":{t:"http2",p:"\r",l:"Interview/network/HTTP1.html#http2",a:"http2"},"73.6":{t:"有什么优点",p:"HTTP2 的出现是为了解决 HTTP1.1 存在的问题，HTTP1.1 中存在以下问题：并发连接有限（比如谷歌浏览器的最大并发连接数是 6 个，而且每一个连接都要经过 TCP 和 TSL 握手的耗时 ...",l:"Interview/network/HTTP1.html#有什么优点",a:"有什么优点"},"74.0":{t:"host-客户端发送请求的时候-用于指定服务器的域名",p:`
Connection：用于客户端要求服务器使用 HTTP 长连接机制
Content-length：服务器在返回数据的时候，表示本次回应的数据长度
Content-Type：用于服务器回应时，告诉客 ...`,l:"Interview/network/HTTP常见字段有哪些.html",a:"host-客户端发送请求的时候-用于指定服务器的域名"},"75.0":{t:"概念",p:`当用户在身份认证服务器上登录过一次之后，即可获取访问单点登录系统中的其它关联系统和应用软件的权限。
实现机制：

当用户第一次访问应用系统 1 的时候，因为还没有登录，会被引导到认证系统中进行登录；根 ...`,l:"Interview/network/SSO单点登录.html",a:"概念"},"76.0":{t:"为什么会有-tcp-ip-协议",p:`同一台设备进程之间进行通信，可以通过管道、共享内存、信号、消息队列等方式，而不同的设备之间想要进行通信，就需要网络进行通信，但是设备是多样性的，为了兼容多种设备，就协商出了一套通用的网络协议
`,l:"Interview/network/TCP-IP.html",a:"为什么会有-tcp-ip-协议"},"76.1":{t:"什么是-tcp",p:`面向连接的、可靠的、基于字节流的传输层通信协议
面向连接：一对一
可靠的：保证一个报文一定能到达接收端
字节流
`,l:"Interview/network/TCP-IP.html#什么是-tcp",a:"什么是-tcp"},"76.2":{t:"tcp-ip-网络模型有几层",p:`应用层：
应用层处于最上层，用户能够直接接触到的就是应用层，比如手机和电脑上的软件。应用层的作用主要就是产生数据，将数据传给传输层。应用层工作在系统的用户态，而传输层之下的工作在内核态
传输层：
应用 ...`,l:"Interview/network/TCP-IP.html#tcp-ip-网络模型有几层",a:"tcp-ip-网络模型有几层"},"76.3":{t:"tcp-头格式有哪些",p:`序列号：在建立连接的时候由计算机生成的随意数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就累加一次该数据字节数的大小。用来解决网络包乱序的问题
确认应答号：指下一次期望收到的数据的序 ...`,l:"Interview/network/TCP-IP.html#tcp-头格式有哪些",a:"tcp-头格式有哪些"},"76.4":{t:"为什么需要-tcp-协议-工作在那一层",p:`IP 层是不可靠的，不能保证网络包的交付，不保证网络包的按序交付，不保证网络包中数据的完整性。如果需要保证网络数据包的可靠性，需要 TCP 来负责，工作在传输层
`,l:"Interview/network/TCP-IP.html#为什么需要-tcp-协议-工作在那一层",a:"为什么需要-tcp-协议-工作在那一层"},"76.5":{t:"三次握手",p:`一开始，客户端和服务端都是 CLOSE 状态，先是服务端主动监听某个端口，处于 LISTEN 状态
客户端随机初始化序列号，把 SYN 标志置为 1，表示当前报文为 SYN 报文，然后把第一个 SYN ...`,l:"Interview/network/TCP-IP.html#三次握手",a:"三次握手"},"76.6":{t:"四次挥手",p:`
第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态，停止发送数据，等待服务端的确认
第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文 ...`,l:"Interview/network/TCP-IP.html#四次挥手",a:"四次挥手"},"76.7":{t:"ssl-断开连接后如何恢复",p:`通过 session ID：
使用 session ID 的方式，每一次的会话都有一个编号，当对话中断后，下一次重新连接时，只要客户端给出这个编号，服务器如果有这个编号的记录，那么双方就可以继续使用以 ...`,l:"Interview/network/TCP-IP.html#ssl-断开连接后如何恢复",a:"ssl-断开连接后如何恢复"},"76.8":{t:"tcp-和-udp-区别",p:`
TCP 是面向连接的，udp 是无连接的即发送数据前不需要先建立链接
TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失， 不重复，且按序到达;UDP 尽最大努力交付，即 ...`,l:"Interview/network/TCP-IP.html#tcp-和-udp-区别",a:"tcp-和-udp-区别"},"77.0":{t:"_1xx",p:`提示信息，表示目前是协议处理的中间状态，还需要后续的操作
`,l:"Interview/network/常见状态码.html",a:"_1xx"},"77.1":{t:"_2xx",p:`成功，报文已经收到并且被正常处理
* 200 OK 最常见的成功状态码，表示一切正常
* 204  No Content  成功，但是响应头没有body数据
* 206 Partial Content ...`,l:"Interview/network/常见状态码.html#_2xx",a:"_2xx"},"77.2":{t:"_3xx",p:`表示客户端请求的资源发生了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向
* 301 Moved Permanently 永久重定向，说明请求的资源已经不存在了，需要用新的URL再 ...`,l:"Interview/network/常见状态码.html#_3xx",a:"_3xx"},"77.3":{t:"_4xx",p:`表示客户端发送的报文有误，服务器无法处理
* 400 表示客户端请求的报文有错误
* 403 Forbidden 表示服务器禁止访问资源，不是客户端的请求出错
* 404 Not Found 请求的资 ...`,l:"Interview/network/常见状态码.html#_4xx",a:"_4xx"},"77.4":{t:"_5xx",p:`客户端请求正确，但是服务器内部发生了错误
* 500 服务器发生错误
* 501 表示客户端请求的功能还不支持
* 502 通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服 ...`,l:"Interview/network/常见状态码.html#_5xx",a:"_5xx"},"78.0":{t:"简单请求",p:`
GET
HEAD
POST
Content-Type： text / plain 、multipart / form-data 、application / x-www-form-urlencode ...`,l:"Interview/network/简单请求和复杂请求.html",a:"简单请求"},"79.0":{t:"短沦陷",p:`
浏览器每隔一段时间向服务器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行 响应。
这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端 ...`,l:"Interview/network/长短轮询.html",a:"短沦陷"},"80.0":{t:"缓存",p:`缓存可以减少网络 IO 消耗，提高访问速度。浏览器缓存是一种操作简单，效果显著的前端性能优化手段。
通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端和服务器之间进行多次往返通信，这会延迟浏 ...`,l:"Interview/Performance/存储篇.html",a:"缓存"},"80.1":{t:"强缓存",p:"强缓存是利用 http 头中的 Expires 和 Cache-Control 两个字段来控制的。强缓存中，当请求再次发出时，浏览器会根据其中的 expires 和 cache-control 判断目 ...",l:"Interview/Performance/存储篇.html#强缓存",a:"强缓存"},"80.2":{t:"协商缓存",p:`协商缓存依赖于浏览器和服务端之间的通信，协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源
如果服务端提示资源未改动，304 No ...`,l:"Interview/Performance/存储篇.html#协商缓存",a:"协商缓存"},"80.3":{t:"决策指南",p:"当我们的资源不可复用的时候，之间为 Cache-Control 为 no-store，拒绝一切形式的缓存；否则考虑是否每次都需要向服务器进行缓存有效确认，如果需要，设置为 no-cache，否则考虑该 ...",l:"Interview/Performance/存储篇.html#决策指南",a:"决策指南"},"80.4":{t:"本地存储",p:"\r",l:"Interview/Performance/存储篇.html#本地存储",a:"本地存储"},"80.5":{t:"cookie",p:`HTTP 是一个无状态协议，服务器接收客户端的请求，返回一个响应，然后就结束了，服务器没有记录任何关于客户端的任何信息，下次请求的时候，不知道客户端是谁
cookie 就是一个存储在浏览器中的很小的一 ...`,l:"Interview/Performance/存储篇.html#cookie",a:"cookie"},"80.6":{t:"localstorage",p:`持久化的本地存储，存储在其中的数据是永远不会过期的，使其消失的唯一办法就是手动删除；常用于存储一些内容稳定的资源
`,l:"Interview/Performance/存储篇.html#localstorage",a:"localstorage"},"80.7":{t:"sessionstorage",p:"会话级别的存储，当会话结束（页面被关闭的时候）存储内容也会随之被释放；即便是相同域名下的两个窗口，只要不在同一个浏览器窗口中打开，那么它们的 SessionStorage 无法共享。存储只适用于当前会 ...",l:"Interview/Performance/存储篇.html#sessionstorage",a:"sessionstorage"},"80.8":{t:"indexdb",p:`运行在浏览器上的非关系型数据库。一般来说是没有存储上限的，不仅可以存储字符串，也可以存储二进制数据。
当数据的复杂度和规模上升到了 LocalStorage 无法解决的程度，可以使用 IndexDB
`,l:"Interview/Performance/存储篇.html#indexdb",a:"indexdb"},"80.9":{t:"cdn-的缓存和回源机制",p:`内容分发网络指的是一组分布在各个地区的服务器。这些服务器存储着数据的副本，所有服务器可以根据哪些服务器和用户距离最近，来满足数据的请求。
缓存、本都存储带来的性能提升，都是只能在拿到数据后存起来这件事 ...`,l:"Interview/Performance/存储篇.html#cdn-的缓存和回源机制",a:"cdn-的缓存和回源机制"},"81.0":{t:"懒加载",p:"针对图片加载时机的优化，在一些图片量比较大的网站，如果尝试在用户打开页面的时候，就把所有的图片资源加载完毕，那么很可能会造成白屏、卡顿等现象，因为图片太多了，浏览器可能做不到一次性处理那么多的任务。实 ...",l:"Interview/Performance/应用篇.html",a:"懒加载"},"81.1":{t:"防抖与节流",p:`本质上都是闭包
节流:通过在一段时间内无视后来产生的回调请求来实现的
防抖:在一段时间内,无论调用多少次,只执行最后一次
`,l:"Interview/Performance/应用篇.html#防抖与节流",a:"防抖与节流"},"82.0":{t:"服务端渲染",p:`首先是客户端渲染，在客户端渲染模式下，服务端会把渲染需要的静态文件发送给客户端，客户端加载过来之后，自己在浏览器里跑一遍 JS，生成相应的 DOM，这种特性使得客户端代码渲染的源代码很简洁。
服务端渲 ...`,l:"Interview/Performance/渲染篇.html",a:"服务端渲染"},"82.1":{t:"浏览器",p:`渲染过程：简单来说就是渲染引擎根据 HTML 文件描述构建相应的数学模型了。调用浏览器各个模块，将网页资源代码转换成图像结果，这个过程就是渲染过程。


HTML 解释器：将 HTML 文档经过词法分 ...`,l:"Interview/Performance/渲染篇.html#浏览器",a:"浏览器"},"82.2":{t:"css-优化",p:`
避免使用通配符，只对需要用到的元素进行选择
关注可以通过继承实现的属性，避免重复匹配重复定义
少用标签选择器
减少嵌套

CSS 是阻塞渲染的资源，DOM 树和 CSSOM 合并构建成渲染树，浏览器 ...`,l:"Interview/Performance/渲染篇.html#css-优化",a:"css-优化"},"82.3":{t:"dom-优化",p:`减少 DOM 操作 ⭐⭐
回流：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性，然后再将计算的结果绘制出来，这个过程就叫回流 ...`,l:"Interview/Performance/渲染篇.html#dom-优化",a:"dom-优化"},"83.0":{t:"在网络层面进行优化-有三个地方可以进行优化-分别是-dns-解析、tcp-连接和-http-请求-响应-对于-dns-和-tcp-连接这两个步骤-前端可以做的非常有限-核心是在-http-连接上进行优化。",p:`HTTP 优化有两个大方向：减少请求次数和减少单次请求所花费的时间。主要通过 webpack 去优化：
`,l:"Interview/Performance/网络篇.html",a:"在网络层面进行优化-有三个地方可以进行优化-分别是-dns-解析、tcp-连接和-http-请求-响应-对于-dns-和-tcp-连接这两个步骤-前端可以做的非常有限-核心是在-http-连接上进行优化。"},"83.1":{t:"webpack",p:"\r",l:"Interview/Performance/网络篇.html#webpack",a:"webpack"},"83.2":{t:"不要让-loader-做太多事情",p:"不要让 loader 做太多事情，比如说 babel-loader，babel-loader 功能很强大，但是也很慢，可以使用 include 或 exclude 帮我们避免不必要的转译，或者通过开启 ...",l:"Interview/Performance/网络篇.html#不要让-loader-做太多事情",a:"不要让-loader-做太多事情"},"83.3":{t:"处理第三方库",p:`使用 DllPlugin，这个插件会把第三方库单独打包到一个文件中，这个文件就是一个单纯的依赖库。这个依赖库不会跟着你的业务代码一起被打包，只有当依赖自身发生版本变化时才会重新打包。
使用 DllPl ...`,l:"Interview/Performance/网络篇.html#处理第三方库",a:"处理第三方库"},"83.4":{t:"使用-happypack-将-loder-由单进程转换成多进程",p:"webpack 是单线程的，如果同一时刻存在多个任务，只能排队一个一个的等待处理，但是 CPU 是多核的，Happypack 会充分释放 CPU 在多核并发方面的优势，帮我们把任务分解给多个子进程去并 ...",l:"Interview/Performance/网络篇.html#使用-happypack-将-loder-由单进程转换成多进程",a:"使用-happypack-将-loder-由单进程转换成多进程"},"83.5":{t:"构建结果体积压缩",p:`将文件结果可视化，找出导致体积过大的原因
包组成可视化工具：webpack-bundle-analyer，配置方式和普通 plugin 一样，能够以矩形树图的形式将包内各个模块的大小和依赖关系呈现出来 ...`,l:"Interview/Performance/网络篇.html#构建结果体积压缩",a:"构建结果体积压缩"},"83.6":{t:"gzip-压缩",p:"在请求头中通过 accept-encoding：gzip 来开启 Gzip 压缩，服务端压缩，客户端解压，一般情况下，如果处理的是具备一定规模的项目，压缩后通常能减少响应 70%左右的大小。Gzip  ...",l:"Interview/Performance/网络篇.html#gzip-压缩",a:"gzip-压缩"},"83.7":{t:"图片优化",p:`图片在所有资源中所占的比重是非常大的，当下应用比较广泛的 Web 图片格式有 JPEG/JPG、PNG、WebP、Base64、SVG 等。
首先，在计算机中，像素是用二进制表示的，不同的图片格式中像 ...`,l:"Interview/Performance/网络篇.html#图片优化",a:"图片优化"},"83.8":{t:"jpeg-jpg",p:`有损压缩、体积小、加载快、不支持透明
最大的特点就是有损压缩，这种压缩算法很高效，所有 JPG 是一种非常轻巧的图片格式，JPG 格式有 24 位存储单个图，可以呈现多达 1600 万中颜色，一般场景 ...`,l:"Interview/Performance/网络篇.html#jpeg-jpg",a:"jpeg-jpg"},"83.9":{t:"png",p:"是一种无损压缩的高保真的图片格式，8 和 24 代表的是二进制的位数，PNG-8 最多支持 256 种颜色，PNG-24 最多支持 1600 万种颜色，PNG 图片具有比 JPG 更强的色彩表现力，对 ...",l:"Interview/Performance/网络篇.html#png",a:"png"},"83.10":{t:"svg",p:`文本文件、体积小、不失真、兼容性好
SVG 是一种基于 XML 语法的图像格式，SVG 对图像的处理不是基于像素点，而是基于对图像的形状描述。对比 PNG 和 JPG，文件体积更小，可压缩性更强。最显 ...`,l:"Interview/Performance/网络篇.html#svg",a:"svg"},"83.11":{t:"base64",p:`文本文件、依赖编码、小图标解决方案
和精灵图一样，都是用于解决小图标的，精灵图就是将小图标合并到一张图片上，然后利用 CSS 的背景定位来显示其中每一部分的技术。Base64 的出现，也是为了减少加载 ...`,l:"Interview/Performance/网络篇.html#base64",a:"base64"},"83.12":{t:"webp",p:`Google 开发的旨在加快图片加载速度的图片格式，支持有损压缩和无损压缩。
优点：具备 JPG、PNG 一样的优点，可以显示动态图片。
缺点：对除 Chrome 之外的浏览器兼容性较差，会增加服务端 ...`,l:"Interview/Performance/网络篇.html#webp",a:"webp"},"84.0":{t:"跨站伪造请求",p:`

防护原理：

使用CSRF Token进行验证
验证请求来源
验证HTTP Referer头



`,l:"Interview/Safe/SCRF.html",a:"跨站伪造请求"},"85.0":{t:"就是通过把-sql-命令插入到-web-表单递交或输入域名或页面请求的查询字符串-最终达到欺骗服务器执行恶意的-sql-命令",p:`

总的来说有以下几点

永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双&quot;-&quot;进行转换等
永远不要使用动态拼装 SQL，可以使用参数化 ...`,l:"Interview/Safe/SQl注入.html",a:"就是通过把-sql-命令插入到-web-表单递交或输入域名或页面请求的查询字符串-最终达到欺骗服务器执行恶意的-sql-命令"},"86.0":{t:"xss-cross-site-scripting-攻击指的是攻击者往-web-页面里插入恶意-html-标签或者-javascript-代码。比如-攻击者在论坛中放一个看似安全的链接-骗取用户点击后-窃取-cookie-中的用户私密信息-或者攻击者在论坛中加一个恶意表单-当用户提交表单的时候-却把信息传送到攻击者的服务器中-而不是用户原本以为的信任站点",p:`

防护原理：

对用户输入进行合适的转义和过滤
使用安全的模板引擎或自动转义函数
使用 HTTP 头部中的 Content Security Policy (CSP)



`,l:"Interview/Safe/XSS.html",a:"xss-cross-site-scripting-攻击指的是攻击者往-web-页面里插入恶意-html-标签或者-javascript-代码。比如-攻击者在论坛中放一个看似安全的链接-骗取用户点击后-窃取-cookie-中的用户私密信息-或者攻击者在论坛中加一个恶意表单-当用户提交表单的时候-却把信息传送到攻击者的服务器中-而不是用户原本以为的信任站点"},"87.0":{t:"http-是明文传输-https-是加密传输-https-http-tls-ssl",p:"\r",l:"Interview/Safe/中间人攻击.html",a:"http-是明文传输-https-是加密传输-https-http-tls-ssl"},"87.1":{t:"tsl-中的加密",p:`
对称加密：两边拥有相同的密钥，两边都知道如何将密文加密解密
非对称解密：有公钥和私钥之分，公钥所有人都知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私有只有分发公钥的一方才知道

`,l:"Interview/Safe/中间人攻击.html#tsl-中的加密",a:"tsl-中的加密"},"87.2":{t:"对称密钥加密和非对称密钥加密有什么区别",p:`
对称密钥加密是最简单的一种加密方式，加解密都是相同的密钥，好处是加解密效率快，但是不安全，如果有人拿到了这个密钥谁都可以进行解密
非对称密钥会有两把密钥，一把是私钥，只有自己才有；一把是公钥，可以发 ...`,l:"Interview/Safe/中间人攻击.html#对称密钥加密和非对称密钥加密有什么区别",a:"对称密钥加密和非对称密钥加密有什么区别"},"87.3":{t:"https-加密过程",p:`
客户端请求网址，例如www.baidu.com
服务端存储着公钥和私钥
服务器把 CA 数字证书（包含公钥）响应给客户端
客户端解析证书拿到公钥，生成随机的 KEY
客户端把解密后的 KEY 传递给 ...`,l:"Interview/Safe/中间人攻击.html#https-加密过程",a:"https-加密过程"},"87.4":{t:"中间人攻击的过程",p:`
客户端请求被劫持，将所有的请求发送到中间人的服务器
中间人服务器返回自己的证书
客户端创建随机数，使用中间人证书中的公钥进行加密发送给中间人服务器，中间人使用私钥对随机数解密并构造对称加密，对之后传 ...`,l:"Interview/Safe/中间人攻击.html#中间人攻击的过程",a:"中间人攻击的过程"},"87.5":{t:"怎么预防中间人攻击",p:`使用正规厂商的证书，慎用免费的
`,l:"Interview/Safe/中间人攻击.html#怎么预防中间人攻击",a:"怎么预防中间人攻击"},"88.0":{t:"防护原理",p:`
验证文件类型和大小
存储上传的文件在非 Web 可访问目录下
生成唯一且安全的文件名

`,l:"Interview/Safe/文件上传漏洞.html",a:"防护原理"},"89.0":{t:"区分用户是人还是机器",p:`

防止恶意破解：通过要求用户输入验证码，可以防止用户使用自动化程序对密码、账号不断尝试


防止刷票和灌水：可以阻止自动化程序大规模注册账号、刷屏或在论坛上发布大量无意义的帖子，保护网站资源免受滥用 ...`,l:"Interview/Safe/验证码.html",a:"区分用户是人还是机器"},"90.0":{t:"watch-的-deep-true-是怎么实现的",p:"当用户知道了 watch 中的 depp 属性为 true 时，如果当前监控的值是数组类型。会对对象中的每一项进行求值，此时会将当前 watcher 存入到对应属性的依赖中，这样数组中对象发生变化时也 ...",l:"Interview/Vue/Computed-Watch.html",a:"watch-的-deep-true-是怎么实现的"},"90.1":{t:"computed-和-watch-的区别",p:`
Computed本质是一个具备缓存的watcher，依赖的属性发生变化就会更新视图。 适用于计算比较消耗性能的计算场景。当表达式过于复杂时，在模板中放入过多逻辑会让模板难以维护，可以将复杂的逻辑放入 ...`,l:"Interview/Vue/Computed-Watch.html#computed-和-watch-的区别",a:"computed-和-watch-的区别"},"90.2":{t:"computed-的实现",p:`
初始化 data， 使用 Object.defineProperty 把这些属性全部转为 getter/setter。
初始化 computed, 遍历 computed 里的每个属性，每个 com ...`,l:"Interview/Vue/Computed-Watch.html#computed-的实现",a:"computed-的实现"},"90.3":{t:"watch-原理",p:`watch 本质上是为每个监听属性 setter 创建了一个 watcher，当被监听的属性更新时，调用传入的回调函数。常见的配置选项有 deep 和 immediate，对应原理如下

deep：深 ...`,l:"Interview/Vue/Computed-Watch.html#watch-原理",a:"watch-原理"},"91.0":{t:"vue-路由传参",p:`
使用 query 方法传入的参数使用this.$route.query接收
使用 params 方法传入的参数使用this.$route.params接收

`,l:"Interview/Vue/vue-router.html",a:"vue-路由传参"},"91.1":{t:"route-和-router-的区别",p:`
route：当前 router 跳转对象，里面可以获取 name、path、query、params 等
router：是 vue-router 的实例，想要导航到不同 URL，使用 router. ...`,l:"Interview/Vue/vue-router.html#route-和-router-的区别",a:"route-和-router-的区别"},"91.2":{t:"怎么定义动态路由-怎么获取传过来的参数",p:`在 router 目录下的 index.js 文件中，对 path 属性加上 /:id，使用 router 对象的 params.if 获取动态参数
`,l:"Interview/Vue/vue-router.html#怎么定义动态路由-怎么获取传过来的参数",a:"怎么定义动态路由-怎么获取传过来的参数"},"91.3":{t:"vue-里面-router-link-在电脑上有用-安卓上没反应怎么解决",p:`在安卓上有问题是 babel 的问题，安装 babel polypill 插件解决
`,l:"Interview/Vue/vue-router.html#vue-里面-router-link-在电脑上有用-安卓上没反应怎么解决",a:"vue-里面-router-link-在电脑上有用-安卓上没反应怎么解决"},"91.4":{t:"hash-和-history-路由模式实现原理",p:`**hash**模式
早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL中 # 后面的内容。比如下面这个网站，它的 lo ...`,l:"Interview/Vue/vue-router.html#hash-和-history-路由模式实现原理",a:"hash-和-history-路由模式实现原理"},"91.5":{t:"router-view-和-router-link-是怎么起作用的",p:`
vue-router中两个重要组件router-link和router-view，分别起到路由导航作用和组件内容渲染作用
使用中router-link默认生成一个a标签，设置to属性定义跳转path ...`,l:"Interview/Vue/vue-router.html#router-view-和-router-link-是怎么起作用的",a:"router-view-和-router-link-是怎么起作用的"},"91.6":{t:"了解-history-有哪些方法吗",p:"history 这个对象在html5的时候新加入两个api history.pushState() 和 history.repalceState() 这两个API可以在不进行刷新的情况下，操作浏览器的 ...",l:"Interview/Vue/vue-router.html#了解-history-有哪些方法吗",a:"了解-history-有哪些方法吗"},"91.7":{t:"怎么监听-pushstate-和-replacestate-的变化",p:`利用自定义事件new Event()创建这两个事件，并全局监听
`,l:"Interview/Vue/vue-router.html#怎么监听-pushstate-和-replacestate-的变化",a:"怎么监听-pushstate-和-replacestate-的变化"},"91.8":{t:"vue-router-如何保护路由",p:`
vue-router中保护路由的方法叫做路由守卫，主要用来通过跳转或取消的方式守卫导航。
路由守卫有三个级别：全局、路由独享、组件级。影响范围由大到小，例如全局的router.beforeEach( ...`,l:"Interview/Vue/vue-router.html#vue-router-如何保护路由",a:"vue-router-如何保护路由"},"91.9":{t:"怎么实现路由懒加载",p:`
当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。利用路由懒加载我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样会更加高效，是一种优化手段 ...`,l:"Interview/Vue/vue-router.html#怎么实现路由懒加载",a:"怎么实现路由懒加载"},"91.10":{t:"怎么从零开始实现一个-vue-路由",p:`一个SPA应用的路由需要解决的问题是页面跳转内容改变同时不刷新，同时路由还需要以插件形式存在，所以：

首先我会定义一个createRouter函数，返回路由器实例，实例内部做几件事


保存用户传入 ...`,l:"Interview/Vue/vue-router.html#怎么从零开始实现一个-vue-路由",a:"怎么从零开始实现一个-vue-路由"},"92.0":{t:"proxy-与-object-defineproperty-优劣对比",p:`Object.defineProperty()存在的问题：

不能监听数组的变化：无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应
必须遍历对象的每个属性：只能劫持对象的属性，从而需要 ...`,l:"Interview/Vue/Vue2-Vue3.html",a:"proxy-与-object-defineproperty-优劣对比"},"92.1":{t:"ref-和-reactive-的区别",p:`reactive 用于处理对象类型的数据响应式，底层采用 new Proxy（）
ref 通常用于处理单值的响应式问题，底层采用的是 Object.defineProperty()
`,l:"Interview/Vue/Vue2-Vue3.html#ref-和-reactive-的区别",a:"ref-和-reactive-的区别"},"92.2":{t:"watch-和-watcheffect-的区别",p:`
watch 需要手动指定要监视的数据和回调函数，具有更高的灵活性和定制性。watchEffect 会自动追踪函数内部使用的响应式数据，不需要显示指定
watch 可以监视多个数据，可以在回调函数中处 ...`,l:"Interview/Vue/Vue2-Vue3.html#watch-和-watcheffect-的区别",a:"watch-和-watcheffect-的区别"},"92.3":{t:"composition-api-和-options-api-有什么不同",p:`
在逻辑组织和逻辑复用方面，Composition API是优于Options API
因为Composition API几乎是函数，会有更好的类型推断。
Composition API对 tree- ...`,l:"Interview/Vue/Vue2-Vue3.html#composition-api-和-options-api-有什么不同",a:"composition-api-和-options-api-有什么不同"},"92.4":{t:"vue3-对-vue2-有什么优势",p:`
性能更好（编译优化、使用proxy等）
体积更小
更好的TS支持
更好的代码组织
更好的逻辑抽离
更多新功能

`,l:"Interview/Vue/Vue2-Vue3.html#vue3-对-vue2-有什么优势",a:"vue3-对-vue2-有什么优势"},"92.5":{t:"vue3-和-vue2-生命周期有什么区别",p:`Options API​生命周期

beforeDestroy改为beforeUnmount
destroyed改为umounted
其他沿用vue2生命周期

`,l:"Interview/Vue/Vue2-Vue3.html#vue3-和-vue2-生命周期有什么区别",a:"vue3-和-vue2-生命周期有什么区别"},"92.6":{t:"composition-api-和-react-hooks-的区别",p:`
Composition API的setup(相当于created、beforeCreate的合集)只会调用一次，而React Hooks函数在渲染过程中会被多次调用
Composition API无 ...`,l:"Interview/Vue/Vue2-Vue3.html#composition-api-和-react-hooks-的区别",a:"composition-api-和-react-hooks-的区别"},"92.7":{t:"vue3-新特性",p:`
api层面Vue3新特性主要包括：Composition API、SFC Composition API语法糖、Teleport传送门、Fragments 片段、Emits选项、自定义渲染器、SFC ...`,l:"Interview/Vue/Vue2-Vue3.html#vue3-新特性",a:"vue3-新特性"},"92.8":{t:"vue3-速度快的原因",p:`Vue3.0 性能提升体现在哪些方面

代码层面性能优化主要体现在全新响应式API，基于Proxy实现，性能更好（获取到哪一层才触发响应式get，不是像vue2一次性递归监听数据）
编译层面做了更多编 ...`,l:"Interview/Vue/Vue2-Vue3.html#vue3-速度快的原因",a:"vue3-速度快的原因"},"92.9":{t:"为什么需要-ref、toref、torefs",p:`为什么需要用 ref

返回值类型，会丢失响应式
如在setup、computed、合成函数，都有可能返回值类型
Vue如不定义ref，用户将制造ref，反而更混乱

为何 ref 需要.value  ...`,l:"Interview/Vue/Vue2-Vue3.html#为什么需要-ref、toref、torefs",a:"为什么需要-ref、toref、torefs"},"92.10":{t:"setup-如何获取组件实例",p:`
在setup和其他composition API中没有this
通过getCurrentInstance获取当前实例
若使用options API可以照常使用this

`,l:"Interview/Vue/Vue2-Vue3.html#setup-如何获取组件实例",a:"setup-如何获取组件实例"},"93.0":{t:"从-vuex-中获取的数据能直接更改吗",p:`不能直接更改，需要浅拷贝对象之后更改，否则会报错
`,l:"Interview/Vue/Vuex.html",a:"从-vuex-中获取的数据能直接更改吗"},"93.1":{t:"vuex-中-actions-和-mutations-有什么区别",p:`
改 Vuex 的 store 中的状态的唯一方法是提交 mutation，mutation 非常类似于事件：每个 mutation 都有一个字符串的类型 (type)和一个 回调函数 (handle ...`,l:"Interview/Vue/Vuex.html#vuex-中-actions-和-mutations-有什么区别",a:"vuex-中-actions-和-mutations-有什么区别"},"93.2":{t:"怎么监听-vuex-数据的变化",p:`
可以通过watch选项或者watch方法监听状态
可以使用vuex提供的 API：store.subscribe()


watch选项方式，可以以字符串形式监听$store.state.xx；su ...`,l:"Interview/Vue/Vuex.html#怎么监听-vuex-数据的变化",a:"怎么监听-vuex-数据的变化"},"93.3":{t:"vuex-页面刷新数据丢失怎么解决",p:`
vuex只是在内存保存状态，刷新之后就会丢失，如果要持久化就要存起来
localStorage就很合适，提交mutation的时候同时存入localStorage，store中把值取出作为state ...`,l:"Interview/Vue/Vuex.html#vuex-页面刷新数据丢失怎么解决",a:"vuex-页面刷新数据丢失怎么解决"},"93.4":{t:"pinia-有什么优点",p:`1. pinia 是什么？


在Vue3中，可以使用传统的Vuex来实现状态管理，也可以使用最新的pinia来实现状态管理，我们来看看官网如何解释pinia的：Pinia 是 Vue 的存储库，它允 ...`,l:"Interview/Vue/Vuex.html#pinia-有什么优点",a:"pinia-有什么优点"},"93.5":{t:"从零开始实现一个-vuex-说说思路",p:`
官方说vuex是一个状态管理模式和库，并确保这些状态以可预期的方式变更。可见要实现一个vuex


要实现一个Store存储全局状态
要提供修改状态所需 API：commit(type, paylo ...`,l:"Interview/Vue/Vuex.html#从零开始实现一个-vuex-说说思路",a:"从零开始实现一个-vuex-说说思路"},"94.0":{t:"数据绑定机制",p:`采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，
在数据变动时发布消息给订阅者，触发相应的监听回调。
`,l:"Interview/Vue/原理.html",a:"数据绑定机制"},"94.1":{t:"template-编译",p:`
转换成 AST 树，得到 render 函数返回 VNode
首先，通过 compile 编译器把 template 编译成 AST 语法树（abstract syntax tree 即 源代码的抽 ...`,l:"Interview/Vue/原理.html#template-编译",a:"template-编译"},"94.2":{t:"怎么监听对象或数组某个属性的变化",p:`$set
`,l:"Interview/Vue/原理.html#怎么监听对象或数组某个属性的变化",a:"怎么监听对象或数组某个属性的变化"},"94.3":{t:"什么是虚拟-dom-作用是什么",p:`只是一层真实 DOM 的抽象,以 JavaScript 对象作为基础的树.用对象的属性来描述节点,最终可以通过一系列操作使这棵树映射到真实环境上.
创建虚拟 DOM 是为了更好将虚拟的节点渲染到页面视 ...`,l:"Interview/Vue/原理.html#什么是虚拟-dom-作用是什么",a:"什么是虚拟-dom-作用是什么"},"94.4":{t:"vue-怎么检测数组的变化",p:`vue2 中并没有使用 defineProperty 来检测数组（性能差），vue2 采用重写数组的方法来实现（7 个变异的方法，能改变原数组的方法）
通过原型链 + 函数劫持的方式实现的（缺陷是不能 ...`,l:"Interview/Vue/原理.html#vue-怎么检测数组的变化",a:"vue-怎么检测数组的变化"},"94.5":{t:"vue-怎么进行依赖收集",p:`依赖收集的目的是等数据变化了可以自动更新视图
每个属性都有自己的 dep 属性，存放所依赖的 watcher，当属性变化后会通知自己对应的 watcher 去更新，默认在初始化的时候会调用 rende ...`,l:"Interview/Vue/原理.html#vue-怎么进行依赖收集",a:"vue-怎么进行依赖收集"},"94.6":{t:"vue-中-key-的作用和原理",p:`key 给每一个 vnode 一个唯一的 id，可以依靠 key，更准确、更快的拿到 oldVnode 中对应的节点，更新组件时判断两个节点是否相同，相同就复用，不相同就删除旧的创建新的
vue 和  ...`,l:"Interview/Vue/原理.html#vue-中-key-的作用和原理",a:"vue-中-key-的作用和原理"},"94.7":{t:"new-vue-过程做了什么",p:`
内部会初始化组件绑定的事件，初始化组件的父子关系$parent $children $root
初始化响应式数据 data、computed、props、watch、method，同时也初始化了 p ...`,l:"Interview/Vue/原理.html#new-vue-过程做了什么",a:"new-vue-过程做了什么"},"94.8":{t:"diff-算法原理",p:`DOM操作是非常昂贵的，因此我们需要尽量地减少DOM操作。这就需要找出本次DOM必须更新的节点来更新，其他的不更新，这个找出的过程，就需要应用 diff 算法

vue的diff算法是平级比较，不考虑 ...`,l:"Interview/Vue/原理.html#diff-算法原理",a:"diff-算法原理"},"94.9":{t:"响应式数据原理",p:`Vue2
数据劫持 + 观察者模式
对象内部通过 defineReactive 方法，使用 Object.defineProperty 来劫持各个属性的 setter、getter（只会劫持已经存在的 ...`,l:"Interview/Vue/原理.html#响应式数据原理",a:"响应式数据原理"},"94.10":{t:"vue-实例挂载的过程中发生了什么",p:`
挂载过程指的是app.mount()过程，这个过程中整体上做了两件事：初始化和建立更新机制
初始化会创建组件实例、初始化组件状态，创建各种响应式数据
建立更新机制这一步会立即执行一次组件更新函数，这 ...`,l:"Interview/Vue/原理.html#vue-实例挂载的过程中发生了什么",a:"vue-实例挂载的过程中发生了什么"},"94.11":{t:"为什么-vue-采用异步渲染",p:`
Vue 是组件级更新，如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染，所以为了性能， Vue 会在本轮数据更新后，在异步更新视图。核心思想 nextTick

当数据发生了变化时，首 ...`,l:"Interview/Vue/原理.html#为什么-vue-采用异步渲染",a:"为什么-vue-采用异步渲染"},"94.12":{t:"nexttick-实现原理",p:`主要是使用了宏任务和微任务，定义一个异步方法，多次调用 nextTick 会将方法存入到队列中，通过这个异步方法清空当前队列

nextTick 中的回调是在下次 DOM 更新循环结束之后执行延迟回调 ...`,l:"Interview/Vue/原理.html#nexttick-实现原理",a:"nexttick-实现原理"},"94.13":{t:"v-model-实现原理",p:"我们在 vue 项目中主要使用 v-model 指令在表单 input、textarea、select 等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖（可以看成是value + ...",l:"Interview/Vue/原理.html#v-model-实现原理",a:"v-model-实现原理"},"94.14":{t:"diff-算法的时间复杂度",p:`两个树的完全 diff 算法是一个时间复杂度为 O(n3)，Vue 进行了优化，转换成了 O(n)复杂度的问题（只比较同级不考虑跨级问题）
`,l:"Interview/Vue/原理.html#diff-算法的时间复杂度",a:"diff-算法的时间复杂度"},"95.0":{t:"谈谈对-vue-的理解",p:`
vue 是一套用于构建用户界面的渐进式框架，核心库只关心视图层
是一个声明式框架，更关注结果
收到 MVVM 模式启发，简化了映射关系
采用虚拟 DOM，比较新旧虚拟节点，找到变化再进行更新，提高性 ...`,l:"Interview/Vue/基础知识.html",a:"谈谈对-vue-的理解"},"95.1":{t:"为什么-vue-组件中-data-必须是函数",p:`
根实例对象 data 可以是对象也可以是函数，因为根实例是单例，不会产生数据污染情况
组件实例对象 data 必须是函数，.vue 文件在使用的时候实际上会转换成一个 class，一个组件被复用多次 ...`,l:"Interview/Vue/基础知识.html#为什么-vue-组件中-data-必须是函数",a:"为什么-vue-组件中-data-必须是函数"},"95.2":{t:"v-show-和-v-if-的区别",p:`区别

v-show 隐藏则是为该元素添加 css-display:none，dom元素依旧还在，v-if显示隐藏是将dom元素整个添加或删除
编译过程：v-if 切换有一个局部编译/缺陷的过程，切换 ...`,l:"Interview/Vue/基础知识.html#v-show-和-v-if-的区别",a:"v-show-和-v-if-的区别"},"95.3":{t:"为什么-v-if-和-v-for-不建议一起使用",p:`
在 vue2 中，v-for 的优先级是高于 v-if 的，把它们放在一起，输出的渲染函数中可以看出会先执行循环再判断条件，哪怕只渲染列表中一小部分元素，也得在每次重新渲染的时候遍历整个列表，这会比 ...`,l:"Interview/Vue/基础知识.html#为什么-v-if-和-v-for-不建议一起使用",a:"为什么-v-if-和-v-for-不建议一起使用"},"95.4":{t:"怎么获取-dom",p:`使用 ref 和 refs
先给标签设置一个 ref 值，再通过this.$refs.domName 来获取
`,l:"Interview/Vue/基础知识.html#怎么获取-dom",a:"怎么获取-dom"},"95.5":{t:"vue-初始化页面闪动问题",p:`在 vue 初始化之前，由于 div 是不归 vue 管的，所以写的代码在还没有解析的情况下会容易出现花屏现象，看到类似{{message}}的字样
可以在 css 里加
[v-cloak] {
   ...`,l:"Interview/Vue/基础知识.html#vue-初始化页面闪动问题",a:"vue-初始化页面闪动问题"},"95.6":{t:"ajax-请求应该放在-methods-还是-vuex-中",p:`
如果请求来的数据不是要被其它组件共用，仅仅在请求的组件内使用，就不需要放入 vuex 的 state 中
如果被其它地方复用，就放在 action 中，方便复用

`,l:"Interview/Vue/基础知识.html#ajax-请求应该放在-methods-还是-vuex-中",a:"ajax-请求应该放在-methods-还是-vuex-中"},"95.7":{t:"对-spa-页面的理解-优缺点",p:"SPA，单页面应用，只在 web 页面初始化的时候加载相应的 HTML、CSS 和 JavaScript，一旦页面加载完成，SPA 不会因为用户的操作进行页面的重新加载或跳转，而是利用路由机制实现 H ...",l:"Interview/Vue/基础知识.html#对-spa-页面的理解-优缺点",a:"对-spa-页面的理解-优缺点"},"95.8":{t:"spa-首屏加载慢怎么解决",p:`什么叫首屏加载时间：浏览器从响应用户输入网站地址,到首屏内容渲染完成的时间,整个网页不一定要全部渲染完成,但是需要展示当前视窗需要的内容
加载慢的原因：

网络延时问题
资源文件体积过大
是否发生重复 ...`,l:"Interview/Vue/基础知识.html#spa-首屏加载慢怎么解决",a:"spa-首屏加载慢怎么解决"},"95.9":{t:"对-keep-alive-的理解",p:`
keep-alive 是 Vue 内置的一个组件，可以实现组件缓存，当组件切换时不会对当前组件进行卸载。一般结合路由和动态组件一起使用，用于缓存组件
提供 include 和 exclude 属性， ...`,l:"Interview/Vue/基础知识.html#对-keep-alive-的理解",a:"对-keep-alive-的理解"},"95.10":{t:"vue-observable-有了解过吗",p:`让一个对象变成响应式数据,Vue 内部会用它来处理 data 函数返回的对象
使用场景: 实现非父子组件通信
`,l:"Interview/Vue/基础知识.html#vue-observable-有了解过吗",a:"vue-observable-有了解过吗"},"95.11":{t:"既然-vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-dom-进行-diff-检测差异",p:"vue 设计的每一个组件一个 watcher，没有采用一个属性对应一个 watcher，这样会导致大量的 watcher 的产生而浪费内存，如果粒度过低也无法精准检测变化，所以采用 diff 算法+组 ...",l:"Interview/Vue/基础知识.html#既然-vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-dom-进行-diff-检测差异",a:"既然-vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-dom-进行-diff-检测差异"},"95.12":{t:"vue-mixin-使用场景和原理",p:`
在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，这些代码的功能相对独立，可以通过 Vue 的 mixin 功能抽离公共的业务逻辑，原理类似“对象的继承”，当组件初始 ...`,l:"Interview/Vue/基础知识.html#vue-mixin-使用场景和原理",a:"vue-mixin-使用场景和原理"},"95.13":{t:"对-mvvm-的理解",p:"MVVM是Model-View-ViewModel缩写，也就是把MVC中的Controller演变成ViewModel。Model层代表数据模型（也就是前端声明的静态数据或者是通过网络请求获取的数据） ...",l:"Interview/Vue/基础知识.html#对-mvvm-的理解",a:"对-mvvm-的理解"},"95.14":{t:"vue-组件为什么只有一个根元素",p:`
vue2中组件确实只能有一个根，但vue3中组件已经可以多根节点了。
之所以需要这样是因为vdom是一颗单根树形结构，patch方法在遍历的时候从根节点开始遍历，它要求只有一个根节点。组件也会转换为 ...`,l:"Interview/Vue/基础知识.html#vue-组件为什么只有一个根元素",a:"vue-组件为什么只有一个根元素"},"95.15":{t:"函数式组件的优势和原理",p:`
函数式组件需要在声明组件是指定 functional:true
不需要实例化，所以没有this,this通过render函数的第二个参数context来代替
没有生命周期钩子函数，不能使用计算属性， ...`,l:"Interview/Vue/基础知识.html#函数式组件的优势和原理",a:"函数式组件的优势和原理"},"95.16":{t:"组件之间通信方式有哪些",p:`

props / $emit 适用 父子组件通信

父组件向子组件传递数据是通过 prop 传递的，子组件传递数据给父组件是通过$emit 触发事件来做到的



ref 与 $parent / $ ...`,l:"Interview/Vue/基础知识.html#组件之间通信方式有哪些",a:"组件之间通信方式有哪些"},"95.17":{t:"vue-如何扩展一个组件",p:`
常见的组件扩展方法有：mixins，slots，extends等
混入mixins是分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的 ...`,l:"Interview/Vue/基础知识.html#vue-如何扩展一个组件",a:"vue-如何扩展一个组件"},"95.18":{t:"子组件可以直接改父组件的数据吗",p:`
所有的 prop 都使得其父子之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。 ...`,l:"Interview/Vue/基础知识.html#子组件可以直接改父组件的数据吗",a:"子组件可以直接改父组件的数据吗"},"95.19":{t:"组件和插件有什么区别",p:`1. 组件是什么
组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在 Vue 中每一个.vue 文件都可以视为一个组件
组件的优势

降低整个系统的耦合度，在保持接口不 ...`,l:"Interview/Vue/基础知识.html#组件和插件有什么区别",a:"组件和插件有什么区别"},"95.20":{t:"sync-和-v-model-的区别",p:`

.sync修饰符可以实现父子组件之间的双向绑定，并且可以实现子组件同步修改父组件的值，相比较与v-model来说,sync修饰符就简单很多了


一个组件上可以有多个.sync修饰符


相同点
 ...`,l:"Interview/Vue/基础知识.html#sync-和-v-model-的区别",a:"sync-和-v-model-的区别"},"95.21":{t:"ssr-的理解",p:`
Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏 ...`,l:"Interview/Vue/基础知识.html#ssr-的理解",a:"ssr-的理解"},"95.22":{t:"delete-和-vue-delete-删除数组的区别",p:`
delete只是被删除的元素变成了 empty/undefined 其他的元素的键值还是不变。
Vue.delete直接删除了数组 改变了数组的键值。

`,l:"Interview/Vue/基础知识.html#delete-和-vue-delete-删除数组的区别",a:"delete-和-vue-delete-删除数组的区别"},"95.23":{t:"vue-ref-的作用",p:`
获取dom元素this.$refs.box
获取子组件中的data this.$refs.box.msg
调用子组件中的方法this.$refs.box.open()

`,l:"Interview/Vue/基础知识.html#vue-ref-的作用",a:"vue-ref-的作用"},"95.24":{t:"vue-loader-是什么-有什么作用",p:`
vue-loader是用于处理单文件组件（SFC，Single-File Component）的webpack loader
因为有了vue-loader，我们就可以在项目中编写SFC格式的Vue组 ...`,l:"Interview/Vue/基础知识.html#vue-loader-是什么-有什么作用",a:"vue-loader-是什么-有什么作用"},"95.25":{t:"从-0-到-1-自己构架一个-vue-项目-有哪些步骤-哪些重要插件、目录结构怎么组织",p:`
从0创建一个项目我大致会做以下事情：项目构建、引入必要插件、代码规范、提交规范、常用库和组件
目前vue3项目我会用vite或者create-vue创建项目
接下来引入必要插件：路由插件vue-ro ...`,l:"Interview/Vue/基础知识.html#从-0-到-1-自己构架一个-vue-项目-有哪些步骤-哪些重要插件、目录结构怎么组织",a:"从-0-到-1-自己构架一个-vue-项目-有哪些步骤-哪些重要插件、目录结构怎么组织"},"96.0":{t:"对生命周期的理解",p:"Vue 的生命周期即一个 Vue 实例从被创建到被销毁的过程 可以分为 8 个阶段： beforeCreate：实例创建前 created：实例创建完成 beforeMount：挂载前 mounted ...",l:"Interview/Vue/生命周期.html",a:"对生命周期的理解"},"96.1":{t:"什么时候使用-beforedestory",p:`在 vue 实例销毁之前被调用，可以执行一些清理和释放资源的工作

清理定时器，避免内存泄露和不必要的开销
取消异步操作，确保在销毁实例时不会触发不必要的回调或产生不稳定的行为
清理订阅，如果使用了观 ...`,l:"Interview/Vue/生命周期.html#什么时候使用-beforedestory",a:"什么时候使用-beforedestory"},"96.2":{t:"vue-的父组件和子组件生命周期钩子函数执行顺序",p:`

加载渲染过程
父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&g ...`,l:"Interview/Vue/生命周期.html#vue-的父组件和子组件生命周期钩子函数执行顺序",a:"vue-的父组件和子组件生命周期钩子函数执行顺序"},"96.3":{t:"在那个生命周期中调用异步请求",p:"可以在 created 和 mounted 生命周期中调用异步请求，如果需要在组件实例被创建时立即获取数据并且不依赖于 DOM 元素，可以使用 created；如果需要等待 DOM 准备好才执行一些操 ...",l:"Interview/Vue/生命周期.html#在那个生命周期中调用异步请求",a:"在那个生命周期中调用异步请求"},"97.0":{t:"babel-主要用于将新版本的代码转换为向后兼容的-js-语法-​-polyfill-方式-以便能够运行在各版本的浏览器或其他环境中",p:`基本原理
首先将源码转成抽象语法树，然后对语法树进行处理生成新的语法树，最后将新语法树生成新的 JS 代码
1）通过babylon将 js 转化成 ast (抽象语法树)
2）通过babel-trav ...`,l:"Interview/工程化/babel原理.html",a:"babel-主要用于将新版本的代码转换为向后兼容的-js-语法-​-polyfill-方式-以便能够运行在各版本的浏览器或其他环境中"},"98.0":{t:"loader-是什么",p:`webpack 只能处理 js 格式的资源，任何非 js 文件都必须被对应的 loader 处理转换成 js 代码
`,l:"Interview/工程化/loader.html",a:"loader-是什么"},"98.1":{t:"手写一个-loader",p:`// 作用：将css内容，通过style标签插入到页面中
// source为要处理的css源文件
function loader(source) {
  let style = \`
    let  ...`,l:"Interview/工程化/loader.html#手写一个-loader",a:"手写一个-loader"},"98.2":{t:"loader-的执行顺序",p:`相同优先级的 loader 链，执行顺序为从右到左，从下到上
`,l:"Interview/工程化/loader.html#loader-的执行顺序",a:"loader-的执行顺序"},"98.3":{t:"常见的-loader",p:`
style-loader：把 css 注入到 JavaScript 中，通过 DOM 操作去加载 css
css-loader：加载 css
sass-loader：把 sass/scss 代码转换 ...`,l:"Interview/工程化/loader.html#常见的-loader",a:"常见的-loader"},"99.0":{t:"扩展-webpack-功能",p:"\r",l:"Interview/工程化/Plugin.html",a:"扩展-webpack-功能"},"99.1":{t:"工作原理",p:`webpack 通过内部的事件流机制保证了插件的有序性，底层是利用发布订阅模式，webpack 在运行过程中会广播事件，插件只需要监听它所关系的事件，在特定的时间对资源做处理
`,l:"Interview/工程化/Plugin.html#工作原理",a:"工作原理"},"99.2":{t:"编写一个插件",p:`// 自定义一个名为MyPlugin插件，该插件在打包完成后，在控制台输出&quot;打包已完成&quot;
class MyPlugin {
  // 原型上需要定义apply 的方法
  appl ...`,l:"Interview/工程化/Plugin.html#编写一个插件",a:"编写一个插件"},"100.0":{t:"webpack-构建流程",p:`1. 从入口文件开始解析
2. 查找入口文件引入了哪些js文件，找到依赖关系
3. 递归遍历引入的其它js，生成最终的依赖关系图
4. 将ES6语法转化成ES5
5. 最终生成一个可以在浏览器加载执行 ...`,l:"Interview/工程化/Webpack构建流程.html",a:"webpack-构建流程"},"100.1":{t:"完整版",p:"1. webpack 从项目的`entry`入口文件开始递归分析，调用所有配置的 `loader`对模块进行编译（因为 webpack 默认只能识别 js 代码，所以如 css 文件、.vue 结尾的 ...",l:"Interview/工程化/Webpack构建流程.html#完整版",a:"完整版"},"101.0":{t:"文件指纹是打包后输出的文件名的后缀",p:`
Hash：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改
Chunkhash：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chun ...`,l:"Interview/工程化/文件指纹.html",a:"文件指纹是打包后输出的文件名的后缀"},"102.0":{t:"什么是热更新原理",p:`开发过程中，代码发生变动后，webpack 会重新编译，编译后浏览器替换修改的模块，局部刷新，无需刷新整个页面
好处：节省开发时间，提升开发体验
`,l:"Interview/工程化/热更新原理.html",a:"什么是热更新原理"},"102.1":{t:"原理",p:`主要是通过 webscoket 实现，建立本地服务器和浏览器的双向通信，当代码变化后，重新编译后，通知浏览器请求更新的模块，替换原有的模块

通过 webpack-dev-server 开启 serv ...`,l:"Interview/工程化/热更新原理.html#原理",a:"原理"},"103.0":{t:"js",p:`// 传入参数为 url 请求地址
const getJSON = function (url) {
return new Promise((resolve, reject) =&gt; {
cons ...`,l:"Interview/手写/AJAX.html",a:"js"},"104.0":{t:"js",p:`// call
Function.prototype.myCall = function(context,...args){
context = context || window
context.f ...`,l:"Interview/手写/call-apply-bind.html",a:"js"},"105.0":{t:"接收多个函数为参数-由右向左依次执行函数",p:`function compose(...fns) {
  // 首先需要判断参数是否为空
  if (fns.length === 0) {
    throw new Error(&quot;必须传 ...`,l:"Interview/手写/compose.html",a:"接收多个函数为参数-由右向左依次执行函数"},"106.0":{t:"js",p:`function myInstanceof(obj, constructor) {
if (typeof obj !== &quot;object&quot; || obj === null) ret ...`,l:"Interview/手写/instanceof.html",a:"js"},"107.0":{t:"js",p:`class _LazyMan {
constructor(name) {
this.tasks = [];
const task = () =&gt; {
console.log(Hi! This i ...`,l:"Interview/手写/LazyMan.html",a:"js"},"108.0":{t:"js",p:`// 缓存淘汰策略，移除最近最少被访问的数据项
class LRUCache {
constructor(capacity) {
this.map = new Map();
this.capacity ...`,l:"Interview/手写/LRU.html",a:"js"},"109.0":{t:"_1-创建一个对象-该对象的原型指向构造函数的原型",p:`
调用该构造函数，构造函数的 this 指向新生成的对象
判断构造函数是否有返回值，如果有返回值且返回值是一个对象或方法，就返回这个值，否则返回新生成的对象

function myNew(const ...`,l:"Interview/手写/new.html",a:"_1-创建一个对象-该对象的原型指向构造函数的原型"},"110.0":{t:"promise",p:`class Promise {
  constructor(fn) {
    // resolve时的回调函数列表
    this.resolveTask = [];
    // reject时 ...`,l:"Interview/手写/Promise.html",a:"promise"},"110.1":{t:"race-all",p:`class Promise {
  // race静态方法，返回promises列表中第一个执行完的结果
  static race(promises) {
    return new Promis ...`,l:"Interview/手写/Promise.html#race-all",a:"race-all"},"110.2":{t:"retry",p:`/*
 * @param {function} fn - 方法名
 * @param {number} delay - 延迟的时间
 * @param {number} times - 重发的次数
  ...`,l:"Interview/手写/Promise.html#retry",a:"retry"},"111.0":{t:"settimeout-模拟实现-setinterval",p:`function mySetInterval(callback, delay) {
  function interval() {
    callback(); // 首先执行回调函数
    ti ...`,l:"Interview/手写/setTimeout-setInterval.html",a:"settimeout-模拟实现-setinterval"},"112.0":{t:"js",p:`function sleep(ms) {
return new Promise((resolve) =&gt; setTimeout(resolve, ms));
}

`,l:"Interview/手写/sleep.html",a:"js"},"113.0":{t:"js",p:`function curry(fn) {
return function curried(...args) {
if (args.length &lt; fn.length) {
return fun ...`,l:"Interview/手写/函数柯里化.html",a:"js"},"114.0":{t:"js",p:`[
{
id: 1,
text: '节点1',
parentId: 0 //这里用0表示为顶级节点
},
{
id: 2,
text: '节点1_1',
parentId: 1 //通过这个字段来确定 ...`,l:"Interview/手写/列表转成树形结构.html",a:"js"},"115.0":{t:"js",p:`class EventEmitter {
constructor() {
// 创建一个空对象存储事件和对应的回调函数
this.events = {};
}
// 实现订阅
on(type, cal ...`,l:"Interview/手写/发布订阅.html",a:"js"},"116.0":{t:"js",p:`{
tag: 'DIV',
attrs:{
id:'app'
},
children: [
{
tag: 'SPAN',
children: [
{ tag: 'A', children: [] }
 ...`,l:"Interview/手写/将虚拟dom转换成真实dom.html",a:"js"},"117.0":{t:"js",p:`// 递归的方法
function flat(arr) {
let res = [];
for (let i = 0; i &lt; arr.length; i++) {
if (Array.isAr ...`,l:"Interview/手写/并行限制的Promise调度器.html",a:"js"},"118.0":{t:"js",p:`// 递归的方法
function flat(arr) {
let res = [];
for (let i = 0; i &lt; arr.length; i++) {
if (Array.isAr ...`,l:"Interview/手写/扁平化.html",a:"js"},"119.0":{t:"冒泡",p:`function bubbleSort(arr) {
  // 缓存数组长度
  const len = arr.length;
  // 外层循环用于控制从头到尾的比较+交换到底有多少轮
  for ...`,l:"Interview/手写/排序.html",a:"冒泡"},"119.1":{t:"选择排序",p:` 循环遍历数组，每次都找出当前范围内的最小值，把它放在当前范围的头部，然后缩小排序范围，重复，直到数组完全有序

function selectSort(arr) {
  // 缓存数组长度
  co ...`,l:"Interview/手写/排序.html#选择排序",a:"选择排序"},"119.2":{t:"插入排序",p:` 找到元素在它前面那个序列中的正确位置

function insertSort(arr) {
  // 缓存数组长度
  const len = arr.length;
  // temp 用来保存 ...`,l:"Interview/手写/排序.html#插入排序",a:"插入排序"},"119.3":{t:"快速排序",p:`// 定义一个名为sortArray的函数，它接受一个数组nums作为输入参数
var sortArray = function(nums) {
    // 如果数组长度小于2，表示数组已经有序或为 ...`,l:"Interview/手写/排序.html#快速排序",a:"快速排序"},"119.4":{t:"归并排序",p:` 将需要被排序的数组从中间分割为两半，然后再将分割出来的每个子数组各分割为两半，重复以上操作，直到单个子数组只有一个元素为止

 从粒度最小的子数组开始，两两合并，确保每次合并出来的数组都是有序的

 ...`,l:"Interview/手写/排序.html#归并排序",a:"归并排序"},"120.0":{t:"js",p:`// 方法1 使用set
[...new Set(arr)];
// 方法2 使用includes
let uniArr = [];
for (const item of arr) {
if (!un ...`,l:"Interview/手写/数组去重.html",a:"js"},"121.0":{t:"js",p:`[
{
id: 1,
text: '节点1',
parentId: 0,
children: [
{
id:2,
text: '节点1_1',
parentId:1
}
]
}
]
转成
[
{
id ...`,l:"Interview/手写/树形结构转换成列表.html",a:"js"},"122.0":{t:"js",p:`function deepClone(obj, hash = new WeakMap()) {
if (!(typeof obj === &quot;object&quot; &amp;&amp; o ...`,l:"Interview/手写/深拷贝.html",a:"js"},"123.0":{t:"js",p:`function pipe(...functions) {
return function (input) {
return functions.reduce((value, func) =&gt;  ...`,l:"Interview/手写/管道函数.html",a:"js"},"124.0":{t:"节流",p:`某个函数在一定时间间隔内只执行一次，在规定的延迟时间内无视后来产生的函数调用请求，也不会延长时间
控制函数执行频率的技术，确保函数在一定时间间隔内最多执行一次，以减轻高频率触发函数的性能问题。一般情况 ...`,l:"Interview/手写/防抖节流.html",a:"节流"},"124.1":{t:"防抖",p:`是指某个函数在规定的时间段内，无论触发多少次回调，只执行最后
一般用于处理需要等待一段时间后稳定下来的事件，比如输入框的输入事件、滚动事件、窗口大小调
核心思想就是当函数被触发后，设置一个定时器，在一 ...`,l:"Interview/手写/防抖节流.html#防抖",a:"防抖"},"125.0":{t:"算法记录",p:`::: tip
这里主要记录学习算法时的解题思路，只作为记录，题目主要来源于代码随想录，侵删！
:::
`,l:"Problem/index.html",a:"算法记录"},"126.0":{t:"题目",p:`反转字符串 https://leetcode.cn/problems/reverse-string/
description:
编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s  ...`,l:"Problem/双指针/反转字符串.html",a:"题目"},"127.0":{t:"题目",p:`反转字符串中的单词 https://leetcode.cn/problems/reverse-words-in-a-string/
description:
给你一个字符串 s ，请你反转字符串中 单 ...`,l:"Problem/双指针/反转字符串中的单词.html",a:"题目"},"128.0":{t:"题目",p:`路径加密 https://leetcode.cn/problems/ti-huan-kong-ge-lcof/description/
description:
假定一段路径记作字符串 path，其中 ...`,l:"Problem/双指针/路径加密.html",a:"题目"},"129.0":{t:"题目",p:`三数之和: https://leetcode.cn/problems/3sum/
description:
给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nu ...`,l:"Problem/哈希表/三数之和.html",a:"题目"},"130.0":{t:"题目",p:`两个数组的交集: https://leetcode.cn/problems/intersection-of-two-arrays/
description:
给定两个数组 nums1 和 nums2  ...`,l:"Problem/哈希表/两个数组的交集.html",a:"题目"},"131.0":{t:"题目",p:`两数之和:https://leetcode.cn/problems/two-sum/
description:
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标 ...`,l:"Problem/哈希表/两数之和.html",a:"题目"},"132.0":{t:"题目",p:`四数之和:https://leetcode.cn/problems/4sum/
description:
给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足 ...`,l:"Problem/哈希表/四数之和.html",a:"题目"},"133.0":{t:"题目",p:`四数相加: https://leetcode.cn/problems/4sum-ii/
description:
给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是  ...`,l:"Problem/哈希表/四数相加.html",a:"题目"},"134.0":{t:"题目",p:`快乐数:https://leetcode.cn/problems/happy-number/
description:
编写一个算法来判断一个数 n 是不是快乐数。
「快乐数」 定义为：
对于一个正整 ...`,l:"Problem/哈希表/快乐数.html",a:"题目"},"135.0":{t:"题目",p:`有效的字母异位词 : https://leetcode.cn/problems/valid-anagram/
description:
给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s ...`,l:"Problem/哈希表/有效的字母异位词.html",a:"题目"},"136.0":{t:"题目",p:`反转字符串 II https://leetcode.cn/problems/reverse-string-ii/
description:
给定一个字符串 s 和一个整数 k，从字符串开头算起，每计数 ...`,l:"Problem/字符串/反转字符串-Ⅱ.html",a:"题目"},"137.0":{t:"题目",p:`反转字符串 : https://leetcode.cn/problems/reverse-string/
description:
编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组  ...`,l:"Problem/字符串/反转字符串.html",a:"题目"},"138.0":{t:"题目",p:`重复的子字符串 https://leetcode.cn/problems/repeated-substring-pattern/
description:
给定一个非空的字符串 s ，检查是否可以通过 ...`,l:"Problem/字符串/重复的子字符串.html",a:"题目"},"139.0":{t:"二分查找的思路",p:`二分查找也叫折半查找，用于在有序数组查找特定的元素；通过将查找区间分为两半，不断缩小查找区间，根据中间元素和目标元素
的比较关系来确定目标元素在那一半，直到找到元素或者确定不存在。
`,l:"Problem/数组/二分查找.html",a:"二分查找的思路"},"139.1":{t:"步骤",p:`
初始化左右边界
计算中间位置
比较中间元素和目标元素的大小

如果中间元素等于目标元素，查找成功，返回中间元素的索引
如果中间元素大于目标元素，说明目标元素在左半部分，更新中间元素为 mid-1，继 ...`,l:"Problem/数组/二分查找.html#步骤",a:"步骤"},"139.2":{t:"题目",p:`力扣 704.二分查找 https://leetcode.cn/problems/binary-search/description/
description:
给定一个 n 个元素有序的（升序）整型 ...`,l:"Problem/数组/二分查找.html#题目",a:"题目"},"140.0":{t:"题目",p:`有序数组的平方 https://leetcode.cn/problems/squares-of-a-sorted-array/
description:
给你一个按 非递减顺序 排序的整数数组 num ...`,l:"Problem/数组/有序数组的平方.html",a:"题目"},"141.0":{t:"题目",p:`力扣 27. 移除元素 https://leetcode.cn/problems/remove-element/
description:
给你一个数组 nums 和一个值 val，你需要 原地 移除 ...`,l:"Problem/数组/移除元素.html",a:"题目"},"142.0":{t:"题目",p:`螺旋矩阵 II https://leetcode.cn/problems/spiral-matrix-ii/
description:
给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元 ...`,l:"Problem/数组/螺旋矩阵.html",a:"题目"},"143.0":{t:"题目",p:`长度最小的子数组 https://leetcode.cn/problems/minimum-size-subarray-sum/
description:
给定一个含有 n 个正整数的数组和一个正整数 ...`,l:"Problem/数组/长度最小的子数组.html",a:"题目"},"144.0":{t:"题目",p:`description:
解题思路：
`,l:"Problem/模板.html",a:"题目"},"145.0":{t:"题目",p:`两两交换链表中的节点 https://leetcode.cn/problems/swap-nodes-in-pairs/
description:
给你一个链表，两两交换其中相邻的节点，并返回交换后链 ...`,l:"Problem/链表/两两交换链表中的节点.html",a:"题目"},"146.0":{t:"题目",p:`删除链表的倒数第 N 个结点 https://leetcode.cn/problems/remove-nth-node-from-end-of-list/
description:
给你一个链表，删除 ...`,l:"Problem/链表/删除链表的倒数第N个节点.html",a:"题目"},"147.0":{t:"题目",p:`环形链表 : https://leetcode.cn/problems/linked-list-cycle-ii/
description:
给定一个链表的头节点 head ，返回链表开始入环的第一个 ...`,l:"Problem/链表/环形链表.html",a:"题目"},"148.0":{t:"链式存储",p:`每一个元素中存储当前节点的值和指向下一个节点的指针
JavaScript 实现
function ListNode(val, next) {
  this.val = val === undefine ...`,l:"Problem/链表/理论基础.html",a:"链式存储"},"149.0":{t:"题目",p:`移除链表元素 https://leetcode.cn/problems/remove-linked-list-elements/
description:
给你一个链表的头节点 head 和一个整数  ...`,l:"Problem/链表/移除链表元素.html",a:"题目"},"150.0":{t:"题目",p:`反转链表:https://leetcode.cn/problems/reverse-linked-list/
description:
给你单链表的头节点 head ，请你反转链表，并返回反转后的链表 ...`,l:"Problem/链表/翻转链表.html",a:"题目"},"151.0":{t:"题目",p:`链表相交: https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/
description:
给你两个单链表的头节点 h ...`,l:"Problem/链表/链表相交.html",a:"题目"},"152.0":{t:"编程踩坑积累与总结",p:`::: tip
这里主要记录项目中的关键技术!
:::
`,l:"Project/index.html",a:"编程踩坑积累与总结"},"153.0":{t:"测试-1",p:"",l:"Project/project1/1.html",a:"测试-1"},"154.0":{t:"编程踩坑积累与总结",p:`::: tip
这里主要记录面试遇到的真题!
:::
`,l:"Relay/index.html",a:"编程踩坑积累与总结"},"155.0":{t:"搭建环境",p:`初始化 node 环境 yarn init -y
安装 webpack yarn add webpack webpack-cli -D -D 表示开发依赖
`,l:"Relay/webpack/基础.html",a:"搭建环境"},"155.1":{t:"手动配置-webpack",p:`默认配置名为 webpack.config.js
// webpack是node写出来的
const path = require(&quot;path&quot;);
module.exports  ...`,l:"Relay/webpack/基础.html#手动配置-webpack",a:"手动配置-webpack"},"155.2":{t:"插件",p:"\r",l:"Relay/webpack/基础.html#插件",a:"插件"},"155.3":{t:"htmlwebpackplugin",p:`在 webpack 构建过程中自动生成 HTML 文件，并自动引入 Webpack 生成的 JS 和 CSS 文件
new HtmlWebpackPlugin({
  title: &quot;Web ...`,l:"Relay/webpack/基础.html#htmlwebpackplugin",a:"htmlwebpackplugin"},"155.4":{t:"mini-css-extract-plugin",p:`将 css 样式文件从 JavaScript 文件中分离出来并且单独打包
new MiniCssExtractPlugin({
   filename: &quot;main.css&quot;,
} ...`,l:"Relay/webpack/基础.html#mini-css-extract-plugin",a:"mini-css-extract-plugin"},"155.5":{t:"optimize-css-assets-webpack-plugin",p:`优化压缩 css 资源
`,l:"Relay/webpack/基础.html#optimize-css-assets-webpack-plugin",a:"optimize-css-assets-webpack-plugin"},"155.6":{t:"uglifyjs-webpack-plugin",p:`压缩 js 文件
 optimization: {
    //优化项
    minimizer: [
      new UglifyJsPlugin({
        cache: true, ...`,l:"Relay/webpack/基础.html#uglifyjs-webpack-plugin",a:"uglifyjs-webpack-plugin"},"155.7":{t:"loader",p:`webpack 只能理解 JavaScript 文件，loader 的作用就是将非 JavaScript 文件转换成 webpack 可以理解的模块
特点：

功能单一
执行顺序：默认从右向左，从下到 ...`,l:"Relay/webpack/基础.html#loader",a:"loader"},"155.8":{t:"css-loader",p:`解析 @import 这种语法的
`,l:"Relay/webpack/基础.html#css-loader",a:"css-loader"},"155.9":{t:"style-loader",p:`把 css 插入到 head 的标签中
`,l:"Relay/webpack/基础.html#style-loader",a:"style-loader"},"155.10":{t:"less-loader",p:`将 less 文件转换成 css 文件
`,l:"Relay/webpack/基础.html#less-loader",a:"less-loader"},"155.11":{t:"postcss-loader",p:`自动添加前缀
`,l:"Relay/webpack/基础.html#postcss-loader",a:"postcss-loader"},"155.12":{t:"babel-loader-babel-core-babel-preset-env",p:`将 ES6 转化成 ES5
`,l:"Relay/webpack/基础.html#babel-loader-babel-core-babel-preset-env",a:"babel-loader-babel-core-babel-preset-env"},"155.13":{t:"url-loader",p:`处理图片
如果想要实现打包文件分类，添加
options: {
  outputPath: &quot;&quot;;
}

`,l:"Relay/webpack/基础.html#url-loader",a:"url-loader"}},n={previewLength:100,buttonLabel:"搜索",placeholder:"情输入关键词"},r={INDEX_DATA:e,PREVIEW_LOOKUP:t,Options:n};export{r as default};
