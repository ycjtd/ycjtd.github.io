const e={map:'[{"编程踩坑积累与总结":["0.0","2.0","3.0","7.0","147.0","149.0"],"test1":["1.0"],"testdddd":["4.0"],"移动端响应式":["5.0"],"响应式布局常用方法":["5.1"],"css":["6.0","10.0","19.0","80.2","150.8"],"水平布局":["6.1"],"文本":["6.2"],"单个块级元素":["6.3"],"多个块级元素":["6.4"],"使用绝对定位":["6.5"],"任意个元素":["6.6","6.11"],"垂直居中":["6.7"],"单行":["6.8","38.0"],"多行文本":["6.9"],"单个块元素":["6.10"],"水平垂直居中":["6.12"],"行内":["6.13"],"tabel":["6.14"],"绝对定位":["6.15","6.21"],"绝对居中":["6.16"],"flex":["6.17","6.22","6.24","6.27","22.4","23.0"],"两列布局":["6.18"],"float":["6.19","6.20","6.23","6.26"],"三列布局":["6.25"],"cdn":["11.0","78.9"],"是浏览器的核心部分":["12.0"],"参考文章":["13.0"],"什么是同源策略":["13.1"],"跨域解决方案":["13.2"],"jsonp":["13.3"],"cors":["13.4"],"node":["13.5"],"用户输入":["14.0"],"什么是并行处理":["15.0"],"线程":["15.1"],"多进程架构":["15.2"],"是匹配元素之后的选择器":["16.0"],"是什么":["17.0"],"触发条件":["17.1"],"作用":["17.2"],"怎么修改":["18.0"],"产生原因":["18.1"],"解决方案":["18.2"],"合并压缩":["21.0"],"inline":["22.0","22.2"],"block":["22.1"],"none":["22.3"],"采用":["24.0"],"容器属性":["24.1"],"容器成员属性":["24.2"],"margin":["26.0"],"absolute":["27.0"],"fixed":["27.1"],"relative":["27.2"],"static":["27.3"],"inherit":["27.4"],"rem":["28.0"],"图像质量":["29.0"],"transition":["30.0"],"一栏固定宽度":["31.0"],"伪类":["32.0"],"dns":["35.0"],"fouc":["36.0"],"多数显示屏默认频率是":["37.0"],"为什么要清除浮动":["41.0"],"怎么清除":["41.1"],"原理":["42.0","100.1"],"实现":["42.1"],"在标准的":["43.0"],"原因":["44.0"],"解决":["44.1"],"id":["45.0"],"优先级":["45.1"],"前者是标准浏览器中的用法":["46.0"],"为什么需要":["47.0","74.4","90.9"],"a":["48.0"],"h5":["49.0"],"优点":["50.0","71.1"],"定义表单控件的关系":["51.0"],"相同点":["52.0"],"src":["53.0"],"怎么实现浏览器内多个标签的通信":["54.0"],"websocket":["54.1"],"localstorage":["54.2","78.6"],"cookie":["54.3","78.5"],"对语义化的理解":["55.0"],"你是怎么理解语义化的":["55.1"],"常见的语义化标签有哪些":["55.2"],"面试":["56.0"],"作为浏览器脚本语言":["58.0"],"this":["59.0"],"如何阻止事件冒泡和默认事件":["60.0"],"事件捕获和冒泡":["60.1"],"什么是作用域":["61.0"],"作用域的类型":["61.1"],"函数作用域":["61.2"],"块作用域":["61.3"],"var":["61.4"],"作用域链":["61.5"],"闭包":["61.6"],"原型的作用":["62.0"],"原型链":["62.1"],"原型链和作用域链的区别":["62.2"],"proto":["62.3"],"什么是内存泄漏":["63.0"],"内存泄漏的常见原因":["63.1"],"标记清除方法":["63.2"],"引用计数法":["63.3"],"怎么防止内存泄漏":["63.4"],"什么是执行上下文":["64.0"],"执行上下文分类":["64.1"],"执行上下文的特点":["64.2"],"什么是执行栈":["64.3"],"执行上下文的生命周期":["64.4"],"什么是变量对象":["64.5"],"javascript":["65.0","65.7"],"js":["65.1","101.0","102.0","104.0","105.0","106.0","110.0","111.0","112.0","113.0","114.0","115.0","116.0","118.0","119.0","120.0","121.0"],"为什么要新增":["65.2","65.4"],"如果想要复用一个":["65.3"],"null":["65.5","65.6"],"判断数据类型的方法":["65.8"],"怎么判断一个数组":["65.9"],"如何判断一个对象是否为空":["65.10"],"为什么没":["65.11"],"isnan":["65.12"],"object":["65.13"],"为什么":["65.14","92.11","93.1","93.3"],"如何让":["65.15"],"quot":["65.16"],"set":["65.17"],"ajax":["66.0","93.6"],"axios":["66.1"],"检查浏览器中是否缓存过该域名对应的":["68.0"],"区别":["70.0"],"https":["70.1","70.3","85.3"],"混合加密":["70.2"],"对称加密和非对称加密":["70.4"],"怎么实现":["70.5"],"http1":["71.0"],"缺点":["71.2"],"性能":["71.3"],"如何优化":["71.4"],"http2":["71.5"],"有什么优点":["71.6"],"host":["72.0"],"概念":["73.0"],"为什么会有":["74.0"],"什么是":["74.1"],"tcp":["74.2","74.3","74.8"],"三次握手":["74.5"],"四次挥手":["74.6"],"ssl":["74.7"],"简单请求":["76.0"],"短沦陷":["77.0"],"缓存":["78.0"],"强缓存":["78.1"],"协商缓存":["78.2"],"决策指南":["78.3"],"本地存储":["78.4"],"sessionstorage":["78.7"],"indexdb":["78.8"],"懒加载":["79.0"],"防抖与节流":["79.1"],"服务端渲染":["80.0"],"浏览器":["80.1"],"dom":["80.3"],"在网络层面进行优化":["81.0"],"webpack":["81.1","98.0"],"不要让":["81.2"],"处理第三方库":["81.3"],"使用":["81.4"],"构建结果体积压缩":["81.5"],"gzip":["81.6"],"图片优化":["81.7"],"jpeg":["81.8"],"png":["81.9"],"svg":["81.10"],"base64":["81.11"],"webp":["81.12"],"跨站伪造请求":["82.0"],"就是通过把":["83.0"],"xss":["84.0"],"http":["85.0"],"tsl":["85.1"],"对称密钥加密和非对称密钥加密有什么区别":["85.2"],"中间人攻击的过程":["85.4"],"怎么预防中间人攻击":["85.5"],"防护原理":["86.0"],"区分用户是人还是机器":["87.0"],"watch":["88.0","88.3","90.2"],"computed":["88.1","88.2"],"vue":["89.0","89.3","89.8","92.4","92.5","92.6","92.10","93.5","93.10","93.12","93.14","93.17","93.23","93.24","94.2"],"route":["89.1"],"怎么定义动态路由":["89.2"],"hash":["89.4"],"router":["89.5"],"了解":["89.6"],"怎么监听":["89.7","91.2"],"怎么实现路由懒加载":["89.9"],"怎么从零开始实现一个":["89.10"],"proxy":["90.0"],"ref":["90.1"],"composition":["90.3","90.6"],"vue3":["90.4","90.5","90.7","90.8"],"setup":["90.10"],"从":["91.0","93.25"],"vuex":["91.1","91.3"],"pinia":["91.4"],"从零开始实现一个":["91.5"],"数据绑定机制":["92.0"],"template":["92.1"],"怎么监听对象或数组某个属性的变化":["92.2"],"什么是虚拟":["92.3"],"new":["92.7"],"diff":["92.8","92.14"],"响应式数据原理":["92.9"],"nexttick":["92.12"],"v":["92.13","93.2"],"谈谈对":["93.0"],"怎么获取":["93.4"],"对":["93.7","93.9","93.13"],"spa":["93.8"],"既然":["93.11"],"函数式组件的优势和原理":["93.15"],"组件之间通信方式有哪些":["93.16"],"子组件可以直接改父组件的数据吗":["93.18"],"组件和插件有什么区别":["93.19"],"sync":["93.20"],"ssr":["93.21"],"delete":["93.22"],"对生命周期的理解":["94.0"],"什么时候使用":["94.1"],"在那个生命周期中调用异步请求":["94.3"],"babel":["95.0","150.12"],"loader":["96.0","96.2","150.7"],"手写一个":["96.1"],"常见的":["96.3"],"扩展":["97.0"],"工作原理":["97.1"],"编写一个插件":["97.2"],"完整版":["98.1"],"文件指纹是打包后输出的文件名的后缀":["99.0"],"什么是热更新原理":["100.0"],"接收多个函数为参数":["103.0"],"promise":["108.0"],"race":["108.1"],"retry":["108.2"],"settimeout":["109.0"],"冒泡":["117.0"],"选择排序":["117.1"],"插入排序":["117.2"],"快速排序":["117.3"],"归并排序":["117.4"],"节流":["122.0"],"防抖":["122.1"],"算法记录":["123.0"],"题目":["124.0","125.0","126.0","127.0","128.0","129.0","130.0","131.0","132.0","133.0","134.2","135.0","136.0","137.0","138.0","139.0","140.0","141.0","142.0","144.0","145.0","146.0"],"二分查找的思路":["134.0"],"步骤":["134.1"],"链式存储":["143.0"],"测试":["148.0"],"搭建环境":["150.0"],"手动配置":["150.1"],"插件":["150.2"],"htmlwebpackplugin":["150.3"],"mini":["150.4"],"optimize":["150.5"],"uglifyjs":["150.6"],"style":["150.9"],"less":["150.10"],"postcss":["150.11"],"url":["150.13"]},{"0":["6.3","23.0","65.11","90.8","93.25","112.0","117.0","119.0"],"1":["18.2","20.0","23.0","25.0","31.0","33.0","34.0","39.0","40.0","41.1","57.0","59.0","62.3","64.1","64.2","65.9","65.11","65.16","67.0","69.0","71.0","71.4","71.6","73.0","81.3","85.3","89.5","89.9","90.7","91.1","91.3","91.4","91.5","92.10","92.12","93.14","93.15","93.17","93.18","93.19","93.24","93.25","98.1","107.0","112.0","119.0","137.0","148.0"],"2":["57.0","59.0","65.11","65.16","71.4","81.3","93.15","107.0","112.0","117.3"],"3":["59.0","65.16","71.4"],"6":["71.6"],"8":["81.9","94.0"],"24":["81.9"],"27":["136.0"],"28":["67.0"],"100":["39.0"],"304":["78.2"],"704":["134.2"],"tip":["0.0","2.0","3.0","7.0","56.0","123.0","147.0","149.0"],"什么是响应式":["5.0"],"响应式就是将界面设计成能够适应不同的设备":["5.0"],"如果将屏幕看成是容器":["5.0"],"使用":["5.1","6.10","54.2","65.9","74.7","81.3","88.2","89.0","92.9"],"vm":["5.1"],"定制":["5.1"],"rem":["5.1"],"自适应布局":["5.1"],"移动端使用":["5.1"],"布局需要通过":["5.1"],"js":["5.1","10.0","47.0","52.0","62.3","66.0","80.0","93.21","95.0","96.1","97.2","103.0","108.0","108.1","108.2","109.0","117.0","117.1","117.2","117.3","117.4"],"设置不同屏幕宽高比的":["5.1"],"font":["5.1","28.0"],"size":["5.1","138.0"],"结合":["5.1"],"单位和":["5.1"],"calc":["5.1"],"常见布局":["6.0"],"行内元素":["6.2","6.9"],"行内块级元素":["6.2","6.9"],"margin":["6.3","6.19","6.26","31.0"],"css":["6.4","6.5","6.6","6.9","6.10","6.11","6.13","6.14","6.15","6.16","6.17","6.19","21.0","25.0","31.0","38.0","39.0","42.1","43.0","93.2","96.3","150.4","150.5"],"parent":["6.4","6.5","6.10","6.11","6.14","6.15","6.16","6.17","6.21","6.22","6.24","6.26","6.27","92.7","93.16"],"height":["6.5","39.0"],"200px":["6.5","31.0","38.0"],"width":["6.5","31.0","38.0","39.0","42.1"],"定宽":["6.5"],"行内":["6.8"],"行内块":["6.8"],"display":["6.10","6.11","6.17","33.0","34.0","93.2"],"table":["6.10","34.0"],"cell":["6.10","6.14","34.0"],"vertical":["6.10"],"align":["6.10"],"middle":["6.10"],"使用绝对定位":["6.10"],"flex":["6.10","24.0","24.1"],"原理":["6.10","10.0","13.3","88.3"],"子绝父相":["6.10","39.0"],"行内块级":["6.13"],"图片":["6.13","52.0"],"左列定宽":["6.18","6.26"],"body":["6.19","6.20","6.21","6.22","6.23","6.24","6.26","6.27"],"div":["6.19","6.20","6.21","6.22","6.23","6.24","6.26","6.27","38.0","114.0"],"overflow":["6.20","6.23"],"html":["6.20","6.21","6.22","6.23","6.24","6.26","6.27","10.0","17.1","43.0","44.1","55.1","80.1","93.21"],"id":["6.21","6.22","6.23","6.24","6.26","6.27","74.7","92.6","112.0","114.0","119.0"],"两列定宽":["6.25"],"left":["6.26","31.0"],"center":["6.26"],"中间定宽":["6.26"],"300ms":["9.0"],"延迟解决的是双击缩放":["9.0"],"双击缩放":["9.0"],"手指在屏幕快速点击两次":["9.0"],"safari":["9.0"],"加载不会阻塞":["10.0"],"dom":["10.0","58.0","60.0","60.1","80.2","92.3","92.8","93.4","93.16","93.21"],"树的解析":["10.0"],"加载会阻塞":["10.0"],"树的渲染":["10.0"],"加载会阻塞后面":["10.0"],"语句的执行":["10.0"],"解析文件":["10.0"],"生成":["10.0"],"tree":["10.0"],"缓存方便":["11.0"],"主要分为两个部分":["12.0"],"渲染引擎和":["12.0"],"javascript":["12.0","58.0","89.9","92.3","96.3","143.0"],"https":["13.0","70.0","124.0","125.0","126.0","127.0","128.0","129.0","130.0","131.0","132.0","133.0","134.2","135.0","136.0","137.0","138.0","140.0","141.0","142.0","144.0","145.0","146.0"],"同源就是指":["13.1"],"url":["13.1","14.0","89.4","101.0"],"中的协议":["13.1"],"利用":["13.3"],"script":["13.3"],"标签没有跨域限制的漏洞":["13.3"],"网页可以得到从其它来源动态产生的":["13.3"],"json":["13.3"],"数据":["13.3"],"优点是简单兼容性好":["13.3"],"可以用于解决主流浏览器的跨域数据访问的问题":["13.3"],"缺点是只支持":["13.3"],"get":["13.3","69.0","76.0"],"服务端设置":["13.4"],"access":["13.4"],"control":["13.4","78.1","78.3"],"allow":["13.4"],"origin":["13.4"],"中间件代理":["13.5"],"并回车":["14.0"],"浏览器进程检查":["14.0"],"组装协议":["14.0"],"构成完整的":["14.0"],"浏览器进程通过进程间通信":["14.0"],"ipc":["14.0"],"把":["14.0","96.3"],"请求发送给网络进程":["14.0"],"网络进程接收到":["14.0"],"请求后检查本地缓存是否缓存了该请求资源":["14.0"],"如果有则将该资源返回给浏览器进程":["14.0"],"并行处理就是同一时刻处理多个任务":["15.0"],"vs":["15.1"],"进程":["15.1"],"浏览器进程":["15.2"],"主要负责界面显示":["15.2"],"是匹配相邻元素的选择器":["16.0"],"块级格式化上下文":["17.0"],"根元素":["17.1"],"或包含根元素的元素":["17.1"],"清除浮动":["17.2"],"当一个元素的子元素都是浮动元素时":["17.2"],"chrome":["18.0"],"由于":["18.1","44.0"],"里的":["19.0"],"visibility":["19.0"],"属性有个":["19.0"],"collapse":["19.0"],"属性值":["19.0"],"使元素变成行内元素":["22.0"],"使元素变成块级元素":["22.1"],"block":["22.2"],"不显示":["22.3"],"弹性盒子布局":["22.4"],"实际上是":["23.0"],"grow":["23.0"],"shrink":["23.0"],"和":["23.0","26.0","47.0","57.0","65.5","65.12","65.13","71.6","74.8","78.1","81.9","88.1","89.1","89.4","89.5","90.1","90.2","90.3","90.5","90.6","91.1","93.2","93.3","93.20","93.22","131.0","133.0"],"basis":["23.0"],"direction":["24.1"],"决定主轴的方向":["24.1"],"row":["24.1"],"reverse":["24.1","124.0","125.0"],"主轴为水平方向":["24.1"],"起点在左端":["24.1"],"column":["24.1"],"主轴为垂直方向":["24.1"],"起点在上沿":["24.1"],"order":["24.2"],"项目排列顺序":["24.2"],"数值越小越靠前":["24.2"],"默认为":["24.2","31.0"],"import":["25.0"],"是":["25.0","93.13"],"提供的语法规则":["25.0"],"只有导入样式表的作用":["25.0"],"link":["25.0","89.5"],"重叠指的是在垂直方向上":["26.0"],"两个相邻元素的":["26.0"],"发生重叠的情况":["26.0"],"一般来说可以分为四种情形":["26.0"],"第一种是相邻兄弟元素的":["26.0"],"marin":["26.0"],"bottom":["26.0"],"生成绝对定位的元素":["27.0","27.1"],"生成相对定位的元素":["27.2"],"默认值":["27.3"],"规定应该从父元素继承":["27.4"],"单位是根据根元素的":["28.0"],"svg":["29.0"],"使用矢量图形":["29.0"],"可以无限放大而不失真":["29.0"],"canvas":["29.0"],"只能定义两个状态":["30.0"],"右边一栏宽度自适应":["31.0"],"利用浮动":["31.0"],"左边元素定宽":["31.0"],"向左浮动":["31.0"],"float":["31.0"],"右边元素":["31.0"],"宽度设置为":["31.0"],"auto":["31.0"],"撑满整个盒子":["31.0"],"用于当已有元素处于某个状态时":["32.0"],"none":["33.0","93.2"],"把元素隐藏起来":["33.0"],"使元素完全从渲染树中消失":["33.0"],"不占据任何空间":["33.0"],"会改变页面布局":["33.0"],"可以理解为在页面中把该元素删掉":["33.0"],"预解析":["35.0"],"指的是在页面加载过程中":["36.0"],"由于外部样式表加载较慢或延迟":["36.0"],"导致页面先以无样式的方式显示":["36.0"],"然后突然闪烁出样式的现象":["36.0"],"60hz":["37.0"],"就是":["37.0"],"1s":["37.0"],"transform":["39.0"],"box":["39.0"],"background":["39.0"],"color":["39.0"],"red":["39.0"],"100vh":["39.0"],"position":["39.0"],"relative":["39.0"],"元素为行内元素":["40.0"],"设置父元素":["40.0"],"text":["40.0","112.0","119.0"],"clear":["41.1"],"属性":["41.1"],"在浮动元素后添加一个空元素":["41.1"],"相邻边框连接处的均分原理":["42.0"],"test":["42.1"],"盒子模型中":["43.0"],"每个":["43.0"],"元素被表示为一个矩形盒子":["43.0"],"删除":["44.1"],"代码中的空白字符":["44.1"],"选择器":["45.0"],"同一级别":["45.1"],"就近原则":["45.1"],"后者":["46.0"],"ie8":["46.0"],"以下":["46.0"],"async":["47.0"],"defer":["47.0"],"是单线程的":["47.0"],"如果没有":["47.0"],"元素除了导航外":["48.0"],"新特性":["49.0","90.7"],"为了更好的实现语义化":["49.0"],"新增了":["49.0"],"header":["49.0","55.2"],"内容隔离":["50.0"],"当用户选择":["51.0"],"label":["51.0"],"都是告知浏览器提前加载文件":["52.0"],"视频":["52.0","53.0"],"用于替换的当前元素":["53.0"],"用于指定外部资源的地址":["53.0"],"通常用于引入外部文件":["53.0"],"如图片":["53.0"],"音频":["53.0"],"建立":["54.1"],"连接":["54.1"],"const":["54.1","57.0","61.4","101.0","102.0","105.0","117.0","117.2","117.4"],"在一个标签页内使用":["54.2"],"setitem":["54.2"],"key":["54.2","92.6"],"value":["54.2"],"内容":["54.2"],"在另一个标签页里面监听":["54.2"],"storage":["54.2"],"事件":["54.2"],"setinterval":["54.3","109.0"],"将要传递的消息存储在":["54.3"],"语义化的好处":["55.1"],"我认为":["55.1"],"语义化主要指的是我们应该用合适的标签来划分网页内容的结构":["55.1"],"的本质作用其实就是定义网页内容的结构":["55.1"],"页眉":["55.2"],"网站标题":["55.2"],"块级作用域":["57.0"],"引入":["57.0"],"let":["57.0","61.4","115.0","116.0","117.0"],"关键字":["57.0"],"允许在块级作用域中声明变量":["57.0"],"解决了变量提升和作用域污染的问题":["57.0"],"的主要用途是和用户交互以及操作":["58.0"],"所以只能是单线程":["58.0"],"如果不是单线程":["58.0"],"会带来很复杂的同步问题":["58.0"],"比如一个线程在":["58.0"],"节点上添加内容":["58.0"],"另一个线程删除节点":["58.0"],"此时浏览器不知道以那个为准":["58.0"],"同一个时间只能做一件事":["58.0"],"所有任务都需要排队":["58.0"],"前一个任务结束":["58.0"],"才会执行后一个任务":["58.0"],"如果前一个任务耗时很长":["58.0"],"后一个任务就不得不一直等着":["58.0"],"的绑定方式":["59.0"],"默认绑定":["59.0"],"非严格模式下":["59.0"],"指向全局对象":["59.0"],"严格模式下函数内的":["59.0"],"指向":["59.0"],"undefined":["59.0","65.5"],"但是不会改变全局中":["59.0"],"的指向":["59.0"],"隐式绑定":["59.0"],"当函数引用有上下文对象的时候":["59.0"],"比如":["59.0"],"obj":["59.0","104.0","120.0"],"foo":["59.0"],"的调用方式":["59.0"],"内的":["59.0"],"就是说指向调用者":["59.0"],"显示绑定":["59.0"],"标准的":["60.0"],"对象中可以使用事件对象的":["60.0"],"事件捕获阶段":["60.1"],"处于目标阶段":["60.1"],"事件冒泡阶段":["60.1"],"事件流是一个事件沿着特定数据结构传播的过程":["60.1"],"冒泡和捕获是事件流在":["60.1"],"中两种不同的传播方法":["60.1"],"事件捕获":["60.1"],"作用域就是可访问变量的集合":["61.0"],"全局作用域":["61.1"],"指的是声明在函数内部的变量":["61.2"],"块作用域由":["61.3"],"当查找变量的时候":["61.5"],"有权访问另外一个函数作用域中的变量的函数":["61.6"],"主要的就两点":["61.6"],"一是是一个函数":["61.6"],"二是能访问另外一个函数作用域中的变量":["61.6"],"闭包的特性":["61.6"],"可以访问当前函数以外的变量":["61.6"],"即使外部函数已经返回":["61.6"],"闭包仍然能访问外部函数定义的变量":["61.6"],"闭包可以更新外部变量的值":["61.6"],"使用闭包应该注意什么":["61.6"],"内存泄露":["61.6"],"闭包会捕获外部函数的变量":["61.6"],"所以在闭包内部可以访问这些变量":["61.6"],"但是需要注意的是闭包会保持对外部变量的引用":["61.6"],"导致这些变量不会被销毁":["61.6"],"可能导致内存泄露问题":["61.6"],"变量命名冲突":["61.6"],"当闭包内部和外部作用域中存在相同名称的变量的时候":["61.6"],"闭包内部的变量会覆盖外部变量":["61.6"],"所以需要避免变量命名冲突":["61.6"],"闭包的实现原理是什么":["61.6"],"原型被定义为给其它对象提供共享属性的对象":["62.0"],"作用就是当你在访问一个对象上的属性的时候":["62.1"],"原型链是查找对象上的属性":["62.2"],"prototype":["62.3","102.0"],"constructor":["62.3","104.0","105.0","106.0","108.0","113.0"],"对象分为两种":["62.3"],"内存泄漏是指应当被回收的对象没有被正常回收":["63.0"],"创建全局变量":["63.1"],"标记阶段":["63.2"],"将资源被引用的次数保存起来":["63.3"],"及时清除引用":["63.4"],"当前":["64.0"],"全局执行上下文":["64.1"],"只有一个":["64.1"],"是一种":["64.3"],"先进后出":["64.3"],"的数据结构":["64.3"],"主要分为两个阶段":["64.4"],"变量对象是和执行上下文相关的数据作用域":["64.5"],"是什么语言":["65.0"],"都有什么数据类型":["65.1"],"基本数据类型":["65.1"],"string":["65.1","125.0"],"symbol":["65.2","65.3"],"主要是为了解决全局变量冲突的问题":["65.2"],"该怎么操作":["65.3"],"bigint":["65.4"],"的区别":["65.5","65.17","66.1","88.1","89.1","90.2","90.6","93.2","93.20"],"是对象吗":["65.6"],"为什么":["65.6"],"数据如何存储":["65.7"],"typeof":["65.8"],"可以判断除了":["65.8"],"null":["65.8"],"之外的原始数据类型":["65.8"],"判断":["65.8"],"instanceof":["65.9"],"方法":["65.9","92.9"],"运算符判断对象是否为数组":["65.9"],"返回布尔值":["65.9"],"object":["65.10","90.0","92.9"],"keys":["65.10"],"number":["65.12","132.0"],"is":["65.13","105.0"],"隐式类型转换":["65.14"],"if":["65.15","93.2","93.3","117.3","120.0"],"a":["65.15","114.0","125.0","130.0"],"map":["65.16","65.17","106.0"],"weakset":["65.17"],"weakmap":["65.17","120.0"],"是一种异步通信的方法":["66.0"],"通过直接由":["66.0"],"脚本向服务器发起":["66.0"],"http":["66.0","70.0","70.1","71.4","71.6","77.0","78.1","78.5"],"通信":["66.0"],"然后根据服务器返回的数据":["66.0"],"更新网页的相应部分":["66.0"],"而不用刷新整个页面的一种方法":["66.0"],"用途":["66.0"],"ajax":["66.1"],"fetch":["66.1"],"cdn":["67.0"],"的基本原理是广泛采用各种缓存服务器":["67.0"],"将这些缓存服务器分布到用户访问相对集中的地区或者网络中":["67.0"],"在用户访问网站的时候":["67.0"],"将其指向距离最近的工作正常的缓存服务器上":["67.0"],"由缓存服务器直接响应用户请求":["67.0"],"主要特点":["67.0"],"本地":["67.0"],"cache":["67.0","78.1","78.3"],"加速":["67.0"],"提高了企业站点":["67.0"],"尤其含有大量图片和静态页面站点":["67.0"],"ip":["68.0","71.3","74.2"],"地址":["68.0"],"如果浏览器缓存中没有命中":["68.0"],"是从服务器获取指定的资源":["69.0"],"post":["69.0","76.0"],"是超文本传输协议":["70.0"],"明文传输":["70.0"],"存在安全风险的问题":["70.0"],"解决了哪些问题":["70.1"],"存在的问题":["70.1","71.6"],"通过混合加密的方法保证信息的机密性":["70.2"],"握手过程":["70.3"],"第一步":["70.3"],"客户端给出协议版本号":["70.3"],"一个客户端生成的随机数":["70.3"],"对称加密":["70.4"],"对称加密指的就是加密和解密使用同一个秘钥":["70.4"],"所以叫做对称加密":["70.4"],"对称加密只有一个秘钥":["70.4"],"非对称加密":["70.4"],"加密和解密使用不同的秘钥":["70.4"],"一把作为公开的公钥":["70.4"],"另一把作为私钥":["70.4"],"公钥加密的信息":["70.4"],"token":["70.5"],"加密":["70.5"],"需要一个":["70.5"],"简单":["71.1"],"灵活和好扩展":["71.1"],"无状态":["71.2"],"基于":["71.3","81.3"],"tcp":["71.3","71.6","74.0","74.1","74.4"],"使用请求":["71.3"],"应答的通信模式":["71.3"],"在":["71.3","89.2","90.10","91.4","93.5","93.19","94.1","150.3"],"主要从以下三个方面来进行考虑":["71.4"],"尽量避免发送":["71.4"],"请求":["71.4","77.0"],"在需要发送":["71.4"],"请求的时候":["71.4"],"考虑如何减少":["71.4"],"请求数":["71.4"],"减少服务器的":["71.4"],"响应的数据大小":["71.4"],"避免发送":["71.4"],"对于一些具有重复性的":["71.4"],"http2":["71.6"],"的出现是为了解决":["71.6"],"http1":["71.6"],"中存在以下问题":["71.6"],"并发连接有限":["71.6"],"比如谷歌浏览器的最大并发连接数是":["71.6"],"个":["71.6"],"而且每一个连接都要经过":["71.6"],"tsl":["71.6"],"握手的耗时":["71.6"],"队头阻塞问题":["71.6"],"同一个连接只能在完成一个":["71.6"],"请求和响应之后":["71.6"],"才能处理下一个请求":["71.6"],"头部巨大而且重复":["71.6"],"因为":["71.6"],"协议是无状态的":["71.6"],"每一个请求都得携带":["71.6"],"客户端发送请求的时候":["72.0"],"用于指定服务器的域名":["72.0"],"当用户在身份认证服务器上登录过一次之后":["73.0"],"即可获取访问单点登录系统中的其它关联系统和应用软件的权限":["73.0"],"实现机制":["73.0"],"当用户第一次访问应用系统":["73.0"],"的时候":["73.0"],"因为还没有登录":["73.0"],"会被引导到认证系统中进行登录":["73.0"],"网络模型有几层":["74.2"],"应用层":["74.2"],"应用层处于最上层":["74.2"],"用户能够直接接触到的就是应用层":["74.2"],"比如手机和电脑上的软件":["74.2"],"应用层的作用主要就是产生数据":["74.2"],"将数据传给传输层":["74.2"],"应用层工作在系统的用户态":["74.2"],"而传输层之下的工作在内核态":["74.2"],"头格式有哪些":["74.3"],"序列号":["74.3"],"在建立连接的时候由计算机生成的随意数作为其初始值":["74.3"],"一开始":["74.5"],"客户端和服务端都是":["74.5"],"close":["74.5"],"状态":["74.5","74.6"],"先是服务端主动监听某个端口":["74.5"],"处于":["74.5"],"listen":["74.5"],"第一次挥手":["74.6"],"客户端发送一个":["74.6"],"fin":["74.6"],"报文":["74.6"],"报文中会指定一个序列号":["74.6"],"此时客户端处于":["74.6"],"wait1":["74.6"],"停止发送数据":["74.6"],"断开连接后如何恢复":["74.7"],"通过":["74.7","96.3"],"session":["74.7"],"udp":["74.8"],"区别":["74.8","93.2"],"是面向连接的":["74.8"],"是无连接的即发送数据前不需要先建立链接":["74.8"],"1xx":["75.0"],"2xx":["75.1"],"成功":["75.1"],"3xx":["75.2"],"表示客户端请求的资源发生了变动":["75.2"],"需要客户端用新的":["75.2"],"4xx":["75.3"],"5xx":["75.4"],"head":["76.0"],"浏览器每隔一段时间向服务器发送":["77.0"],"服务器端在收到请求后":["77.0"],"不论是否有数据更新":["77.0"],"都直接进行":["77.0"],"响应":["77.0"],"这种方式实现的即时通信":["77.0"],"缓存可以减少网络":["78.0"],"io":["78.0"],"消耗":["78.0"],"强缓存是利用":["78.1"],"头中的":["78.1"],"expires":["78.1"],"两个字段来控制的":["78.1"],"强缓存中":["78.1"],"当请求再次发出时":["78.1"],"浏览器会根据其中的":["78.1"],"判断目标资源是否命中强缓存":["78.1"],"如果命中直接从缓存中获取资源":["78.1"],"不会再与服务端发起通信":["78.1"],"协商缓存依赖于浏览器和服务端之间的通信":["78.2"],"协商缓存机制下":["78.2"],"浏览器需要向服务器去询问缓存的相关信息":["78.2"],"进而判断是重新发起请求":["78.2"],"下载完整的响应":["78.2"],"还是从本地获取缓存的资源":["78.2"],"如果服务端提示资源未改动":["78.2"],"not":["78.2"],"modified":["78.2"],"资源会被重定向到浏览器缓存":["78.2"],"实现协商缓存":["78.2"],"last":["78.2"],"当我们的资源不可复用的时候":["78.3"],"之间为":["78.3"],"为":["78.3"],"no":["78.3"],"store":["78.3","91.1"],"拒绝一切形式的缓存":["78.3"],"否则考虑是否每次都需要向服务器进行缓存有效确认":["78.3"],"如果需要":["78.3"],"设置为":["78.3"],"是一个无状态协议":["78.5"],"服务器接收客户端的请求":["78.5"],"返回一个响应":["78.5"],"持久化的本地存储":["78.6"],"会话级别的存储":["78.7"],"当会话结束":["78.7"],"运行在浏览器上的非关系型数据库":["78.8"],"的缓存和回源机制":["78.9"],"内容分发网络指的是一组分布在各个地区的服务器":["78.9"],"这些服务器存储着数据的副本":["78.9"],"针对图片加载时机的优化":["79.0"],"在一些图片量比较大的网站":["79.0"],"如果尝试在用户打开页面的时候":["79.0"],"本质上都是闭包":["79.1"],"首先是客户端渲染":["80.0"],"在客户端渲染模式下":["80.0"],"服务端会把渲染需要的静态文件发送给客户端":["80.0"],"客户端加载过来之后":["80.0"],"自己在浏览器里跑一遍":["80.0"],"渲染过程":["80.1"],"简单来说就是渲染引擎根据":["80.1"],"文件描述构建相应的数学模型了":["80.1"],"调用浏览器各个模块":["80.1"],"将网页资源代码转换成图像结果":["80.1"],"这个过程就是渲染过程":["80.1"],"解释器":["80.1"],"优化":["80.2","80.3"],"避免使用通配符":["80.2"],"只对需要用到的元素进行选择":["80.2"],"关注可以通过继承实现的属性":["80.2"],"避免重复匹配重复定义":["80.2"],"少用标签选择器":["80.2"],"减少嵌套":["80.2"],"是阻塞渲染的资源":["80.2"],"树和":["80.2"],"cssom":["80.2"],"合并构建成渲染树":["80.2"],"减少":["80.3"],"操作":["80.3","92.8"],"回流":["80.3"],"有三个地方可以进行优化":["81.0"],"分别是":["81.0"],"dns":["81.0"],"loader":["81.2","93.24","96.1","96.3","98.1","150.8","150.9","150.10","150.11","150.12","150.13"],"做太多事情":["81.2"],"dllplugin":["81.3"],"这个插件会把第三方库单独打包到一个文件中":["81.3"],"这个文件就是一个单纯的依赖库":["81.3"],"这个依赖库不会跟着你的业务代码一起被打包":["81.3"],"只有当依赖自身发生版本变化时才会重新打包":["81.3"],"的步骤":["81.3"],"dll":["81.3"],"的配置文件":["81.3"],"打包":["81.3"],"库":["81.3"],"happypack":["81.4"],"将":["81.4"],"loder":["81.4"],"将文件结果可视化":["81.5"],"找出导致体积过大的原因":["81.5"],"包组成可视化工具":["81.5"],"webpack":["81.5","97.0","97.1","98.1","150.1","150.3","150.6","150.7"],"bundle":["81.5"],"analyer":["81.5"],"配置方式和普通":["81.5"],"plugin":["81.5","150.4","150.6"],"一样":["81.5"],"能够以矩形树图的形式将包内各个模块的大小和依赖关系呈现出来":["81.5"],"压缩":["81.6"],"在请求头中通过":["81.6"],"accept":["81.6"],"encoding":["81.6"],"来开启":["81.6"],"图片在所有资源中所占的比重是非常大的":["81.7"],"当下应用比较广泛的":["81.7"],"web":["81.7","83.0"],"图片格式有":["81.7"],"jpg":["81.8"],"有损压缩":["81.8"],"体积小":["81.8","81.10"],"加载快":["81.8"],"是一种无损压缩的高保真的图片格式":["81.9"],"文本文件":["81.10","81.11"],"不失真":["81.10"],"兼容性好":["81.10"],"依赖编码":["81.11"],"小图标解决方案":["81.11"],"和精灵图一样":["81.11"],"都是用于解决小图标的":["81.11"],"精灵图就是将小图标合并到一张图片上":["81.11"],"然后利用":["81.11"],"google":["81.12"],"开发的旨在加快图片加载速度的图片格式":["81.12"],"支持有损压缩和无损压缩":["81.12"],"优点":["81.12"],"具备":["81.12"],"防护原理":["82.0"],"sql":["83.0"],"命令插入到":["83.0"],"cross":["84.0"],"site":["84.0"],"scripting":["84.0"],"是明文传输":["85.0"],"中的加密":["85.1"],"对称密钥加密是最简单的一种加密方式":["85.2"],"加解密都是相同的密钥":["85.2"],"加密过程":["85.3"],"客户端请求网址":["85.3"],"例如www":["85.3"],"客户端请求被劫持":["85.4"],"将所有的请求发送到中间人的服务器":["85.4"],"中间人服务器返回自己的证书":["85.4"],"使用正规厂商的证书":["85.5"],"验证文件类型和大小":["86.0"],"防止恶意破解":["87.0"],"的":["88.0","91.1","92.8"],"deep":["88.0"],"watch":["88.1","91.2"],"的实现":["88.2"],"初始化":["88.2","150.0"],"data":["88.2","93.1"],"本质上是为每个监听属性":["88.3"],"setter":["88.3","92.9"],"路由传参":["89.0"],"router":["89.1","89.8"],"怎么获取传过来的参数":["89.2"],"里面":["89.3"],"history":["89.4","89.6"],"路由模式实现原理":["89.4"],"模式":["89.4"],"早期的前端路由的实现就是基于":["89.4"],"location":["89.4"],"来实现的":["89.4"],"其实现原理很简单":["89.4"],"的值就是":["89.4"],"中":["89.4","91.1","91.4","92.6","96.3"],"后面的内容":["89.4"],"比如下面这个网站":["89.4"],"它的":["89.4"],"view":["89.5","93.13"],"是怎么起作用的":["89.5"],"vue":["89.5","89.10","92.7","92.8","92.11","93.0","93.1","93.11","93.19","93.21","93.25","94.0"],"有哪些方法吗":["89.6"],"这个对象在":["89.6"],"html5":["89.6"],"pushstate":["89.7"],"如何保护路由":["89.8"],"当打包构建应用时":["89.9"],"包会变得非常大":["89.9"],"影响页面加载":["89.9"],"路由":["89.10"],"一个":["89.10"],"spa":["89.10","93.7"],"应用的路由需要解决的问题是":["89.10"],"与":["90.0","93.16"],"defineproperty":["90.0","92.9"],"优劣对比":["90.0"],"watcheffect":["90.2"],"api":["90.3","90.6","90.7"],"options":["90.3"],"对":["90.4"],"vue2":["90.4","90.5","92.4","92.9","93.14"],"react":["90.6"],"hooks":["90.6"],"层面":["90.7"],"新特性主要包括":["90.7"],"composition":["90.7"],"速度快的原因":["90.8"],"性能提升体现在哪些方面":["90.8"],"代码层面性能优化主要体现在全新响应式":["90.8"],"ref":["90.9","93.16","93.23"],"toref":["90.9"],"torefs":["90.9"],"为什么需要用":["90.9"],"返回值类型":["90.9"],"会丢失响应式":["90.9"],"如何获取组件实例":["90.10"],"vuex":["91.0","91.2","91.4","91.5"],"actions":["91.1"],"mutations":["91.1"],"有什么区别":["91.1"],"改":["91.1"],"中的状态的唯一方法是提交":["91.1"],"数据的变化":["91.2"],"可以通过":["91.2"],"选项或者":["91.2"],"页面刷新数据丢失怎么解决":["91.3"],"只是在内存保存状态":["91.3"],"刷新之后就会丢失":["91.3"],"有什么优点":["91.4"],"是什么":["91.4","93.24","96.0"],"vue3":["91.4"],"可以使用传统的":["91.4"],"来实现状态管理":["91.4"],"也可以使用最新的":["91.4"],"说说思路":["91.5"],"官方说":["91.5"],"是一个状态管理模式和库":["91.5"],"并确保这些状态以可预期的方式变更":["91.5"],"采用数据劫持结合发布者":["92.0"],"编译":["92.1"],"转换成":["92.1"],"ast":["92.1"],"树":["92.1"],"得到":["92.1"],"render":["92.1"],"函数返回":["92.1"],"set":["92.2","118.0"],"作用是什么":["92.3"],"只是一层真实":["92.3"],"的抽象":["92.3"],"以":["92.3"],"对象作为基础的树":["92.3"],"怎么检测数组的变化":["92.4"],"怎么进行依赖收集":["92.5"],"依赖收集的目的是等数据变化了可以自动更新视图":["92.5"],"的作用和原理":["92.6"],"给每一个":["92.6"],"vnode":["92.6"],"一个唯一的":["92.6"],"可以依靠":["92.6"],"过程做了什么":["92.7"],"内部会初始化组件绑定的事件":["92.7"],"初始化组件的父子关系":["92.7"],"children":["92.7","93.16","114.0","119.0"],"算法原理":["92.8"],"操作是非常昂贵的":["92.8"],"因此我们需要尽量地减少":["92.8"],"这就需要找出本次":["92.8"],"必须更新的节点来更新":["92.8"],"其他的不更新":["92.8"],"这个找出的过程":["92.8"],"就需要应用":["92.8"],"算法":["92.8"],"数据劫持":["92.9"],"观察者模式":["92.9"],"对象内部通过":["92.9"],"definereactive":["92.9"],"来劫持各个属性的":["92.9"],"getter":["92.9"],"只会劫持已经存在的属性":["92.9"],"数组则是通过":["92.9"],"重写数组7个方法":["92.9"],"来实现":["92.9"],"当页面使用对应属性时":["92.9"],"每个属性都拥有自己的":["92.9"],"实例挂载的过程中发生了什么":["92.10"],"挂载过程指的是":["92.10"],"采用异步渲染":["92.11"],"是组件级更新":["92.11"],"实现原理":["92.12","92.13"],"主要是使用了宏任务和微任务":["92.12"],"定义一个异步方法":["92.12"],"多次调用":["92.12"],"会将方法存入到队列中":["92.12"],"通过这个异步方法清空当前队列":["92.12"],"中的回调是在下次":["92.12"],"model":["92.13","93.13","93.20"],"我们在":["92.13"],"算法的时间复杂度":["92.14"],"的理解":["93.0","93.9","93.13","93.21"],"组件中":["93.1"],"show":["93.2"],"隐藏则是为该元素添加":["93.2"],"v":["93.3","93.20"],"for":["93.3","115.0","116.0","117.0"],"初始化页面闪动问题":["93.5"],"请求应该放在":["93.6"],"methods":["93.6"],"页面的理解":["93.7"],"优缺点":["93.7"],"首屏加载慢怎么解决":["93.8"],"什么叫首屏加载时间":["93.8"],"浏览器从响应用户输入网站地址":["93.8"],"keep":["93.9"],"alive":["93.9"],"observable":["93.10"],"通过数据劫持可以精准探测数据变化":["93.11"],"mixin":["93.12"],"使用场景和原理":["93.12"],"在日常的开发中":["93.12"],"mvvm":["93.13"],"viewmodel":["93.13"],"缩写":["93.13"],"也就是把":["93.13"],"组件为什么只有一个根元素":["93.14"],"中组件确实只能有一个根":["93.14"],"函数式组件需要在声明组件是指定":["93.15"],"functional":["93.15"],"true":["93.15"],"不需要实例化":["93.15"],"所以没有":["93.15"],"this":["93.15","102.0","105.0","106.0","108.0","113.0"],"props":["93.16"],"emit":["93.16"],"适用":["93.16"],"父子组件通信":["93.16"],"父组件向子组件传递数据是通过":["93.16"],"prop":["93.16","93.18"],"传递的":["93.16"],"子组件传递数据给父组件是通过":["93.16"],"触发事件来做到的":["93.16"],"vue3废弃":["93.16"],"如果在普通的":["93.16"],"元素上使用":["93.16"],"如何扩展一个组件":["93.17"],"常见的组件扩展方法有":["93.17"],"所有的":["93.18"],"都使得其父子之间形成了一个单向下行绑定":["93.18"],"父级":["93.18"],"组件是什么":["93.19"],"组件就是把图形":["93.19"],"非图形的各种逻辑均抽象为一个统一的概念":["93.19"],"组件":["93.19","93.21"],"来实现开发的模式":["93.19"],"中每一个":["93.19"],"文件都可以视为一个组件":["93.19"],"组件的优势":["93.19"],"降低整个系统的耦合度":["93.19"],"在保持接口不变的情况下":["93.19"],"我们可以替换不同的组件快速完成需求":["93.19"],"是构建客户端应用程序的框架":["93.21"],"默认情况下":["93.21"],"可以在浏览器中输出":["93.21"],"进行生成":["93.21"],"和操作":["93.21"],"然而":["93.21"],"也可以将同一个组件渲染为服务端的":["93.21"],"字符串":["93.21"],"将它们直接发送到浏览器":["93.21"],"最后将这些静态标记":["93.21"],"激活":["93.21"],"为客户端上完全可交互的应用程序":["93.21"],"也就是服务端渲染":["93.21"],"也就是将":["93.21"],"在客户端把标签渲染成":["93.21"],"的作用":["93.23"],"有什么作用":["93.24"],"是用于处理单文件组件":["93.24"],"sfc":["93.24"],"到":["93.25"],"自己构架一个":["93.25"],"项目":["93.25"],"有哪些步骤":["93.25"],"哪些重要插件":["93.25"],"目录结构怎么组织":["93.25"],"创建一个项目我大致会做以下事情":["93.25"],"项目构建":["93.25"],"的生命周期即一个":["94.0"],"实例从被创建到被销毁的过程":["94.0"],"可以分为":["94.0"],"个阶段":["94.0"],"beforecreate":["94.0","94.2"],"实例创建前":["94.0"],"created":["94.0"],"实例创建完成":["94.0"],"beforemount":["94.0"],"挂载前":["94.0"],"mounted":["94.0"],"挂载完成":["94.0"],"beforeupdate":["94.0"],"beforedestory":["94.1"],"的父组件和子组件生命周期钩子函数执行顺序":["94.2"],"加载渲染过程":["94.2"],"父":["94.2"],"可以在":["94.3"],"主要用于将新版本的代码转换为向后兼容的":["95.0"],"语法":["95.0"],"polyfill":["95.0"],"方式":["95.0"],"作用":["96.1"],"将css内容":["96.1"],"的执行顺序":["96.2"],"style":["96.3"],"注入到":["96.3"],"自定义一个名为myplugin插件":["97.2"],"该插件在打包完成后":["97.2"],"构建流程":["98.0"],"从项目的":["98.1"],"entry":["98.1"],"入口文件开始递归分析":["98.1"],"调用所有配置的":["98.1"],"对模块进行编译":["98.1"],"hash":["99.0","120.0"],"和整个项目的构建相关":["99.0"],"开发过程中":["100.0"],"主要是通过":["100.1"],"webscoket":["100.1"],"实现":["100.1"],"建立本地服务器和浏览器的双向通信":["100.1"],"当代码变化后":["100.1"],"重新编译后":["100.1"],"getjson":["101.0"],"function":["101.0","102.0","103.0","104.0","108.2","109.0","110.0","111.0","115.0","116.0","117.0","117.1","117.2","117.3","117.4","120.0","121.0"],"return":["101.0","108.1"],"new":["101.0","106.0","118.0","120.0"],"call":["102.0"],"mycall":["102.0"],"context":["102.0"],"args":["102.0"],"window":["102.0"],"fn":["102.0","108.0","108.2"],"由右向左依次执行函数":["103.0"],"compose":["103.0"],"fns":["103.0"],"myinstanceof":["104.0"],"class":["105.0","106.0","108.0","108.1","113.0"],"lazyman":["105.0"],"name":["105.0"],"tasks":["105.0"],"task":["105.0"],"console":["105.0"],"log":["105.0"],"hi":["105.0"],"缓存淘汰策略":["106.0"],"移除最近最少被访问的数据项":["106.0"],"lrucache":["106.0"],"capacity":["106.0"],"创建一个对象":["107.0"],"该对象的原型指向构造函数的原型":["107.0"],"调用该构造函数":["107.0"],"构造函数的":["107.0"],"resolve时的回调函数列表":["108.0"],"resolvetask":["108.0"],"reject时的回调函数列表":["108.0"],"rejecttask":["108.0"],"state记录当前状态":["108.0"],"共有pending":["108.0"],"fulfilled":["108.0"],"rejected":["108.0"],"3种状态":["108.0"],"all":["108.1"],"promise":["108.1"],"race静态方法":["108.1"],"返回promises列表中第一个执行完的结果":["108.1"],"static":["108.1"],"promises":["108.1"],"param":["108.2"],"方法名":["108.2"],"模拟实现":["109.0"],"mysetinterval":["109.0"],"callback":["109.0","113.0"],"delay":["109.0"],"curry":["111.0"],"节点1":["112.0","119.0"],"parentid":["112.0","119.0"],"这里用0表示为顶级节点":["112.0"],"eventemitter":["113.0"],"创建一个空对象存储事件和对应的回调函数":["113.0"],"events":["113.0"],"实现订阅":["113.0"],"on":["113.0"],"type":["113.0"],"检查是否已经存在该类型的事件订阅":["113.0"],"tag":["114.0"],"attrs":["114.0"],"app":["114.0"],"span":["114.0"],"递归的方法":["115.0","116.0"],"flat":["115.0","116.0"],"arr":["115.0","116.0","117.0","117.2","117.4","118.0"],"res":["115.0","116.0"],"bubblesort":["117.0"],"缓存数组长度":["117.0","117.2"],"len":["117.0","117.2","117.4"],"length":["117.0","117.3","117.4"],"外层循环用于控制从头到尾的比较":["117.0"],"交换到底有多少轮":["117.0"],"i":["117.0","127.0"],"内层循环用于完成每一轮遍历过程中的重复比较":["117.0"],"循环遍历数组":["117.1"],"每次都找出当前范围内的最小值":["117.1"],"把它放在当前范围的头部":["117.1"],"然后缩小排序范围":["117.1"],"重复":["117.1"],"直到数组完全有序":["117.1"],"selectsort":["117.1"],"找到元素在它前面那个序列中的正确位置":["117.2"],"insertsort":["117.2"],"定义一个名为sortarray的函数":["117.3"],"它接受一个数组nums作为输入参数":["117.3"],"var":["117.3"],"sortarray":["117.3"],"nums":["117.3","127.0","130.0"],"如果数组长度小于2":["117.3"],"表示数组已经有序或为空":["117.3"],"直接返回原数组":["117.3"],"将需要被排序的数组从中间分割为两半":["117.4"],"然后再将分割出来的每个子数组各分割为两半":["117.4"],"重复以上操作":["117.4"],"直到单个子数组只有一个元素为止":["117.4"],"从粒度最小的子数组开始":["117.4"],"两两合并":["117.4"],"确保每次合并出来的数组都是有序的":["117.4"],"mergesort":["117.4"],"方法1":["118.0"],"使用set":["118.0"],"方法2":["118.0"],"使用includes":["118.0"],"deepclone":["120.0"],"某个函数在一定时间间隔内只执行一次":["122.0"],"在规定的延迟时间内无视后来产生的函数调用请求":["122.0"],"也不会延长时间":["122.0"],"控制函数执行频率的技术":["122.0"],"确保函数在一定时间间隔内最多执行一次":["122.0"],"以减轻高频率触发函数的性能问题":["122.0"],"一般情况下处理事件监听":["122.0"],"是指某个函数在规定的时间段内":["122.1"],"无论触发多少次回调":["122.1"],"只执行最后":["122.1"],"一般用于处理需要等待一段时间后稳定下来的事件":["122.1"],"比如输入框的输入事件":["122.1"],"滚动事件":["122.1"],"窗口大小调":["122.1"],"反转字符串":["124.0"],"leetcode":["124.0","125.0","126.0","127.0","128.0","129.0","130.0","131.0","132.0","133.0","134.2","135.0","136.0","137.0","138.0","140.0","141.0","142.0","144.0","145.0","146.0"],"cn":["124.0","125.0","126.0","127.0","128.0","129.0","130.0","131.0","132.0","133.0","134.2","135.0","136.0","137.0","138.0","140.0","141.0","142.0","144.0","145.0","146.0"],"problems":["124.0","125.0","126.0","127.0","128.0","129.0","130.0","131.0","132.0","133.0","134.2","135.0","136.0","137.0","138.0","140.0","141.0","142.0","144.0","145.0","146.0"],"反转字符串中的单词":["125.0"],"words":["125.0"],"in":["125.0"],"description":["125.0","127.0","128.0","130.0","131.0","132.0","133.0","134.2","137.0","139.0"],"给你一个字符串":["125.0"],"s":["125.0","133.0"],"请你反转字符串中":["125.0"],"单词":["125.0"],"的顺序":["125.0"],"是由非空格字符组成的字符串":["125.0"],"路径加密":["126.0"],"ti":["126.0"],"三数之和":["127.0"],"3sum":["127.0"],"给你一个整数数组":["127.0"],"判断是否存在三元组":["127.0"],"j":["127.0"],"k":["127.0"],"满足":["127.0"],"两个数组的交集":["128.0"],"intersection":["128.0","146.0"],"of":["128.0"],"two":["128.0","129.0"],"arrays":["128.0"],"两数之和":["129.0"],"sum":["129.0","138.0"],"四数之和":["130.0"],"4sum":["130.0","131.0"],"给你一个由":["130.0"],"n":["130.0","132.0","137.0","141.0"],"个整数组成的数组":["130.0"],"和一个目标值":["130.0"],"target":["130.0"],"请你找出并返回满足下述全部条件且不重复的四元组":["130.0"],"b":["130.0"],"c":["130.0"],"d":["130.0"],"若两个四元组元素一一对应":["130.0"],"四数相加":["131.0"],"ii":["131.0","137.0"],"给你四个整数数组":["131.0"],"nums1":["131.0"],"nums2":["131.0"],"nums3":["131.0"],"快乐数":["132.0"],"happy":["132.0"],"编写一个算法来判断一个数":["132.0"],"是不是快乐数":["132.0"],"定义为":["132.0"],"有效的字母异位词":["133.0"],"valid":["133.0"],"anagram":["133.0"],"给定两个字符串":["133.0"],"t":["133.0"],"编写一个函数来判断":["133.0"],"是否是":["133.0"],"二分查找也叫折半查找":["134.0"],"初始化左右边界":["134.1"],"计算中间位置":["134.1"],"力扣":["134.2","136.0"],"二分查找":["134.2"],"binary":["134.2"],"search":["134.2"],"有序数组的平方":["135.0"],"squares":["135.0"],"移除元素":["136.0"],"remove":["136.0","141.0","144.0"],"螺旋矩阵":["137.0"],"spiral":["137.0"],"matrix":["137.0"],"给你一个正整数":["137.0"],"生成一个包含":["137.0"],"长度最小的子数组":["138.0"],"minimum":["138.0"],"subarray":["138.0"],"两两交换链表中的节点":["140.0"],"swap":["140.0"],"nodes":["140.0"],"删除链表的倒数第":["141.0"],"个结点":["141.0"],"nth":["141.0"],"node":["141.0","150.0"],"from":["141.0"],"环形链表":["142.0"],"linked":["142.0","144.0"],"list":["142.0"],"每一个元素中存储当前节点的值和指向下一个节点的指针":["143.0"],"移除链表元素":["144.0"],"反转链表":["145.0"],"链表相交":["146.0"],"默认配置名为":["150.1"],"config":["150.1"],"构建过程中自动生成":["150.3"],"extract":["150.4"],"只能理解":["150.7"]},{"0":["24.2","42.1","61.6","71.3","103.0","108.1","115.0","116.0","117.3","127.0","130.0","131.0"],"1":["36.0","64.3","64.4","65.15","71.3","74.5","74.6","89.10","98.0","100.1","117.0","117.3","117.4","132.0"],"2":["31.0","34.0","40.0","41.1","62.3","64.1","65.9","67.0","69.0","85.3","89.9","91.3","92.12","93.14","93.24","93.25","117.4","119.0"],"3":["57.0","65.11","67.0","85.3","93.15","93.25","107.0"],"4":["59.0"],"5":["59.0","61.6"],"10":["6.26"],"50":["39.0"],"60":["37.0"],"100":["6.26"],"200":["6.26","75.1","78.1"],"256":["81.9"],"这里主要记录后端知识点":["0.0"],"这里主要记录突发奇想":["2.0"],"这里主要记录框架相关知识点":["3.0"],"那么内容就像水一样":["5.0"],"为什么要设计响应式":["5.0"],"首先":["5.0","92.1"],"可以脱离":["5.1"],"的控制":["5.1"],"适用于":["5.1","93.16"],"布局":["5.1","44.1"],"nth":["5.1"],"child":["5.1"],"选择指定元素":["5.1"],"通过":["5.1","59.0","74.3","74.8","92.1","93.15","100.1"],"筛选指定的元素设置样式":["5.1"],"适用于表格着色":["5.1"],"边界元素排版":["5.1"],"使用":["6.2","44.1","63.4","65.3","82.0","93.4"],"text":["6.2","6.4","76.0","89.4"],"align":["6.2","6.4","6.11","34.0","40.0"],"auto":["6.3","6.17"],"必须定宽":["6.3"],"优点":["6.3","41.1","66.0","93.21"],"center":["6.4","6.27","40.0"],"position":["6.5","6.10","6.15","6.16","27.4"],"relative":["6.5","6.10","6.15","6.16"],"父相":["6.5","6.10"],"background":["6.5","31.0"],"color":["6.5","31.0"],"f00":["6.5"],"son":["6.5","6.15","6.16","6.17","39.0"],"parent":["6.6","6.8","6.9","6.13","6.23"],"display":["6.6"],"css":["6.8","6.26","52.0","80.1","81.11","98.1"],"或者用span把所有文字包裹起来":["6.9"],"设置display":["6.9"],"top":["6.10","26.0","89.4"],"right":["6.10","6.21","6.26","31.0"],"bottom":["6.10"],"left":["6.10","6.19","6.20","6.21","6.22","6.23","6.24","6.27"],"的值是相对于父元素尺寸的":["6.10"],"然后":["6.10"],"margin":["6.10","6.17"],"或者":["6.10","93.25"],"transform":["6.10"],"是相对于自身尺寸的":["6.10"],"组合使用达到水平居中的目的":["6.10"],"height":["6.10","6.13","6.14","42.1"],"150px":["6.10","6.13","6.14"],"flex":["6.11","24.2","34.0","44.1"],"items":["6.11"],"width":["6.14","6.26"],"右列自适应":["6.18","6.26"],"id":["6.19","6.20","54.2"],"左列定宽":["6.19","6.20","6.21","6.22","6.27"],"左列不定宽":["6.23","6.24"],"一列自适应":["6.25"],"min":["6.26"],"310px":["6.26"],"防止宽度不够":["6.26"],"子元素换行":["6.26"],"10px":["6.26"],"中间定宽":["6.27"],"这里主要记录前端基础知识":["7.0"],"浏览器就会将网页缩放至原始比例":["9.0"],"当用户点击屏幕一次之后":["9.0"],"浏览器并不会判断用户确实要打开至这个链接":["9.0"],"还是想要进行双击操作":["9.0"],"所以":["9.0","89.10"],"解析":["10.0","14.0","80.1","81.0","150.8"],"文件生成":["10.0"],"cssom":["10.0"],"将":["10.0","44.1","80.1","150.4","150.10"],"和":["10.0","62.3","74.2","78.3","89.6","89.7","92.6","92.8","94.0","94.3","128.0","130.0"],"结合":["10.0"],"render":["10.0","93.15"],"渲染树":["10.0"],"根据":["10.0","92.8"],"突破浏览器并发限制":["11.0"],"引擎":["12.0"],"渲染引擎":["12.0"],"负责解析网页的":["12.0"],"juejin":["13.0"],"http":["13.1","14.0","70.4","71.1","71.3"],"https":["13.1","70.4","85.0","89.4"],"域名":["13.1"],"请求方法":["13.3"],"实现":["13.3","90.8","143.0"],"js":["13.3","59.0","61.6","81.3","81.5","98.1","125.0","137.0","141.0","143.0","150.1","150.6"],"index":["13.3"],"html":["13.3","25.0","44.0","80.2","84.0","93.7","150.3"],"function":["13.3","61.6","96.1","143.0"],"url":["13.3","75.2"],"params":["13.3"],"callback":["13.3"],"return":["13.3","102.0","108.0","111.0","117.3","117.4","120.0"],"开启":["13.4"],"这个属性表示的是那个域名可以访问资源":["13.4"],"如果设置为通配符表示所有网站都可以访问资源":["13.4"],"使用这种方式解决跨域":["13.4"],"服务器向服务器请求不用遵循同源策略":["13.5"],"如果没有":["14.0","58.0"],"网络进程向":["14.0"],"web":["14.0","84.0","93.7"],"服务器发起":["14.0"],"请求":["14.0"],"网络请求":["14.0"],"请求流程如下":["14.0"],"进行":["14.0","93.11"],"dns":["14.0"],"获取服务器":["14.0"],"ip":["14.0","74.0"],"地址":["14.0"],"端口":["14.0"],"端口是通过":["14.0"],"一个进程就是一个程序的运行实例":["15.1"],"启动一个程序的时候":["15.1"],"用户交互":["15.2"],"子进程管理":["15.2"],"同时提供存储功能":["15.2"],"bfc":["17.0","26.0"],"浮动元素":["17.1"],"元素的":["17.1"],"float":["17.1"],"属性不为":["17.1"],"它将会塌陷":["17.2"],"不会正常地包裹子元素":["17.2"],"记住密码后自动填充表单的黄色背景":["18.0"],"chrome":["18.1"],"在":["18.2","60.0","70.0","78.1","92.9","93.3"],"form":["18.2","78.1"],"在不同浏览器下有什么区别":["19.0"],"通常用于表格的行和列":["19.0"],"当用于行上的时候":["19.0"],"该行会被隐藏":["19.0"],"并且不会占据任何空间":["19.0"],"相邻的行自动合并":["19.0"],"新增伪类和伪元素":["20.0"],"通用选择器":["20.0"],"文件":["21.0","25.0","81.3","98.1","150.3","150.7"],"拥有行内元素的特性":["22.0"],"可以和其它行内元素共占一行":["22.0"],"独占一行":["22.1"],"可以和其他元素共占一行":["22.2"],"三个属性的缩写":["23.0"],"定义项目的的放大比例":["23.0"],"默认为":["23.0"],"如果存在剩余空间":["23.0"],"元素也不会放大":["23.0"],"设置为":["23.0"],"代表会放大":["23.0"],"等分剩余空间":["23.0"],"布局的元素":["24.0"],"起点在下沿":["24.1"],"wrap":["24.1"],"如果主轴排列不下":["24.1"],"通过这个属性判断是否换行":["24.1"],"换行":["24.1"],"在第一行下方":["24.1"],"grow":["24.2"],"如果不换行":["24.2"],"容器宽度不够分的情况":["24.2"],"提供的标签":["25.0"],"不仅可以加载":["25.0"],"还可以定义":["25.0"],"的值发生重叠":["26.0"],"这种情况下我们可以通过设置其中一个元素为":["26.0"],"来解决":["26.0"],"第二种是父元素的":["26.0"],"和子元素的":["26.0"],"相对于":["27.0"],"相对于浏览器窗口进行定位":["27.1"],"相对于其正常位置进行定位":["27.2"],"没有定位":["27.3"],"size":["28.0"],"来计算":["28.0"],"使用像素图形":["29.0"],"图像不可以无限放大不失真":["29.0"],"编辑和修改":["29.0"],"开始状态和结束状态":["30.0"],"tomato":["31.0"],"gold":["31.0"],"左侧元素设置固定大小":["31.0"],"并左浮动":["31.0"],"右侧元素设置":["31.0"],"为其添加对应的部分":["32.0"],"这个状态是根据用户行为而动态变化的":["32.0"],"非继承属性":["33.0"],"子孙节点消失是因为元素本身从渲染树中消失":["33.0"],"修改子孙节点的属性无法使其显示":["33.0"],"会导致重排":["33.0"],"读屏器不会读取":["33.0"],"元素的内容":["33.0"],"vertial":["34.0"],"middle":["34.0"],"tcp":["35.0","70.0","81.0"],"解决":["36.0"],"将样式表放在文档的":["36.0"],"head":["36.0","142.0","144.0","145.0"],"中":["36.0","54.3","71.3","71.6","93.3"],"刷新":["37.0"],"次":["37.0"],"overflow":["38.0"],"hidden":["38.0"],"white":["38.0"],"space":["38.0"],"green":["39.0"],"200px":["39.0"],"设置了top和left":["39.0"],"之后":["39.0","74.6"],"子元素的左上角位于父盒子的中心位置":["39.0"],"使用transform将子元素向左上移动自身元素的50":["39.0"],"如果元素宽度固定":["40.0"],"可以设置左右":["40.0"],"浮动元素脱离了标准文档流":["41.0"],"对其设置":["41.1"],"both":["41.1"],"简单":["41.1"],"将元素的宽高设置为":["42.0"],"盒子包括四个部分":["43.0"],"内存区域":["43.0"],"content":["43.0","71.6","76.0"],"内边距区域":["43.0"],"padding":["43.0"],"类选择器":["45.0"],"后写的覆盖先写的":["45.1"],"不同级别":["45.1"],"addeventlistener":["46.0"],"可有冒泡":["46.0"],"可有捕获":["46.0"],"或":["47.0"],"属性":["47.0","92.5","92.9"],"浏览器会立即加载并执行相应的脚本":["47.0"],"不会等到后续加载的文档元素":["47.0"],"还有什么作用":["48.0"],"创建内部书签链接":["48.0"],"footer":["49.0"],"nav":["49.0","55.2"],"aside":["49.0"],"article":["49.0"],"允许在一个网页中嵌套另一个网页":["50.0"],"实现内容隔离":["50.0"],"标签时":["51.0"],"浏览器会自动将焦点转到和":["51.0"],"等":["52.0"],"但执行上是有区别的":["52.0"],"区别":["52.0","61.4"],"脚本等":["53.0"],"指向的内容会嵌入到文档中当前标签所在的位置":["53.0"],"常用于":["53.0"],"img":["53.0"],"script":["53.0"],"iframe":["53.0"],"audio":["53.0"],"video":["53.0"],"socket":["54.1"],"new":["54.1","59.0","67.0","92.9","94.0","108.1","137.0"],"ws":["54.1"],"your":["54.1"],"标签页1":["54.2"],"input":["54.2"],"name":["54.2"],"lt":["54.2"],"type":["54.2","76.0","91.1"],"quot":["54.2"],"button":["54.2"],"每隔一段时间读取":["54.3"],"一个语义化的文档":["55.1"],"能够使页面的结构更加清晰":["55.1"],"易于理解":["55.1","77.0"],"这样不仅有利于开发者的阅读和理解":["55.1"],"同时也能够使机器对文档内容进行正确的解读":["55.1"],"比如说我们常用的":["55.1"],"导航菜单等":["55.2"],"导航部分":["55.2"],"通常包含网站的主要导航链接":["55.2"],"面试题总结与归纳":["56.0"],"箭头函数":["57.0","59.0"],"使用箭头":["57.0"],"定义函数":["57.0"],"简化了函数的书写":["57.0"],"并且自动绑定了":["57.0"],"this":["57.0","107.0"],"模板字符串":["57.0"],"使用反引号":["57.0"],"包裹字符串":["57.0"],"可以在字符串中使用变量和表达式":["57.0"],"所有任务可以分成两种":["58.0"],"一种是宏任务":["58.0"],"另一种是微任务":["58.0"],"宏任务指的是":["58.0"],"在主线程上排队执行的任务":["58.0"],"只有前一个任务执行完毕":["58.0"],"才能执行下一个任务":["58.0"],"微任务指的是":["58.0"],"不进入主线程":["58.0"],"而进入":["58.0"],"微任务队列":["58.0"],"的任务":["58.0"],"当前宏任务执行完后":["58.0"],"会判断微任务列表中是否有任务":["58.0"],"如果有":["58.0"],"会把该微任务放到主线程中并执行":["58.0"],"就继续执行下一个宏任务":["58.0"],"call":["59.0"],"apply":["59.0"],"bind":["59.0"],"方法直接指定":["59.0"],"的指向对象":["59.0"],"构造函数":["59.0"],"指向新生成的对象":["59.0","107.0"],"指向的是定义这个箭头函数的时候":["59.0"],"外层环境中的":["59.0"],"箭头函数在定义的时候就指定了":["59.0"],"不能改变":["59.0"],"use":["59.0"],"strict":["59.0"],"var":["59.0","61.6","125.0"],"a":["59.0","135.0"],"stoppropagation":["60.0"],"方法来阻止冒泡":["60.0"],"当鼠标点击或者触发":["60.1"],"事件时":["60.1"],"浏览器会从根节点开始由外到内进行事件传播":["60.1"],"就是说点击了子元素":["60.1"],"如果父元素通过事件捕获方式注册了对应的事件的话":["60.1"],"会先触发父元素绑定的事件":["60.1"],"事件冒泡":["60.1"],"做大的作用就是隔离变量":["61.0"],"函数作用域和块级作用域":["61.1"],"函数的作用域在函数":["61.2"],"包括":["61.3"],"if":["61.3","78.2","103.0","104.0","106.0","108.0","113.0","115.0","116.0","117.0","117.4"],"没有块级作用域概念":["61.4"],"会先从当前上下文的变量对象中查找":["61.5"],"利用了作用域链的特性":["61.6"],"在当前执行环境下访问某个变量的时候":["61.6"],"如果不存在就一直向外层寻找":["61.6"],"最终寻找到最外层也就是全局作用域":["61.6"],"原始题目":["61.6"],"for":["61.6","65.3","108.1","117.2","118.0"],"i":["61.6","108.1","115.0","116.0","131.0"],"settimeout":["61.6","105.0"],"console":["61.6"],"log":["61.6"],"1s":["61.6"],"后打印出":["61.6"],"个":["61.6"],"函数的实例可以共享原型上的属性和方法":["62.0"],"如果该对象内部不存在这个属性":["62.1"],"作用域链是查找当前上下文中的变量":["62.2"],"普通对象和函数对象":["62.3"],"导致内存占用越来越高":["63.0"],"被遗忘的计时器或回调函数":["63.1"],"闭包":["63.1"],"垃圾回收器从根对象开始遍历":["63.2"],"每一个可以从根对象访问到的对象都会被添加一个标识":["63.2"],"当被引用次数为零时释放":["63.3"],"javascript":["64.0","150.4","150.7"],"浏览器环境下为":["64.1"],"window":["64.1","67.0"],"单线程":["64.2"],"只在主线程上运行":["64.2"],"用来存储代码运行的所有执行上下文":["64.3"],"当":["64.3"],"创建阶段":["64.4"],"存储了上下文中定义的变量和函数声明":["64.5"],"是一个抽象的概念":["64.5"],"number":["65.1","108.2"],"boolean":["65.1"],"null":["65.1","120.0"],"undefined":["65.1"],"比如定义了一个全局对象":["65.2"],"用来缓存数据":["65.2"],"作用是什么":["65.4"],"支持比":["65.4"],"空值":["65.5"],"语义是表示一个对象被认为的重置为空对象":["65.5"],"不是一个变量最原始的状态":["65.5"],"使用场景":["65.5"],"typeof":["65.6","104.0","120.0"],"object":["65.6","65.8","88.2","104.0","120.0"],"基本数据类型用栈存储":["65.7"],"栈内存的特点的分配固定大小的内存空间":["65.7"],"为":["65.8"],"对于引用类型":["65.8"],"会判断为":["65.8"],"例如":["65.9"],"arr":["65.9","117.1"],"array":["65.9","115.0","116.0","135.0"],"constructor":["65.9"],"obj":["65.10"],"怎么解决":["65.11"],"原因":["65.11"],"当计算机计算":["65.11"],"函数的区别":["65.12"],"接收参数后":["65.12"],"的区别":["65.13","90.1"],"两边类型不一致":["65.13"],"会进行强制类型转换再进行比较":["65.13"],"转换过程":["65.14"],"parseint":["65.16"],"答案是多少":["65.16"],"答案":["65.16"],"nan":["65.16"],"第一个参数":["65.16"],"str":["65.16"],"成员不能重复":["65.17"],"只有健值":["65.17"],"没有健名":["65.17"],"有点类似数组":["65.17"],"可以遍历":["65.17"],"方法有":["65.17"],"无刷新获取服务器数据":["66.0"],"通过异步模式":["66.0"],"提升了用户体验":["66.0"],"优化了浏览器和服务器之间的传输":["66.0"],"减少不必要的数据往返":["66.0"],"减少了带宽占用":["66.0"],"在客户端运行":["66.0"],"承担了一部分本来由服务器承担的工作":["66.0"],"是一种技术统称":["66.1"],"基于原生的":["66.1"],"xhr":["66.1","101.0"],"开发":["66.1"],"已经有了":["66.1"],"的访问速度":["67.0"],"并大大提高以上性质站点的稳定性":["67.0"],"镜像服务":["67.0"],"消除了不同运营商之间互联的瓶颈造成的影响":["67.0"],"实现了跨运营商的网络加速":["67.0"],"保证不同网络中的用户都能得到良好的访问质量":["67.0"],"远程加速":["67.0"],"远程访问":["67.0"],"opens":["67.0"],"用户根据":["67.0"],"dns负载均衡":["67.0"],"将继续查找本级":["68.0"],"操作系统":["68.0"],"是否缓存过该":["68.0"],"是根据请求报文对指定的资源做出处理":["69.0"],"请求的参数一般放在":["69.0"],"是为了解决":["70.0"],"不安全的缺陷":["70.0"],"窃听风险":["70.1"],"通信链路上可以获取通信内容":["70.1"],"用户信息容易泄露":["70.1"],"采用对称加密和非对称加密的方式在通信建立前采用非对称加密的方式交换会话密钥":["70.2"],"client":["70.3"],"random":["70.3"],"以及客户端支持的加密方法":["70.3"],"第二步":["70.3"],"只有私钥才能解密":["70.4"],"通过上面的握手过程可知":["70.4"],"在证书验证阶段":["70.4"],"使用非对称加密来传输共享秘钥":["70.4"],"之后的传输中都使用对称加密方式":["70.4"],"原因是":["70.4"],"非对称加密的加解密效率是非常低的":["70.4"],"而":["70.4","93.21"],"secret":["70.5"],"随机数":["70.5"],"后端利用":["70.5"],"应用广泛和跨平台":["71.1"],"明文传输":["71.2"],"不安全":["71.2"],"每次发起一个请求":["71.3"],"都要新建一次":["71.3"],"如果每次请求到的数据都是一样的":["71.4"],"就可以把这对请求响应的数据缓存在本地":["71.4"],"下次读取数据的时候":["71.4"],"就可以直接在本地读取数据":["71.4"],"不必再通过网络获取请求":["71.4"],"主要是通过缓存技术实现":["71.4"],"为了避免客户端获取到的数据不是最新的数据":["71.4"],"服务端在返回数据的时候":["71.4"],"会在响应头中放一个过期时间":["71.4"],"当客户端发起请求的时候":["71.4"],"首先会查看响应头的信息":["71.4"],"如果发现缓存的响应是过期的":["71.4"],"就会重新发起网络请求":["71.4"],"减少":["71.4"],"重定向请求":["71.4"],"当服务器上的资源从":["71.4"],"url1":["71.4"],"头部":["71.6"],"特别是对于携带":["71.6"],"cookie":["71.6"],"的头部":["71.6"],"不支持服务器推送消息":["71.6"],"当客户端需要获取通知的时候":["71.6"],"只能通过定时器不断的拉取信息":["71.6"],"针对以上问题":["71.6"],"做了以下优化":["71.6"],"头部压缩":["71.6"],"可以通过指定":["71.6"],"encoding":["71.6"],"字段来对":["71.6"],"body":["71.6"],"来进行压缩":["71.6"],"但是针对":["71.6"],"header":["71.6"],"部分":["71.6"],"没有优化手段":["71.6"],"中有很大固定的字段":["71.6"],"比如":["71.6"],"connection":["72.0"],"用于客户端要求服务器使用":["72.0"],"根据用户提供的登录信息":["73.0"],"认证系统进行身份校验":["73.0"],"如果通过校验":["73.0"],"应该返回给用户一个认证的凭据":["73.0"],"ticket":["73.0"],"用户再访问别的应用的时候就会将这个":["73.0"],"带上":["73.0"],"协议":["74.0","74.4"],"面向连接的":["74.1"],"传输层":["74.2"],"应用层的数据包传输给传输层":["74.2"],"传输层为应用层提供网络支持":["74.2"],"在传输层有两个传输协议":["74.2"],"udp":["74.2"],"传输控制协议":["74.2"],"使用比较多的传输协议":["74.2"],"syn":["74.3","74.5"],"包传给接收端主机":["74.3"],"工作在那一层":["74.4"],"客户端随机初始化序列号":["74.5"],"把":["74.5","105.0","150.9"],"标志置为":["74.5"],"表示当前报文为":["74.5"],"报文":["74.5"],"然后把第一个":["74.5"],"等待服务端的确认":["74.6"],"第二次挥手":["74.6"],"服务端收到":["74.6"],"会发送":["74.6"],"ack":["74.6"],"且把客户端的序列号值":["74.6"],"的方式":["74.7"],"每一次的会话都有一个编号":["74.7"],"当对话中断后":["74.7"],"下一次重新连接时":["74.7"],"提供可靠的服务":["74.8"],"也就是说":["74.8"],"连接传送的数据":["74.8"],"无差错":["74.8"],"不丢失":["74.8"],"提示信息":["75.0"],"报文已经收到并且被正常处理":["75.1"],"重新发送请求获取资源":["75.2"],"也就是重定向":["75.2"],"表示客户端发送的报文有误":["75.3"],"服务器无法处理":["75.3"],"客户端请求正确":["75.4"],"但是服务器内部发生了错误":["75.4"],"plain":["76.0"],"本质上还是浏览器发送请求":["77.0"],"服务器接受请求的一个过程":["77.0"],"通过让客户端不断的进行请求":["77.0"],"使得客户端能够模拟实时地收到服务器端的数据的变化":["77.0"],"优缺点":["77.0"],"优点是比较简单":["77.0"],"缺点是这种方式由于需要不断的建立":["77.0"],"提高访问速度":["78.0"],"浏览器缓存是一种操作简单":["78.0"],"效果显著的前端性能优化手段":["78.0"],"通过网络获取内容既速度缓慢又开销巨大":["78.0"],"命中强缓存情况下":["78.1"],"返回的":["78.1"],"状态码为":["78.1"],"disk":["78.1"],"实现强缓存":["78.1"],"过去一直用":["78.1"],"当服务器返回响应的时候":["78.1"],"response":["78.1"],"headers":["78.1","78.2"],"中将过期时间写入":["78.1"],"字段":["78.1"],"是一个时间戳":["78.2"],"如果我们启用了协商缓存":["78.2"],"会在首次请求时随着":["78.2"],"reponse":["78.2"],"返回":["78.2","125.0","128.0"],"随后每次请求时":["78.2"],"都会带上一个叫":["78.2"],"since":["78.2"],"的时间戳字段":["78.2"],"值是上一次返回的":["78.2"],"否则考虑该资源是否可以被服务器代理缓存":["78.3"],"根据其结果决定是设置为":["78.3"],"private":["78.3"],"还是":["78.3","93.6"],"public":["78.3"],"然后考虑资源的过期时间":["78.3"],"设置对应的":["78.3"],"max":["78.3"],"age":["78.3"],"s":["78.3","124.0"],"然后就结束了":["78.5"],"服务器没有记录任何关于客户端的任何信息":["78.5"],"下次请求的时候":["78.5"],"不知道客户端是谁":["78.5"],"存储在其中的数据是永远不会过期的":["78.6"],"页面被关闭的时候":["78.7"],"存储内容也会随之被释放":["78.7"],"一般来说是没有存储上限的":["78.8"],"所有服务器可以根据哪些服务器和用户距离最近":["78.9"],"来满足数据的请求":["78.9"],"缓存":["78.9"],"本都存储带来的性能提升":["78.9"],"就把所有的图片资源加载完毕":["79.0"],"那么很可能会造成白屏":["79.0"],"卡顿等现象":["79.0"],"因为图片太多了":["79.0"],"节流":["79.1"],"生成相应的":["80.0"],"dom":["80.0","80.1","92.12","93.2","93.11","93.23","96.3"],"这种特性使得客户端代码渲染的源代码很简洁":["80.0"],"当用户第一次请求页面时":["80.0"],"由服务器把需要的组件或页面渲染成":["80.0"],"文档经过词法分析输出":["80.1"],"树":["80.1"],"浏览器在构建":["80.2"],"树的过程中":["80.2"],"不会渲染任何已经处理的内容":["80.2"],"即便":["80.2"],"已经解析完毕了":["80.2"],"只要":["80.2"],"没有完毕":["80.2"],"渲染就不会结束":["80.2"],"只有当解析":["80.2"],"当我们对":["80.3"],"的修改引发了":["80.3"],"几何尺寸的变化":["80.3"],"连接和":["81.0"],"比如说":["81.2"],"babel":["81.2"],"webpack":["81.3","81.4","93.24","96.0","100.1"],"config":["81.3"],"打包业务代码":["81.3"],"配置文件":["81.3"],"const":["81.3","81.5","117.1","118.0","137.0","150.1"],"path":["81.3","150.1"],"require":["81.3","81.5"],"由单进程转换成多进程":["81.4"],"是单线程的":["81.4"],"bundleanalyzerplugin":["81.5"],"analyzer":["81.5"],"module":["81.5"],"exports":["81.5"],"plugins":["81.5"],"服务端压缩":["81.6"],"客户端解压":["81.6"],"一般情况下":["81.6"],"如果处理的是具备一定规模的项目":["81.6"],"jpeg":["81.7"],"jpg":["81.7","81.12"],"png":["81.7","81.12"],"webp":["81.7"],"不支持透明":["81.8"],"最大的特点就是有损压缩":["81.8"],"这种压缩算法很高效":["81.8"],"所有":["81.8"],"代表的是二进制的位数":["81.9"],"最多支持":["81.9"],"是一种基于":["81.10"],"xml":["81.10"],"语法的图像格式":["81.10"],"的背景定位来显示其中每一部分的技术":["81.11"],"的出现":["81.11"],"也是为了减少加载网页图片时对服务器的请求次数":["81.11"],"从而提升网站性能":["81.11"],"是一种用于传输":["81.11"],"一样的优点":["81.12"],"可以显示动态图片":["81.12"],"缺点":["81.12"],"对除":["81.12"],"表单递交或输入域名或页面请求的查询字符串":["83.0"],"最终达到欺骗服务器执行恶意的":["83.0"],"命令":["83.0"],"攻击指的是攻击者往":["84.0"],"页面里插入恶意":["84.0"],"对称加密":["85.1"],"好处是加解密效率快":["85.2"],"但是不安全":["85.2"],"如果有人拿到了这个密钥谁都可以进行解密":["85.2"],"baidu":["85.3"],"com":["85.3"],"服务端存储着公钥和私钥":["85.3"],"客户端创建随机数":["85.4"],"使用中间人证书中的公钥进行加密发送给中间人服务器":["85.4"],"中间人使用私钥对随机数解密并构造对称加密":["85.4"],"慎用免费的":["85.5"],"存储上传的文件在非":["86.0"],"通过要求用户输入验证码":["87.0"],"true":["88.0"],"是怎么实现的":["88.0"],"本质是一个具备缓存的":["88.1"],"watcher":["88.1","88.3","92.9"],"依赖的属性发生变化就会更新视图":["88.1"],"适用于计算比较消耗性能的计算场景":["88.1"],"当表达式过于复杂时":["88.1"],"defineproperty":["88.2","92.4"],"把这些属性全部转为":["88.2"],"getter":["88.2"],"setter":["88.2"],"创建了一个":["88.3"],"当被监听的属性更新时":["88.3"],"调用传入的回调函数":["88.3"],"query":["89.0"],"方法传入的参数使用":["89.0"],"当前":["89.1"],"router":["89.2","89.3"],"目录下的":["89.2"],"link":["89.3"],"的值为":["89.4"],"search":["89.4"],"interview":["89.4"],"poetries":["89.4"],"路由模式的实现主要是基于下面几个特性":["89.4"],"值只是客户端的一种状态":["89.4"],"也就是说当向服务器端发出请求时":["89.4"],"部分不会被发送":["89.4"],"值的改变":["89.4"],"都会在浏览器的访问历史中增加一个记录":["89.4"],"中两个重要组件":["89.5"],"的时候新加入两个":["89.6"],"api":["89.6","90.8","91.2","91.5"],"pushstate":["89.6"],"中保护路由的方法叫做路由守卫":["89.8"],"主要用来通过跳转或取消的方式守卫导航":["89.8"],"路由守卫有三个级别":["89.8"],"全局":["89.8"],"路由独享":["89.8"],"利用路由懒加载我们能把不同路由对应的组件分割成不同的代码块":["89.9"],"然后当路由被访问的时候才加载对应组件":["89.9"],"这样会更加高效":["89.9"],"是一种优化手段":["89.9"],"页面跳转内容改变同时不刷新":["89.10"],"同时路由还需要以插件形式存在":["89.10"],"首先我会定义一个":["89.10"],"createrouter":["89.10"],"存在的问题":["90.0"],"不能监听数组的变化":["90.0"],"reactive":["90.1"],"需要手动指定要监视的数据和回调函数":["90.2"],"具有更高的灵活性和定制性":["90.2"],"有什么不同":["90.3"],"在逻辑组织和逻辑复用方面":["90.3"],"是优于":["90.3"],"有什么优势":["90.4"],"性能更好":["90.4","90.8"],"生命周期有什么区别":["90.5"],"options":["90.5"],"的":["90.6","91.4","93.24","128.0"],"setup":["90.6","90.9"],"相当于":["90.6"],"created":["90.6","94.2","94.3"],"beforecreate":["90.6"],"的合集":["90.6"],"sfc":["90.7"],"语法糖":["90.7"],"teleport":["90.7"],"传送门":["90.7"],"fragments":["90.7"],"片段":["90.7"],"emits":["90.7"],"基于":["90.8"],"proxy":["90.8"],"如在":["90.9"],"computed":["90.9","92.7","94.0"],"合成函数":["90.9"],"都有可能返回值类型":["90.9"],"vue":["90.9","91.4","92.9","92.12","92.13","93.9","93.16","93.22","94.1"],"如不定义":["90.9"],"和其他":["90.10"],"中获取的数据能直接更改吗":["91.0"],"mutation":["91.1"],"非常类似于事件":["91.1"],"每个":["91.1"],"都有一个字符串的类型":["91.1"],"和一个":["91.1"],"回调函数":["91.1"],"handler":["91.1"],"action":["91.1"],"方法监听状态":["91.2"],"可以使用":["91.2"],"提供的":["91.2"],"store":["91.2","91.5"],"subscribe":["91.2"],"如果要持久化就要存起来":["91.3"],"localstorage":["91.3"],"就很合适":["91.3"],"提交":["91.3"],"我们来看看官网如何解释":["91.4"],"是":["91.4","93.9"],"的存储库":["91.4"],"它允许您跨组件":["91.4"],"页面共享状态":["91.4"],"实际上":["91.4"],"就是":["91.4"],"可见要实现一个":["91.5"],"要实现一个":["91.5"],"存储全局状态":["91.5"],"要提供修改状态所需":["91.5"],"commit":["91.5"],"订阅者模式的方式":["92.0"],"vnode":["92.1"],"compile":["92.1"],"编译器把":["92.1"],"编译成":["92.1"],"用对象的属性来描述节点":["92.3"],"最终可以通过一系列操作使这棵树映射到真实环境上":["92.3"],"创建虚拟":["92.3"],"是为了更好将虚拟的节点渲染到页面视图中":["92.3"],"所以虚拟":["92.3"],"对象的节点与真实":["92.3"],"中并没有使用":["92.4"],"每个属性都有自己的":["92.5"],"dep":["92.5","92.9"],"更准确":["92.6"],"更快的拿到":["92.6"],"oldvnode":["92.6"],"中对应的节点":["92.6"],"更新组件时判断两个节点是否相同":["92.6"],"相同就复用":["92.6"],"不相同就删除旧的创建新的":["92.6"],"react":["92.6"],"root":["92.7"],"初始化响应式数据":["92.7"],"data":["92.7","92.9","94.0","108.0"],"props":["92.7"],"watch":["92.7","94.0"],"method":["92.7"],"算法是平级比较":["92.8"],"不考虑跨级比较的情况":["92.8"],"内部采用":["92.8"],"深度递归的方式":["92.8"],"双指针":["92.8"],"头尾都加指针":["92.8"],"的方式进行比较":["92.8"],"简单来说":["92.8"],"算法有以下过程":["92.8"],"同级比较":["92.8"],"再比较子节点":["92.8"],"key":["92.8","106.0"],"tag":["92.8"],"标签名判断":["92.8"],"存放他所依赖的":["92.9"],"依赖收集":["92.9"],"当属性变化后会通知自己对应的":["92.9"],"去更新":["92.9"],"派发更新":["92.9"],"进行初始化的时候":["92.9"],"首先会对用户传入的":["92.9"],"数据进行初始化":["92.9"],"observer":["92.9"],"app":["92.10"],"mount":["92.10"],"过程":["92.10"],"如果不采用异步更新":["92.11"],"那么每次更新数据都会对当前组件进行重新渲染":["92.11"],"所以为了性能":["92.11"],"更新循环结束之后执行延迟回调":["92.12"],"用于获得更新后的":["92.12"],"有个异步更新策略":["92.12"],"意思是如果数据变化":["92.12"],"不会立刻更新":["92.12"],"项目中主要使用":["92.13"],"两个树的完全":["92.14"],"是一套用于构建用户界面的渐进式框架":["93.0"],"必须是函数":["93.1"],"根实例对象":["93.1"],"可以是对象也可以是函数":["93.1"],"元素依旧还在":["93.2"],"if显示隐藏是将dom元素整个添加或删除":["93.2"],"编译过程":["93.2"],"切换有一个局部编译":["93.2"],"缺陷的过程":["93.2"],"切换过程中合适地销毁和重建内部的事件监听和子组件":["93.2"],"不建议一起使用":["93.3"],"vue2":["93.3"],"ref":["93.4"],"初始化之前":["93.5"],"由于":["93.5"],"vuex":["93.6"],"单页面应用":["93.7"],"只在":["93.7"],"页面初始化的时候加载相应的":["93.7"],"到首屏内容渲染完成的时间":["93.8"],"整个网页不一定要全部渲染完成":["93.8"],"但是需要展示当前视窗需要的内容":["93.8"],"内置的一个组件":["93.9"],"可以实现组件缓存":["93.9"],"当组件切换时不会对当前组件进行卸载":["93.9"],"一般结合路由和动态组件一起使用":["93.9"],"有了解过吗":["93.10"],"为什么还需要虚拟":["93.11"],"我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码":["93.12"],"这些代码的功能相对独立":["93.12"],"可以通过":["93.12"],"mvc":["93.13"],"中的":["93.13","134.2"],"controller":["93.13"],"演变成":["93.13"],"层代表数据模型":["93.13"],"也就是前端声明的静态数据或者是通过网络请求获取的数据":["93.13"],"代表":["93.13"],"但":["93.14"],"vue3":["93.14","93.25"],"中组件已经可以多根节点了":["93.14"],"之所以需要这样是因为":["93.14"],"函数的第二个参数":["93.15"],"context":["93.15"],"来代替":["93.15"],"没有生命周期钩子函数":["93.15"],"不能使用计算属性":["93.15"],"引用指向的就是":["93.16"],"元素":["93.16","93.23"],"如果用在子组件上":["93.16"],"引用就指向组件实例":["93.16"],"访问访问父组件的属性或方法":["93.16"],"访问子组件的属性或方法":["93.16"],"eventbus":["93.16"],"on":["93.16"],"父子":["93.16"],"隔代":["93.16"],"兄弟组件通信":["93.16"],"这种方法通过一个空的":["93.16"],"实例作为中央事件总线":["93.16"],"事件中心":["93.16"],"用它来触发事件和监听事件":["93.16"],"mixins":["93.17"],"slots":["93.17"],"extends":["93.17"],"的更新会向下流动到子组件中":["93.18"],"但是反过来则不行":["93.18"],"这样会防止从子组件意外变更父级组件的状态":["93.18"],"从而导致你的应用的数据流向难以理解":["93.18"],"另外":["93.18"],"每次父级组件发生变更时":["93.18"],"例如输入框":["93.19"],"可以替换为日历":["93.19"],"时间":["93.19"],"范围等组件作具体的实现":["93.19"],"调试方便":["93.19"],"由于整个系统是通过组件组合起来的":["93.19"],"在出现问题的时候":["93.19"],"可以用排除法直接移除组件":["93.19"],"或者根据报错的组件快速定位问题":["93.19"],"之所以能够快速定位":["93.19"],"是因为每个组件之间低耦合":["93.19"],"职责单一":["93.19"],"所以逻辑会比分析整个系统要简单":["93.19"],"提高可维护性":["93.19"],"由于每个组件的职责单一":["93.19"],"修饰符可以实现父子组件之间的双向绑定":["93.20"],"并且可以实现子组件同步修改父组件的值":["93.20"],"相比较与":["93.20"],"的工作放在服务端完成":["93.21"],"然后再把":["93.21"],"直接返回给客户端":["93.21"],"有着更好的":["93.21"],"seo":["93.21"],"并且首屏加载速度更快":["93.21"],"因为":["93.21","98.1"],"spa":["93.21"],"页面的内容是通过":["93.21"],"ajax":["93.21"],"获取":["93.21","93.23"],"而搜索引擎爬取工具并不会等待":["93.21"],"异步完成后再抓取页面内容":["93.21"],"所以在":["93.21"],"中是抓取不到页面通过":["93.21"],"获取到的内容":["93.21"],"是直接由服务端返回已经渲染好的页面":["93.21"],"数据已经包含在页面中":["93.21"],"所以搜索引擎爬取工具可以抓取渲染好的页面":["93.21"],"single":["93.24"],"file":["93.24"],"component":["93.24"],"因为有了":["93.24"],"引入必要插件":["93.25"],"代码规范":["93.25"],"提交规范":["93.25"],"常用库和组件":["93.25"],"目前":["93.25"],"项目我会用":["93.25"],"vite":["93.25"],"create":["93.25"],"创建项目":["93.25"],"更新前":["94.0"],"updated":["94.0"],"更新完成":["94.0"],"beforedestory":["94.0"],"销毁前":["94.0"],"destoryed":["94.0"],"销毁完成":["94.0"],"之后触发的第一个钩子":["94.0"],"在当前阶段中":["94.0"],"methods":["94.0"],"实例销毁之前被调用":["94.1"],"可以执行一些清理和释放资源的工作":["94.1"],"beforemount":["94.2"],"子":["94.2"],"以便能够运行在各版本的浏览器或其他环境中":["95.0"],"基本原理":["95.0"],"首先将源码转成抽象语法树":["95.0"],"然后对语法树进行处理生成新的语法树":["95.0"],"最后将新语法树生成新的":["95.0"],"只能处理":["96.0"],"通过style标签插入到页面中":["96.1"],"source为要处理的css源文件":["96.1"],"相同优先级的":["96.2"],"操作去加载":["96.3"],"加载":["96.3"],"sass":["96.3"],"功能":["97.0"],"通过内部的事件流机制保证了插件的有序性":["97.1"],"在控制台输出":["97.2"],"打包已完成":["97.2"],"class":["97.2"],"myplugin":["97.2"],"从入口文件开始解析":["98.0"],"默认只能识别":["98.1"],"代码":["98.1"],"所以如":["98.1"],"只要项目文件有修改":["99.0"],"整个项目构建的":["99.0"],"代码发生变动后":["100.0"],"通知浏览器请求更新的模块":["100.1"],"替换原有的模块":["100.1"],"dev":["100.1"],"server":["100.1"],"promise":["101.0"],"resolve":["101.0","108.0","108.1"],"reject":["101.0","108.1"],"res":["102.0"],"delete":["102.0"],"allpy":["102.0"],"myapply":["102.0"],"首先需要判断参数是否为空":["103.0"],"length":["103.0","108.1","115.0","116.0","117.1","117.2"],"next":["105.0"],"push":["105.0"],"放到调用栈清空之后执行":["105.0"],"取值的时候":["106.0"],"如果缓存中存在该键值对":["106.0"],"先删除再重新插入":["106.0"],"表示最近访问":["106.0"],"get":["106.0"],"判断构造函数是否有返回值":["107.0"],"如果有返回值且返回值是一个对象或方法":["107.0"],"就返回这个值":["107.0"],"state":["108.0"],"pending":["108.0"],"let":["108.0","108.1","117.2","118.0"],"value":["108.0"],"state状态只能改变一次":["108.0"],"resolve和reject只会触发一种":["108.0"],"delay":["108.2"],"延迟的时间":["108.2"],"times":["108.2"],"interval":["109.0"],"首先执行回调函数":["109.0"],"timer":["109.0"],"sleep":["110.0"],"fn":["111.0"],"通过这个字段来确定子父级":["112.0"],"转成":["112.0"],"如果不存在":["113.0"],"初始化为一个数组":["113.0"],"else":["113.0"],"如果已经存在":["113.0"],"把上诉虚拟dom转化成下方真实dom":["114.0"],"交换":["117.0"],"j":["117.0","131.0"],"若相邻元素前面的数比后面的大":["117.0"],"交换两者":["117.0"],"缓存数组长度":["117.1"],"len":["117.1"],"定义":["117.1"],"minindex":["117.1"],"缓存当前区间最小值的索引":["117.1"],"注意是索引":["117.1"],"temp":["117.2"],"用来保存当前需要插入的元素":["117.2"],"i用于标识每次被插入的元素的索引":["117.2"],"num":["117.3"],"调用quicksort函数进行快速排序":["117.3"],"传递数组nums":["117.3"],"左边界0和右边界nums":["117.3"],"1作为参数":["117.3"],"quicksort":["117.3"],"定义名为quicksort的快速排序函数":["117.3"],"处理边界情况":["117.4"],"计算分割点":["117.4"],"mid":["117.4"],"math":["117.4"],"floor":["117.4"],"递归分割左子数组":["117.4"],"然后合并为有序数组":["117.4"],"uniarr":["118.0"],"item":["118.0"],"of":["118.0","135.0","141.0","146.0"],"pipe":["121.0"],"functions":["121.0"],"滚动事件":["122.0"],"窗口大小调整等需要频繁触发的操":["122.0"],"核心思想是通过设置一个时间间隔":["122.0"],"只有在这个时间间隔内首次触发函数后":["122.0"],"才允许再次触发":["122.0"],"而在这个时间间隔内":["122.0"],"数再次被触发":["122.0"],"则会被":["122.0"],"核心思想就是当函数被触发后":["122.1"],"设置一个定时器":["122.1"],"在一定时间内如果函数再次被触发":["122.1"],"就取消之前的定时器":["122.1"],"重新设置时器":["122.1"],"只有当一定时间内没有再次触发函数时":["122.1"],"定时器才会触发函数":["122.1"],"这里主要记录学习算法时的解题思路":["123.0"],"string":["124.0"],"description":["124.0","126.0","129.0","135.0","136.0","138.0","140.0","141.0","142.0","144.0","145.0","146.0"],"编写一个函数":["124.0"],"其作用是将输入的字符串反转过来":["124.0"],"输入字符串以字符数组":["124.0"],"中使用至少一个空格将字符串中的":["125.0"],"分隔开":["125.0"],"顺序颠倒且":["125.0"],"之间用单个空格连接的结果字符串":["125.0"],"注意":["125.0","133.0"],"输入字符串":["125.0"],"中可能会存在前导空格":["125.0"],"尾随空格或者单词间的多个空格":["125.0"],"返回的结果字符串中":["125.0"],"单词间应当仅用单个空格分隔":["125.0"],"且不包含任何额外的空格":["125.0"],"解题思路":["125.0","133.0","137.0","139.0","141.0"],"huan":["126.0"],"kong":["126.0"],"ge":["126.0"],"lcof":["126.0"],"假定一段路径记作字符串":["126.0"],"且":["127.0"],"同时还满足":["127.0"],"请":["127.0"],"你返回所有和为":["127.0"],"给定两个数组":["128.0"],"nums1":["128.0"],"nums2":["128.0"],"它们的交集":["128.0"],"输出结果中的每个元素一定是":["128.0"],"唯一":["128.0"],"我们可以":["128.0"],"给定一个整数数组":["129.0"],"nums":["129.0","134.2","136.0"],"和一个整数目标值":["129.0"],"target":["129.0","134.2","138.0"],"请你在该数组中找出":["129.0"],"和为目标值":["129.0"],"则认为两个四元组重复":["130.0"],"互不相同":["130.0"],"你可以按":["130.0"],"nums4":["131.0"],"数组长度都是":["131.0"],"n":["131.0","134.2","138.0"],"请你计算有多少个元组":["131.0"],"k":["131.0"],"l":["131.0"],"能满足":["131.0"],"对于一个正整数":["132.0"],"每一次将该数替换为它每个位置上的数字的平方和":["132.0"],"然后重复这个过程直到这个数变为":["132.0"],"也可能是":["132.0"],"无限循环":["132.0"],"但始终变不到":["132.0"],"如果这个过程":["132.0"],"结果为":["132.0"],"那么这个数就是快乐数":["132.0"],"如果":["132.0"],"的字母异位词":["133.0"],"若":["133.0"],"中每个字符出现的次数都相同":["133.0"],"则称":["133.0"],"互为字母异位词":["133.0"],"先将两个字符串转换为使用":["133.0"],"用于在有序数组查找特定的元素":["134.0"],"比较中间元素和目标元素的大小":["134.1"],"如果中间元素等于目标元素":["134.1"],"查找成功":["134.1"],"给定一个":["134.2"],"个元素有序的":["134.2"],"升序":["134.2"],"整型数组":["134.2"],"和一个目标值":["134.2"],"写一个函数搜索":["134.2"],"sorted":["135.0"],"给你一个按":["135.0"],"element":["136.0"],"给你一个数组":["136.0"],"和一个值":["136.0"],"val":["136.0","144.0"],"你需要":["136.0"],"原地":["136.0"],"到":["137.0"],"n2":["137.0"],"所有元素":["137.0"],"且元素按顺时针顺序螺旋排列的":["137.0"],"x":["137.0"],"正方形矩阵":["137.0"],"模拟题":["137.0"],"给定一个含有":["138.0"],"个正整数的数组和一个正整数":["138.0"],"找出该数组中满足其总和大于等于":["138.0"],"的长度最小的":["138.0"],"连续子数组":["138.0"],"in":["140.0"],"pairs":["140.0"],"给你一个链表":["140.0","141.0"],"两两交换其中相邻的节点":["140.0"],"并返回交换后链表的头节点":["140.0"],"你必须在不修改节点内部的值的情况下完成本题":["140.0"],"end":["141.0"],"list":["141.0","144.0","145.0"],"并且返回链表的头结点":["141.0"],"cycle":["142.0"],"ii":["142.0"],"给定一个链表的头节点":["142.0"],"返回链表开始入环的第一个节点":["142.0"],"如果链表无环":["142.0"],"elements":["144.0"],"给你一个链表的头节点":["144.0"],"和一个整数":["144.0"],"请你删除链表中所有满足":["144.0"],"reverse":["145.0"],"linked":["145.0","146.0"],"给你单链表的头节点":["145.0"],"two":["146.0"],"lists":["146.0"],"lcci":["146.0"],"给你两个单链表的头节点":["146.0"],"这里主要记录项目中的关键技术":["147.0"],"这里主要记录面试遇到的真题":["149.0"],"环境":["150.0"],"yarn":["150.0"],"webpack是node写出来的":["150.1"],"并自动引入":["150.3"],"样式文件从":["150.4"],"assets":["150.5"],"压缩":["150.6"],"自动添加前缀":["150.11"],"处理图片":["150.13"]},{"0":["42.0","65.10","105.0","117.1","117.4","125.0","137.0","138.0"],"1":["58.0","92.8","95.0","117.2","124.0","125.0","134.2","136.0","138.0"],"2":["20.0","25.0","33.0","36.0","39.0","58.0","64.2","65.15","89.5","90.7","91.1","91.2","91.5","93.17","93.19","98.0"],"3":["34.0","40.0","41.1","65.9","89.9"],"4":["57.0","67.0","93.15","130.0"],"5":["57.0"],"8":["81.11"],"10":["59.0"],"16":["37.0"],"24":["81.8"],"36":["65.16"],"50":["6.5","6.10","71.6","122.1"],"70":["81.6"],"90":["71.6"],"301":["14.0","75.2"],"302":["71.4"],"400":["75.3"],"500":["75.4"],"1000":["61.6"],"1600":["81.9"],"电脑":["5.0"],"笔记本":["5.0"],"手机":["5.0"],"平板等智能设备在不断增加":["5.0"],"writing":["5.1"],"mode":["5.1","150.1"],"排版竖文":["5.1"],"调整文本排版方向":["5.1"],"适用于竖行文字":["5.1"],"文言文":["5.1"],"诗词":["5.1"],"text":["5.1","38.0"],"align":["5.1"],"last":["5.1","78.3"],"对齐两端文本":["5.1"],"设置文本两端对齐":["5.1"],"center":["6.2","6.11","34.0"],"优点":["6.2"],"兼容性比较好":["6.2"],"兼容性好":["6.3"],"缺点":["6.3","41.1","66.0","93.21"],"son":["6.4","6.10"],"display":["6.4","6.14"],"inline":["6.4","6.9"],"absolute":["6.5","6.10","6.15","6.16","39.0"],"子绝":["6.5","6.10"],"left":["6.5","39.0","117.3"],"父元素宽度一半":["6.5"],"这里等同于left":["6.5"],"100px":["6.5","6.26","31.0"],"flex":["6.6"],"justify":["6.6","24.1"],"height":["6.8","6.9","6.26","31.0"],"150px":["6.8","6.9"],"block转换成图片的方式解决":["6.9"],"父元素高度一半":["6.10"],"这里等同于":["6.10"],"75px":["6.10"],"translatey":["6.10"],"自身高度一半":["6.10"],"或":["6.11","6.17","80.2","81.11"],"line":["6.13"],"行高的值与height相等":["6.13"],"200px":["6.14","6.26"],"table":["6.14"],"top":["6.15","39.0","42.1"],"margin":["6.16","39.0","40.0","43.0"],"right":["6.19","6.20","6.22","6.23","6.24","6.27","117.3"],"右列自适应":["6.19","6.20","6.21","6.22","6.23","6.24","6.27"],"css":["6.21","90.7","93.7","150.9"],"position":["6.21","17.1"],"left和":["6.26"],"center间隔":["6.26"],"500px":["6.26"],"background":["6.26"],"color":["6.26"],"f00":["6.26"],"safair":["9.0"],"浏览器会等待":["9.0"],"用来判断是否再次点击了屏幕":["9.0"],"怎么解决":["9.0"],"渲染绘制":["10.0"],"将像素渲染到屏幕上":["10.0","80.1"],"解析和":["10.0"],"解析是两个并行的进程":["10.0"],"所以这也解释了为什么":["10.0"],"的解析":["10.0"],"然而":["10.0"],"由于":["10.0"],"是依赖于":["10.0"],"解压":["11.0"],"html":["12.0","51.0","80.0","81.11"],"图像等内容":["12.0"],"负责处理网页的布局":["12.0"],"计算":["12.0"],"cn":["13.0"],"post":["13.0"],"www":["13.1"],"baidu":["13.1"],"com":["13.1"],"new":["13.3","81.5","103.0","140.0","141.0","150.4"],"promise":["13.3"],"resolve":["13.3"],"reject":["13.3","108.0"],"let":["13.3","96.1","109.0","117.1","125.0","127.0","130.0","134.2","137.0","140.0","141.0"],"document":["13.3"],"createelement":["13.3"],"window":["13.3","59.0"],"在发送请求的时候会出现简单请求和复杂请求":["13.4"],"简单请求":["13.4"],"满足以下条件的就是简单请求":["13.4"],"get":["13.4","90.8","101.0","120.0"],"head":["13.4","141.0"],"接受客户端请求":["13.5"],"解析获取的吗":["14.0"],"这里有个疑问":["14.0"],"利用":["14.0"],"地址和服务器建立":["14.0"],"tcp":["14.0"],"连接":["14.0","77.0"],"构建请求头信息":["14.0"],"发送请求头信息":["14.0"],"服务器响应后":["14.0"],"网络进程接收响应头和响应信息":["14.0"],"并解析响应内容":["14.0"],"网络进程解析响应流程":["14.0"],"检查状态码":["14.0"],"如果是":["14.0"],"操作系统会为该程序创建一块内存":["15.1"],"用来存放代码":["15.1"],"运行中的数据和一个执行任务的主线程":["15.1"],"渲染进程":["15.2"],"将":["15.2"],"是一个独立的渲染区域":["17.0"],"none":["17.1"],"绝对定位元素":["17.1"],"创建一个":["17.2"],"bfc":["17.2","31.0"],"可以解决这个问题":["17.2"],"默认会给自动填充的":["18.1"],"input":["18.1","92.13"],"标签上直接关闭了表单的自动填充":["18.2"],"autocomplete":["18.2"],"当用于列上的时候":["19.0"],"该列会被隐藏":["19.0"],"但任会占据空间":["19.0"],"不会导致相邻元素合并":["19.0"],"当一个元素的":["19.0"],"新增盒子模型":["20.0"],"使用字体图标和":["21.0"],"svg":["21.0","81.7"],"不会独占一行":["22.0"],"不能改变":["22.0"],"在不设置自己的宽度的情况下":["22.1"],"块级元素会默认填满父级元素的宽度":["22.1"],"可以设置":["22.2"],"为":["23.0","40.0"],"n":["23.0"],"的项目":["23.0"],"占据的空间":["23.0"],"放大的比例":["23.0"],"是":["23.0","132.0"],"称为":["24.0"],"在第一行上方":["24.1"],"flow":["24.1"],"和":["24.1","55.1","61.3","65.8","70.0","81.10","88.3","92.7","92.10","93.4","93.7","93.9","93.16","93.21","93.25","96.3","99.0","146.0","150.3"],"的缩写":["24.1"],"content":["24.1","72.0"],"弹性元素会根据这个来决定":["24.2"],"项目的放大比例":["24.2"],"即使存在剩余空间":["24.2"],"rss":["25.0"],"rel":["25.0"],"连接属性等":["25.0"],"加载页面时":["25.0"],"标签引入的":["25.0"],"发生重叠":["26.0"],"它们发生重叠是因为它们是相邻的":["26.0"],"所以我们可以通过这":["26.0"],"一点来解决这个问题":["26.0"],"我们可以为父元素设置":["26.0"],"border":["26.0","42.1","43.0"],"padding":["26.0"],"static":["27.0"],"定位以外的第一个父元素进行定位":["27.0"],"的值":["27.4"],"em":["28.0"],"单位是根据自身元素的":["28.0"],"使用":["29.0","61.6","90.4","124.0"],"xml":["29.0"],"文档来描述图形":["29.0"],"可以通过":["29.0","89.4"],"javascript":["29.0","80.1","84.0","89.4","93.7"],"不能定义中间的状态":["30.0"],"不能重复执行动画":["30.0"],"overflow":["31.0"],"hidden":["31.0","33.0"],"右边触发了":["31.0"],"的区域不会和浮动元素发生重叠":["31.0"],"所以两侧不会发生重叠":["31.0"],"red":["31.0"],"300px":["31.0"],"比如说":["32.0"],"当用户悬停在指定的元素时":["32.0"],"visibility":["33.0"],"不会使元素从渲染树中消失":["33.0"],"不会改变页面布局":["33.0"],"不会触发该元素已经绑定的事件":["33.0"],"继承属性":["33.0"],"布局":["34.0"],"item":["34.0"],"预连接":["35.0"],"通过将样式表放在文档头部":["36.0"],"确保浏览器在渲染页面内容之前先加载和解析样式表":["36.0"],"从而避免了页面一开始的无样式状态":["36.0"],"使用内联样式":["36.0"],"所以理论上最小时间是":["37.0"],"7ms":["37.0"],"nowrap":["38.0"],"ellipsis":["38.0"],"translate":["39.0"],"子盒子必须定宽高":["39.0"],"father":["39.0"],"auto":["40.0"],"变成了浮动元素":["41.0"],"代码少":["41.1"],"浏览器兼容性好":["41.1"],"需要添加大量无语义的代码":["41.1"],"代码不够优雅":["41.1"],"50px":["42.1"],"solid":["42.1"],"边框区域":["43.0"],"外边距区域":["43.0"],"标准盒模型":["43.0"],"计算宽高时":["43.0"],"中的换行符和空格字符引起的":["44.0"],"ul":["44.1"],"设置为":["44.1"],"容器":["44.1"],"标签选择器":["45.0"],"属性选择器":["45.0"],"important":["45.1"],"内联样式":["45.1"],"attachevent":["46.0"],"只有冒泡":["46.0"],"没有捕获":["46.0"],"前者事件名不带":["46.0"],"读取到就会开始和执行":["47.0"],"会阻塞后续文档的加载":["47.0"],"都是去异步加载外部的":["47.0"],"在":["48.0","92.6"],"等语义化标签":["49.0"],"为了方便在客户端存储和获取数据":["49.0"],"提供了":["49.0"],"localstorage":["49.0"],"sessionstorage":["49.0"],"防止嵌套的内容对主页面的影响":["50.0"],"并行加载":["50.0"],"标签相关的表单控件上":["51.0"],"prefetch":["52.0"],"预取":["52.0"],"是一个资源提示属性":["52.0"],"用于告诉浏览器在页面加载完成后":["52.0"],"等标签":["53.0"],"用于加载外部资源":["53.0"],"当浏览器解析到带有":["53.0"],"属性的标签时":["53.0"],"会立即请求指定地址的资源":["53.0"],"暂停其它资源的下载和处理":["53.0"],"直到将该资源加载":["53.0"],"server":["54.1"],"url":["54.1","69.0","96.3"],"监听消息事件":["54.1"],"addeventlistener":["54.1","60.1"],"btn":["54.2"],"提交":["54.2"],"gt":["54.2"],"script":["54.2","58.0"],"信息":["54.3"],"b":["55.1","127.0"],"strong":["55.1"],"标签":["55.1","89.4","89.5"],"它们在样式上都是文字的加粗":["55.1"],"但是":["55.1","81.4","129.0"],"main":["55.2"],"主要内容区域":["55.2"],"article":["55.2"],"实现更灵活的字符串拼接和格式化":["57.0"],"解构赋值":["57.0"],"通过解构赋值语法":["57.0"],"可以从数组或对象中提取值":["57.0"],"并赋给对应的变量":["57.0"],"简化了变量赋值的操作":["57.0"],"默认参数":["57.0"],"函数可以定义默认参数值":["57.0"],"宏任务":["58.0"],"微任务":["58.0"],"全部代码":["58.0"],"同步代码也属于宏任务":["58.0"],"settimeout":["58.0","108.0"],"setinterval":["58.0"],"setimmediate":["58.0"],"等":["58.0","71.6","81.7","93.17"],"promsie":["58.0"],"mutationobserver":["58.0"],"执行过程":["58.0"],"代码执行过程中":["58.0"],"宏任务和微任务放在不同的任务队列中":["58.0"],"var定义的a变量挂载到window对象上":["59.0"],"function":["59.0","65.8","107.0","112.0","122.1","125.0","127.0","128.0","130.0","132.0","133.0","141.0"],"console":["59.0"],"log":["59.0"],"this1":["59.0"],"报错":["59.0"],"uncaught":["59.0"],"typeerror":["59.0"],"cannot":["59.0"],"read":["59.0"],"properties":["59.0"],"of":["59.0"],"reading":["59.0"],"ie8":["60.0"],"以下中":["60.0"],"ie":["60.0"],"和事件捕获相反":["60.1"],"顺序是由内到外传播":["60.1"],"直到根节点":["60.1"],"在支持":["60.1"],"的浏览器中":["60.1"],"可以调用事件对象的":["60.1"],"stoppropagation":["60.1"],"方法以阻止事件的继续传播":["60.1"],"不同作用域下同名变量不会冲突":["61.0"],"定义":["61.2"],"for":["61.3","117.1","134.2","137.0"],"可以跨块访问":["61.4"],"会变量提升":["61.4"],"如果没有找到":["61.5"],"输出是什么":["61.6"],"为什么":["61.6"],"输出是":["61.6"],"在循环中":["61.6"],"声明了一个全局变量":["61.6"],"创建了":["61.6"],"个定时器任务":["61.6"],"每个任务都在":["61.6"],"那么就会去它的proto属性所指向的原型对象上查找":["62.1"],"是对象独有的":["62.3"],"是函数对象独有的":["62.3"],"作用是给特定类型的所有实例提供共享的属性和方法":["62.3"],"但是在":["62.3"],"会导致应用程序速度变慢":["63.0"],"脱离":["63.1"],"dom":["63.1","81.3"],"这个对象被标记为可到达对象":["63.2"],"清除阶段":["63.2"],"局限性是当出现循环引用时":["63.3"],"weakmap":["63.4"],"代码被解析和执行所在环境的抽象概念":["64.0"],"函数执行上下文":["64.1"],"存在无数个":["64.1"],"每当一个函数":["64.1"],"同步执行":["64.2"],"js":["64.3","65.2","65.15","89.2","96.0","107.0","122.0","122.1","127.0","128.0","130.0","131.0","132.0","133.0","134.2","140.0","145.0","150.3","150.4"],"引擎第一次遇到":["64.3"],"在这个阶段生成变量对象":["64.4"],"建立作用域链":["64.4"],"在全局执行上下文中":["64.5"],"变量对象就是全局对象":["64.5"],"是一种弱类型":["65.0"],"可以发生隐式类型转换":["65.0"],"symbol":["65.1"],"es6":["65.1"],"新增":["65.1"],"现在有两个":["65.2"],"字符串":["65.3","80.0"],"传入相同的字符串":["65.3"],"一定会返回相同的":["65.3"],"number":["65.4"],"数据类型支持的范围更大的整数值":["65.4"],"明确定义的变量在将来是用于保存对象的":["65.5"],"就应该将这个变量初始化为":["65.5"],"有助于区分":["65.5"],"从逻辑上来看":["65.6"],"值表示一个空对象指针":["65.6"],"可以快速分配和释放":["65.7"],"而基本数据类型的值是不可变的":["65.7"],"两种类型":["65.8"],"直接在计算机底层基于数据类型的二进制值进行检测":["65.8"],"属性返回对象的构造函数":["65.9"],"并判断该构造函数是否为数组构造函数":["65.9"],"length":["65.10","125.0","130.0","133.0"],"的时候":["65.11","80.2"],"实际上计算的是这两个数字在计算机里所存储的二进制":["65.11"],"会尝试将这个参数转换成数值":["65.12"],"任何不能被转换成数值的值都会返回":["65.12"],"true":["65.12","132.0"],"如果两边的类型不一致":["65.13"],"不会做强制类型转换":["65.13"],"转换成数字":["65.14"],"成立":["65.15"],"即要解析的字符串":["65.16"],"第二个参数":["65.16"],"radix":["65.16"],"基数":["65.16"],"进制":["65.16"],"范围":["65.16"],"add":["65.17"],"delete":["65.17"],"has":["65.17","106.0","120.0"],"成员都是对象":["65.17"],"成员都是弱引用":["65.17"],"减少了大用户量下的服务器负载":["66.0"],"可以实现动态刷新":["66.0"],"局部刷新":["66.0"],"安全问题":["66.0"],"暴露了与服务器交互的细节":["66.0"],"对搜索引擎的支持比较弱":["66.0"],"seo":["66.0"],"的替代方案":["66.1"],"是一个原生的":["66.1"],"api":["66.1","90.5","90.10","92.3"],"技术智能自动选择":["67.0"],"cache服务器":["67.0"],"选择最快的":["67.0"],"服务器":["67.0"],"加快远程访问的速度":["67.0"],"带宽优化":["67.0"],"自动生成服务器":["67.0"],"向本地域名解析服务系统发起域名解析的请求":["68.0"],"一般是本地运营商的机房":["68.0"],"向根域名解析服务器发起域名解析服务请求":["68.0"],"根域名服务器返回":["68.0"],"中":["69.0","93.6"],"浏览器对":["69.0"],"的长度有限制":["69.0"],"网络层之间加入了":["70.0"],"ssl":["70.0"],"tsl":["70.0"],"安全协议":["70.0"],"篡改风险":["70.1"],"强制植入垃圾广告":["70.1"],"冒充风险":["70.1"],"在通信过程中使用对称加密的方式进行加密明文数据":["70.2"],"服务端确认双方使用的加密方法":["70.3"],"并给出数字证书":["70.3"],"以及一个服务器生成的随机数":["70.3"],"第三步":["70.3"],"客户端确认数字证书有效":["70.3"],"场景中通常端与端之间的交互量很大":["70.4"],"对非对称加密的效率是无法忍受的":["70.4"],"另外":["70.4","90.7"],"场景中只有服务端保存了私钥":["70.4"],"一对公私钥只能实现单向加解密过程":["70.4"],"因此":["70.4"],"中的内容传输采用对称加密":["70.4"],"和加密算法":["70.5"],"如":["70.5","93.19"],"的基本报文格式就是":["71.1"],"header":["71.1"],"body":["71.1"],"浏览器不会记录":["71.2"],"http":["71.2","72.0","81.0"],"链接":["71.3"],"而且是串行请求":["71.3"],"的连接和断开":["71.3"],"增加了通信开销":["71.3"],"http1":["71.3"],"迁移至":["71.4"],"url2":["71.4"],"之后":["71.4"],"客户端不知道":["71.4"],"继续请求":["71.4"],"这个时候服务器就会提高":["71.4"],"状态码和":["71.4"],"location":["71.4"],"头部":["71.4"],"通知客户端这个资源已经迁移到":["71.4"],"所以客户端需要再发送":["71.4"],"请求获取资源":["71.4"],"如果重定向的请求多":["71.4"],"客户端每次都要发起":["71.4"],"就会降低网络的性能":["71.4"],"accept":["71.6"],"这些字段加起来高达几百甚至几千字节":["71.6"],"所以有必要进行压缩":["71.6"],"而且很大请求和响应的报文中有很多字段都是重复的":["71.6"],"所以有必要避免重复性":["71.6"],"而且字段是":["71.6"],"ascii":["71.6"],"编码":["71.6","81.11"],"可读性较好但是效率低":["71.6"],"所以有必要改成二进制编码":["71.6"],"所以":["71.6","93.21"],"开发了":["71.6"],"hpack":["71.6"],"算法来压缩头部":["71.6"],"主要由静态字典":["71.6"],"动态字典和":["71.6"],"huffman":["71.6"],"编码组成":["71.6"],"核心就是客户端和服务端都会建立和维护字典":["71.6"],"用长度较小的索引号来表示重复的字符串":["71.6"],"再用":["71.6"],"编码来压缩数据":["71.6"],"最高能达到":["71.6"],"的高压缩率":["71.6"],"二进制帧":["71.6"],"长连接机制":["72.0"],"作为自己认证的凭据":["73.0"],"应用系统接受到请求之后会把":["73.0"],"送到认证系统进行校验":["73.0"],"检查":["73.0"],"的合法性":["73.0"],"同一台设备进程之间进行通信":["74.0"],"可以通过管道":["74.0"],"可靠的":["74.1"],"基于字节流的传输层通信协议":["74.1"],"相比":["74.2"],"具备流量控制":["74.2"],"控制发送方向接收方发送数据的速率":["74.2"],"防止接收方接收不了":["74.2"],"导致数据丢失或网络拥塞":["74.2"],"核心思想是发送方和接收方一起维护一个滑动窗口":["74.2"],"接收方通过":["74.2"],"报文中的窗口大小字段告诉发送方它的接收能力":["74.2"],"发送方根据接收方告知的窗口大小来确定可以发的数据量":["74.2"],"每发送一次数据":["74.3"],"就累加一次该数据字节数的大小":["74.3"],"用来解决网络包乱序的问题":["74.3"],"ip":["74.4"],"层是不可靠的":["74.4"],"报文发送给服务端":["74.5"],"向服务端发起连接":["74.5"],"客户端处于":["74.5"],"sent":["74.5"],"这个报文不包含应用层数据":["74.5"],"作为":["74.6"],"报文的序列号值":["74.6"],"表明已经收到客户端的报文了":["74.6"],"此时服务端处于":["74.6"],"close":["74.6"],"wait":["74.6","122.0","122.1"],"第三次挥手":["74.6"],"如果服务端也想断开连接了":["74.6"],"只要客户端给出这个编号":["74.7"],"服务器如果有这个编号的记录":["74.7"],"那么双方就可以继续使用以前的秘钥":["74.7"],"而不用重新生成一把":["74.7"],"目前所有的浏览器都支持这一种方法":["74.7"],"但是这种方法有一个缺点是":["74.7"],"不重复":["74.8"],"且按序到达":["74.8"],"尽最大努力交付":["74.8"],"即不保证可靠交付":["74.8"],"并且因为":["74.8"],"可靠":["74.8"],"表示目前是协议处理的中间状态":["75.0"],"ok":["75.1"],"最常见的成功状态码":["75.1"],"表示一切正常":["75.1"],"moved":["75.2"],"permanently":["75.2"],"表示客户端请求的报文有错误":["75.3"],"服务器发生错误":["75.4"],"multipart":["76.0"],"form":["76.0"],"data":["76.0"],"application":["76.0"],"严重浪费了服务器端和客户端的资源":["77.0"],"当用户增加时":["77.0"],"服务器端的压力就会变大":["77.0"],"这是很不合理的":["77.0"],"长轮询":["77.0"],"首先由客户端向服务器发起请求":["77.0"],"较大的响应需要在客户端和服务器之间进行多次往返通信":["78.0"],"这会延迟浏览器获得和处理内容的时间":["78.0"],"还会增加访问者的流量费用":["78.0"],"是一个时间戳":["78.1"],"接下来当再次向服务器请求这个资源的时候":["78.1"],"浏览器会先比对本地时间和":["78.1"],"的时间戳":["78.1"],"如果本地时间小于":["78.1"],"设定的过期时间":["78.1"],"那么直接去缓存中去取这个资源":["78.1"],"也正因为如此":["78.1"],"是有问题的":["78.1"],"因为":["78.1","90.3"],"会依赖本地时间":["78.1"],"如果服务端和客户端的时间设置不同":["78.1"],"或者直接去手动改客户端的时间":["78.1"],"值":["78.2"],"服务器接收到这个时间戳后":["78.2"],"会比对该时间戳和资源在服务器上的最后修改时间是否一致":["78.2"],"从而判断资源是否发生了改变":["78.2"],"如果发生了变化":["78.2"],"就会返回一个完整的响应内容":["78.2"],"并在":["78.2"],"response":["78.2"],"中添加新的":["78.2"],"否则":["78.2"],"maxage":["78.3"],"最后":["78.3"],"配置协商缓存需要用到的":["78.3"],"etag":["78.3"],"modified":["78.3"],"等参数":["78.3"],"memorycache":["78.3"],"是指存在内存中的缓存":["78.3"],"优先级最高":["78.3"],"浏览器会最先去命中的一种缓存":["78.3"],"也是响应速度最快的一种缓存":["78.3"],"就是一个存储在浏览器中的很小的一个文本文件":["78.5"],"附着在":["78.5"],"使其消失的唯一办法就是手动删除":["78.6"],"即便是相同域名下的两个窗口":["78.7"],"只要不在同一个浏览器窗口中打开":["78.7"],"那么它们的":["78.7"],"不仅可以存储字符串":["78.8"],"也可以存储二进制数据":["78.8"],"都是只能在拿到数据后存起来这件事情发生之后":["78.9"],"首次请求资源的时候":["78.9"],"想要提升响应能力":["78.9"],"就需要":["78.9"],"浏览器可能做不到一次性处理那么多的任务":["79.0"],"实际上":["79.0"],"用户点开页面的瞬间":["79.0"],"能看到的只有首屏的东西":["79.0"],"通过在一段时间内无视后来产生的回调请求来实现的":["79.1"],"然后返回给客户端":["80.0"],"客户端拿到的是可以直接渲染然后呈现给用户的":["80.0"],"内容":["80.0"],"文档":["80.1"],"生成样式规则":["80.1"],"图层布局计算模块":["80.1"],"布局计算每个对象的精确位置和大小":["80.1"],"视图绘制模块":["80.1"],"进行具体节点的图像绘制":["80.1"],"引擎":["80.1"],"遇到":["80.2"],"link":["80.2"],"style":["80.2","93.16","96.1"],"才开始构建":["80.2"],"所以需要将":["80.2"],"尽早":["80.2"],"尽快下载到客户端":["80.2"],"以便缩短首次渲染的时间":["80.2"],"修改元素的宽":["80.3"],"高或隐藏元素等":["80.3"],"时":["80.3","93.16"],"浏览器需要重新计算元素的几何属性":["80.3"],"然后再将计算的结果绘制出来":["80.3"],"这个过程就叫回流":["80.3"],"请求":["81.0"],"响应":["81.0"],"功能很强大":["81.2"],"但是也很慢":["81.2"],"可以使用":["81.2","88.1"],"include":["81.2","93.9"],"module":["81.3","150.1"],"exports":["81.3","150.1"],"entry":["81.3"],"依赖的库数组":["81.3"],"vendor":["81.3"],"prop":["81.3"],"types":["81.3"],"babel":["81.3"],"polyfill":["81.3"],"react":["81.3","93.13"],"router":["81.3","93.25"],"output":["81.3"],"如果同一时刻存在多个任务":["81.4"],"只能排队一个一个的等待处理":["81.4"],"删除冗余代码":["81.5"],"tree":["81.5","92.1"],"shaking":["81.5"],"基于":["81.5"],"import":["81.5","150.8"],"export":["81.5"],"语法":["81.5"],"压缩后通常能减少响应":["81.6"],"左右的大小":["81.6"],"压缩的原理是在一个文本文件中找出一些重复的字符串":["81.6"],"临时替换它们":["81.6"],"从而使整个文件变小":["81.6"],"base64":["81.7"],"首先":["81.7"],"是一种非常轻巧的图片格式":["81.8"],"格式有":["81.8"],"位存储单个图":["81.8"],"种颜色":["81.9"],"对图像的处理不是基于像素点":["81.10"],"而是基于对图像的形状描述":["81.10"],"对比":["81.10"],"png":["81.10"],"位字节码的编码方式":["81.11"],"通过对图片进行":["81.11"],"我们可以直接将编码结果写入到":["81.11"],"chrome":["81.12"],"之外的浏览器兼容性较差":["81.12"],"会增加服务端的负担":["81.12"],"和编码":["81.12"],"文件相比":["81.12"],"csrf":["82.0"],"token":["82.0"],"总的来说有以下几点":["83.0"],"永远不要信任用户的输入":["83.0"],"要对用户的输入进行校验":["83.0"],"可以通过正则表达式":["83.0"],"标签或者":["84.0"],"代码":["84.0","95.0"],"比如":["84.0"],"是加密传输":["85.0"],"两边拥有相同的密钥":["85.1"],"两边都知道如何将密文加密解密":["85.1"],"非对称密钥会有两把密钥":["85.2"],"一把是私钥":["85.2"],"只有自己才有":["85.2"],"服务器把":["85.3"],"ca":["85.3"],"数字证书":["85.3"],"包含公钥":["85.3"],"响应给客户端":["85.3"],"对之后传输的内容进行加密传输":["85.4"],"中间人通过客户端的随机数对客户端的数据进行解密":["85.4"],"中间人与服务端建立合法的":["85.4"],"https":["85.4"],"web":["86.0"],"可以防止用户使用自动化程序对密码":["87.0"],"当用户知道了":["88.0"],"中的":["88.0","92.8"],"在模板中放入过多逻辑会让模板难以维护":["88.1"],"可以将复杂的逻辑放入计算属性中处理":["88.1"],"当页面中有某些数据依赖其他数据进行变动的时候":["88.1"],"遍历":["88.2"],"里的每个属性":["88.2"],"常见的配置选项有":["88.3"],"deep":["88.3"],"immediate":["88.3","122.1"],"this":["89.0","92.9","93.23"],"route":["89.0"],"跳转对象":["89.1"],"里面可以获取":["89.1"],"name":["89.1"],"index":["89.2"],"文件中":["89.2"],"在电脑上有用":["89.3"],"安卓上没反应怎么解决":["89.3"],"因此我们能通过浏览器的回退":["89.4"],"前进按钮控制":["89.4"],"的切换":["89.4"],"a":["89.4","89.5","127.0"],"并设置":["89.4"],"href":["89.4"],"属性":["89.4","90.9","93.9"],"当用户点击这个标签后":["89.4"],"的":["89.4","92.6","93.3","93.12"],"值会发生改变":["89.4"],"或者使用":["89.4"],"来对":["89.4"],"loaction":["89.4"],"进行赋值":["89.4"],"分别起到路由导航作用和组件内容渲染作用":["89.5"],"使用中":["89.5"],"默认生成一个":["89.5"],"repalcestate":["89.6"],"这两个":["89.6"],"可以在不进行刷新的情况下":["89.6"],"操作浏览器的历史纪录":["89.6"],"replacestate":["89.7"],"的变化":["89.7"],"组件级":["89.8"],"影响范围由大到小":["89.8"],"例如全局的":["89.8"],"一般来说":["89.9"],"对所有的":["89.9"],"路由都使用动态导入":["89.9"],"是个好主意":["89.9"],"函数":["89.10"],"返回路由器实例":["89.10"],"实例内部做几件事":["89.10"],"保存用户传入的配置项":["89.10"],"监听":["89.10"],"hash":["89.10"],"无法监控到数组下标的变化":["90.0"],"导致通过数组下标添加元素":["90.0"],"不能实时响应":["90.0"],"必须遍历对象的每个属性":["90.0"],"用于处理对象类型的数据响应式":["90.1"],"会自动追踪函数内部使用的响应式数据":["90.2"],"不需要显示指定":["90.2"],"可以监视多个数据":["90.2"],"编译优化":["90.4"],"生命周期":["90.5"],"只会调用一次":["90.6"],"而":["90.6"],"函数在渲染过程中会被多次调用":["90.6"],"选项":["90.7"],"自定义渲染器":["90.7"],"变量":["90.7"],"suspense":["90.7"],"获取到哪一层才触发响应式":["90.8"],"不是像":["90.8"],"vue2":["90.8"],"一次性递归监听数据":["90.8"],"编译层面做了更多编译优化处理":["90.8"],"用户将制造":["90.9"],"反而更混乱":["90.9"],"为何":["90.9"],"需要":["90.9"],"value":["90.9","106.0"],"composition":["90.10"],"不能直接更改":["91.0"],"类似于":["91.1"],"不同在于":["91.1"],"可以包含任意异步操作":["91.1"],"但它不能修改状态":["91.1"],"需要提交":["91.1"],"才能变更状态":["91.1"],"开发时":["91.1"],"包含异步操作或者复杂业务组合时使用":["91.1"],"选项方式":["91.2"],"可以以字符串形式监听":["91.2"],"state":["91.2","91.3"],"xx":["91.2"],"mutation":["91.3"],"的时候同时存入":["91.3"],"store":["91.3"],"中把值取出作为":["91.3"],"的升级版":["91.4"],"官网也说过":["91.4"],"为了尊重原作者":["91.4"],"所以取名":["91.4"],"而没有取名":["91.4"],"所以大家可以直接将":["91.4"],"比作为":["91.4"],"type":["91.5"],"payload":["91.5"],"dispatch":["91.5"],"实现":["91.5"],"通过":["92.0","95.0"],"object":["92.0"],"语法树":["92.1"],"abstract":["92.1"],"syntax":["92.1"],"即":["92.1","140.0"],"源代码的抽象语法结构的树状表现形式":["92.1"],"的属性一一对应":["92.3"],"如果用原生":["92.3"],"去操作":["92.3"],"浏览器会从构建":["92.3"],"树开始从头到尾执行一遍流程":["92.3"],"来检测数组":["92.4"],"性能差":["92.4"],"存放所依赖的":["92.5"],"watcher":["92.5"],"当属性变化后会通知自己对应的":["92.5"],"都是采用":["92.6"],"diff":["92.6","93.11"],"算法来对比新旧虚拟节点":["92.6"],"来更新节点":["92.6"],"函数中":["92.6"],"在交叉对比中":["92.6"],"同时也初始化了":["92.7"],"provide":["92.7"],"inject":["92.7"],"方法":["92.7"],"内部会对数据进行劫持":["92.7"],"对象采用":["92.7"],"先判断一方有子节点和一方没有子节点的情况":["92.8"],"如果新的":["92.8"],"children":["92.8","112.0"],"没有子节点":["92.8"],"将旧的子节点移除":["92.8"],"比较都有子节点的情况":["92.8"],"核心":["92.8"],"递归比较子节点":["92.8"],"算法称为":["92.8"],"patching":["92.8"],"它由":["92.8"],"对数据进行观测":["92.9"],"如果数据是对象":["92.9"],"调用":["92.9"],"walk":["92.9"],"内部对":["92.9"],"进行遍历":["92.9"],"通过调用":["92.9"],"方法循环对象属性":["92.9"],"方法将其定义为响应式":["92.9"],"这个过程中整体上做了两件事":["92.10"],"初始化":["92.10"],"会在本轮数据更新后":["92.11"],"在异步更新视图":["92.11"],"核心思想":["92.11"],"nexttick":["92.11"],"而是开启一个队列":["92.12"],"把组件更新函数保存在队列中":["92.12"],"在同一事件循环中发生的所有数据变更会异步的批量更新":["92.12"],"这一策略导致我们对数据的修改不会立刻体现在":["92.12"],"上":["92.12"],"此时如果想要获取更新后的":["92.12"],"状态":["92.12"],"就需要使用":["92.12"],"指令在表单":["92.13"],"算法是一个时间复杂度为":["92.14"],"o":["92.14","124.0","136.0"],"核心库只关心视图层":["93.0"],"是一个声明式框架":["93.0"],"因为根实例是单例":["93.1"],"不会产生数据污染情况":["93.1"],"组件实例对象":["93.1"],"只是简单的基于":["93.2"],"切换":["93.2"],"编译条件":["93.2"],"是真正的条件渲染":["93.2"],"它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建":["93.2"],"只有渲染条件为假时":["93.2"],"并不做操作":["93.2"],"直到为真才渲染":["93.2"],"的优先级是高于":["93.3"],"把它们放在一起":["93.3"],"refs":["93.4","93.23"],"div":["93.5"],"是不归":["93.5"],"如果请求来的数据不是要被其它组件共用":["93.6"],"仅仅在请求的组件内使用":["93.6"],"一旦页面加载完成":["93.7"],"加载慢的原因":["93.8"],"网络延时问题":["93.8"],"资源文件体积过大":["93.8"],"用于缓存组件":["93.9"],"提供":["93.9"],"exclude":["93.9"],"让一个对象变成响应式数据":["93.10"],"检测差异":["93.11"],"功能抽离公共的业务逻辑":["93.12"],"ui":["93.13","93.25"],"组件":["93.13","93.24"],"能看到的前端页面":["93.13"],"其实就是":["93.13"],"vue":["93.13","98.1"],"等前端框架":["93.13"],"vdom":["93.14"],"是一颗单根树形结构":["93.14"],"patch":["93.14"],"方法在遍历的时候从根节点开始遍历":["93.14"],"它要求只有一个根节点":["93.14"],"watch":["93.15"],"不能通过":["93.15"],"emit":["93.15"],"对外暴露事件":["93.15"],"调用事件只能通过":["93.15"],"listeners":["93.15","93.16"],"click":["93.15"],"从而实现任何组件间的通信":["93.16"],"包括父子":["93.16"],"兄弟组件":["93.16"],"attrs":["93.16"],"隔代组件通信":["93.16"],"包含了父作用域中不被":["93.16"],"所识别":["93.16"],"且获取":["93.16"],"的特性绑定":["93.16"],"class":["93.16"],"除外":["93.16"],"当一个组件没有声明任何":["93.16"],"混入":["93.17"],"子组件中所有的":["93.18"],"都将会刷新为最新的值":["93.18"],"这意味着你不应该在一个子组件内部改变":["93.18"],"如果你这样做了":["93.18"],"并且组件在系统中是被复用的":["93.19"],"所以对代码进行优化可获得系统的整体升级":["93.19"],"插件是什么":["93.19"],"插件通常用来为":["93.19"],"添加全局功能":["93.19"],"插件的功能范围没有严格的限制":["93.19"],"一般有下面几种":["93.19"],"添加全局方法或者属性":["93.19"],"custom":["93.19"],"element":["93.19","93.25"],"添加全局资源":["93.19"],"指令":["93.19"],"来说":["93.20"],"修饰符就简单很多了":["93.20"],"一个组件上可以有多个":["93.20"],"更快的内容到达时间":["93.21"],"首屏加载更快":["93.21"],"会等待所有":["93.21"],"编译后的":["93.21"],"文件都下载完成后":["93.21"],"才开始进行页面的渲染":["93.21"],"文件下载等需要一定的时间等":["93.21"],"所以首屏渲染需要一定的时间":["93.21"],"直接由服务端渲染好页面直接返回显示":["93.21"],"无需等待下载":["93.21"],"文件及再去渲染等":["93.21"],"有更快的内容到达时间":["93.21"],"开发条件会受到限制":["93.21"],"服务器端渲染只支持":["93.21"],"beforecreate":["93.21"],"created":["93.21"],"两个钩子":["93.21"],"当我们需要一些外部扩展库时需要特殊处理":["93.21"],"删除数组的区别":["93.22"],"我们就可以在项目中编写":["93.24"],"格式的":["93.24"],"我们可以把代码分割为":["93.24"],"接下来引入必要插件":["93.25"],"路由插件":["93.25"],"状态管理":["93.25"],"vuex":["93.25"],"pinia":["93.25"],"库我比较喜欢":["93.25"],"plu":["93.25"],"s":["93.25"],"antd":["93.25"],"上的数据和方法都不能被访问":["94.0"],"钩子调用是在":["94.0"],"initstate":["94.0"],"之前的":["94.0"],"作用是对":["94.0"],"props":["94.0"],"等属性进行初始化处理":["94.0"],"实例被创建后发生":["94.0"],"当前阶段已经完成了数据观测":["94.0"],"可以使用数据":["94.0"],"清理定时器":["94.1"],"避免内存泄露和不必要的开销":["94.1"],"取消异步操作":["94.1"],"mounted":["94.2","94.3"],"生命周期中调用异步请求":["94.3"],"babylon":["95.0"],"格式的资源":["96.0"],"source":["96.1"],"scss":["96.3"],"代码转换成":["96.3"],"file":["96.3"],"底层是利用发布订阅模式":["97.1"],"原型上需要定义apply":["97.2"],"的方法":["97.2"],"apply":["97.2"],"compiler":["97.2"],"查找入口文件引入了哪些js文件":["98.0"],"结尾的文件":["98.1"],"必须要通过对应的":["98.1"],"解析成":["98.1"],"代码后":["98.1"],"才能识别":["98.1"],"值就会更改":["99.0"],"chunkhash":["99.0"],"webpack":["100.0","150.5"],"会重新编译":["100.0"],"开启":["100.1"],"服务":["100.1"],"本地":["100.1"],"启动后":["100.1"],"xmlhttprequest":["101.0"],"open":["101.0"],"false":["101.0","104.0","132.0"],"throw":["103.0"],"error":["103.0"],"必须传入至少一个参数":["103.0"],"判断参数是否都为函数":["103.0"],"null":["104.0","130.0","142.0"],"return":["104.0","110.0","117.0","121.0","130.0","133.0"],"shift":["105.0"],"取第一个任务执行":["105.0"],"sleep":["105.0"],"time":["105.0"],"const":["106.0","122.0","125.0","130.0"],"否则返回新生成的对象":["107.0"],"mynew":["107.0"],"constructor":["107.0"],"args":["107.0","111.0"],"模拟异步":["108.0"],"保证resolvetask事件先注册成功":["108.0"],"要考虑在promise里面写同步代码的情况":["108.0"],"foreach":["108.0"],"cb":["108.0"],"err":["108.0"],"resolve包一下":["108.1"],"防止promises":["108.1"],"不是promise类型":["108.1"],"重发的次数":["108.2"],"设置下一次执行interval函数":["109.0"],"达到模拟循环":["109.0"],"第一次interval函数":["109.0"],"在delay后执行interval":["109.0"],"ms":["110.0"],"curried":["111.0"],"if":["111.0","118.0","130.0","133.0"],"实现代码":["112.0"],"listtotree":["112.0"],"将回调函数添加到事件订阅列表中":["113.0"],"push":["113.0","118.0"],"删除订阅":["113.0"],"off":["113.0"],"检查是否存在该类型的事件订阅":["113.0"],"isarray":["115.0","116.0"],"concat":["115.0","116.0"],"返回数组":["117.0"],"改进":["117.0"],"betterbubblesort":["117.0"],"i":["117.1","117.2","137.0"],"是当前排序区间的起点":["117.1"],"j用于帮助":["117.2"],"寻找自己应该有的定位":["117.2"],"它接受一个数组nums以及左右边界left和right作为参数":["117.3"],"如果左边界大于等于右边界":["117.3"],"表示排序完成":["117.3"],"直接返回":["117.3"],"retur":["117.3"],"调用partition函数获取枢轴元素的索引":["117.3"],"leftarr":["117.4"],"slice":["117.4"],"递归分割右子数组":["117.4"],"rightarr":["117.4"],"includes":["118.0"],"转成":["119.0"],"这里用0表示为顶级节点":["119.0"],"fn":["122.0","122.1"],"是需要执行的函数":["122.0"],"是时间间隔":["122.0"],"throttle":["122.0"],"debounce":["122.1"],"只作为记录":["123.0"],"的形式给出":["124.0"],"不要给另外的数组分配额外的空间":["124.0"],"你必须原地修改输入数组":["124.0"],"的额外空间解决这一问题":["124.0"],"reversewords":["125.0"],"字符串转数组":["125.0"],"strarr":["125.0"],"array":["125.0","137.0"],"from":["125.0"],"移除多余空格":["125.0"],"removeextraspaces":["125.0"],"翻转":["125.0"],"path":["126.0"],"其中以":["126.0"],"作为分隔符":["126.0"],"现需将路径加密":["126.0"],"加密方法为将":["126.0"],"且不重复的三元组":["127.0"],"注意":["127.0"],"答案中不可以包含重复的三元组":["127.0"],"解题思路":["127.0","128.0","129.0","130.0","131.0","132.0","140.0","144.0","145.0"],"var":["127.0","128.0","130.0","131.0","132.0","133.0","141.0"],"threesum":["127.0"],"sort":["127.0"],"ans":["127.0","130.0"],"不考虑输出结果的顺序":["128.0"],"先将两个数组转为使用":["128.0"],"set":["128.0"],"存储":["128.0","133.0"],"再比较两个":["128.0","133.0"],"的那":["129.0"],"两个":["129.0"],"整数":["129.0"],"并返回它们的数组下标":["129.0"],"你可以假设每种输入只会对应一个答案":["129.0"],"数组中同一个元素在答案里不能重复出现":["129.0"],"任意顺序":["130.0"],"返回答案":["130.0"],"foursum":["130.0"],"len":["130.0"],"foursumcount":["131.0"],"就返回":["132.0"],"不是":["132.0"],"则返回":["132.0","142.0"],"ishappy":["132.0"],"map":["133.0"],"isanagram":["133.0"],"通过将查找区间分为两半":["134.0"],"返回中间元素的索引":["134.1"],"如果中间元素大于目标元素":["134.1"],"说明目标元素在左半部分":["134.1"],"如果目标值存在返回下标":["134.2"],"否则返回":["134.2"],"思路":["134.2"],"暴力":["134.2"],"首先考虑暴力的方法":["134.2"],"直接通过遍历去查找数组中是否存在目标元素":["134.2"],"非递减顺序":["135.0"],"排序的整数数组":["135.0"],"nums":["135.0"],"返回":["135.0","138.0","146.0"],"每个数字的平方":["135.0"],"组成的新数组":["135.0"],"要求也按":["135.0"],"移除所有数值等于":["136.0"],"的元素":["136.0"],"并返回移除后数组的新长度":["136.0"],"不要使用额外的数组空间":["136.0"],"你必须仅使用":["136.0"],"numsl":["138.0"],"numsr":["138.0"],"并返回其长度":["138.0"],"如果不存在符合条件的子数组":["138.0"],"只能进行节点交换":["140.0"],"dummy":["140.0","141.0"],"removenthfromend":["141.0"],"创建一个dummy节点":["141.0"],"连接到链表的头部":["141.0"],"listnode":["141.0","143.0"],"如果链表中有某个节点":["142.0"],"可以通过连续跟踪":["142.0"],"next":["142.0","143.0"],"指针再次到达":["142.0"],"则链表中存在环":["142.0"],"为了表示给定链表中的环":["142.0"],"val":["143.0"],"node":["144.0"],"的节点":["144.0"],"并返回":["144.0"],"新的头节点":["144.0"],"遍历链表":["144.0"],"请你反转链表":["145.0"],"并返回反转后的链表":["145.0"],"三指针":["145.0"],"heada":["146.0"],"headb":["146.0"],"请你找出并返回两个单链表相交的起始节点":["146.0"],"如果两个链表没有交点":["146.0"],"init":["150.0"],"y":["150.0"],"require":["150.1"],"生成的":["150.3"],"文件中分离出来并且单独打包":["150.4"],"文件":["150.6"],"optimization":["150.6"],"的作用就是将非":["150.7"],"core":["150.12"],"如果想要实现打包文件分类":["150.13"]},{"0":["34.0","39.0","65.14","65.16","90.7","134.2","140.0","141.0","142.0"],"1":["9.0","37.0","66.0","78.1","117.1","130.0"],"2":["18.2","64.3","73.0","91.4","92.8","92.10","93.18","98.1","100.1"],"3":["20.0","25.0","31.0","58.0","64.2","73.0","91.3","92.12","93.14","98.0"],"4":["14.0","58.0","81.11","85.3","93.25"],"5":["93.15","93.25"],"6":["57.0"],"7":["57.0"],"10":["92.3"],"13":["92.9"],"20":["59.0"],"50":["6.15","122.0"],"80":["13.1"],"100":["6.22"],"200":["14.0"],"204":["75.1"],"302":["14.0"],"403":["75.3"],"501":["75.4"],"1000":["37.0"],"1600":["81.8"],"其次":["5.0"],"就算是都使用的":["5.0"],"pc":["5.0"],"适用于未知字数中文对齐":["5.1"],"not":["5.1"],"去除无用属性":["5.1"],"排除指定元素不使用样式":["5.1"],"适用于符号分割文字":["5.1"],"object":["5.1","65.9","107.0"],"fit":["5.1"],"规定图像尺寸":["5.1"],"使图像脱离":["5.1"],"background":["5.1","6.19","6.20"],"缺点":["6.2","6.10"],"只对行内元素有效":["6.2"],"必须顶宽":["6.3"],"值不能为":["6.3"],"block":["6.4"],"改为行内或者行内块级形式":["6.4"],"以达到text":["6.4"],"transform":["6.5"],"translatex":["6.5"],"自身宽度一半":["6.5"],"等同于margin":["6.5"],"50px":["6.5","6.10"],"content":["6.6","6.17","13.4","101.0"],"center":["6.6","6.13","6.17","24.1"],"line":["6.8","6.9"],"30px":["6.9"],"25px":["6.10"],"优缺点":["6.10"],"优点":["6.10"],"兼容性好":["6.10"],"不管是块级还是行内元素都可以实现":["6.10"],"代码较多":["6.10"],"脱离文档流":["6.10"],"需要知道高度值":["6.10"],"son":["6.11"],"text":["6.13","13.4","54.2"],"align":["6.13","6.14"],"vertical":["6.14"],"middle":["6.14"],"left":["6.15","40.0","137.0","138.0"],"auto":["6.16","26.0"],"width":["6.16","6.22"],"100px":["6.16"],"justify":["6.17"],"color":["6.19"],"f00":["6.19"],"css":["6.20","6.22","6.23","6.24","6.27","15.2","29.0","78.3","150.3"],"relative":["6.21"],"子绝父相":["6.21"],"absolute":["6.21","17.1"],"top":["6.21","34.0","137.0"],"margin":["6.23"],"display":["6.24","6.27","31.0","38.0"],"eeff2b":["6.26"],"320px":["6.26"],"等于":["6.26"],"center的宽度之和加上间隔":["6.26"],"多出来的就是":["6.26"],"right和":["6.26"],"center的间隔":["6.26"],"0f0":["6.26"],"height":["6.27","22.0"],"500px":["6.27"],"禁止缩放":["9.0"],"设置":["9.0","89.5"],"meta":["9.0"],"标签":["9.0"],"的":["10.0","23.0","78.3"],"所以他必须等待到":["10.0"],"构建完成":["10.0"],"也就是":["10.0"],"资源加载完成":["10.0"],"或者":["10.0","89.10"],"资源加载失败":["10.0"],"后":["10.0"],"cookie":["11.0","84.0"],"绘制等任务":["12.0"],"将其转化成可视化的网页形式":["12.0"],"常见的有":["12.0"],"6844903767226351623":["13.0"],"端口号":["13.1"],"都相同":["13.1"],"data":["13.3","71.6","93.23","112.0"],"body":["13.3","69.0"],"removechild":["13.3"],"post":["13.4"],"type":["13.4","101.0"],"的值为下面三个之一":["13.4"],"将请求转发给服务器":["13.5"],"则需要重定向":["14.0"],"从":["14.0"],"location":["14.0"],"自动中读取地址":["14.0"],"重新进行第":["14.0"],"步":["14.0"],"跳转也会读取本地缓存吗":["14.0"],"则继续处理请求":["14.0"],"这样一个运行环境叫做进程":["15.1"],"管理任务和资源分配的基本单位":["15.1"],"html":["15.2","36.0"],"js":["15.2","53.0","64.5","65.6","78.3","80.2","89.4","124.0","129.0","138.0","146.0"],"其中的元素按照特定规则进行排布":["17.0"],"属性为":["17.1","60.0","88.0"],"或":["17.1","81.2"],"fixed":["17.1"],"因为":["17.2","90.6","92.9"],"表单加上":["18.1"],"off":["18.2"],"属性被设置成":["19.0"],"值后":["19.0"],"对于一般的元素":["19.0"],"它的表现跟":["19.0"],"图标":["21.0"],"能够改变元素的":["22.1"],"weight":["22.2"],"倍":["23.0"],"定义项目的缩小比例":["23.0"],"即":["23.0"],"如果空间不足":["23.0"],"该元素将缩小":["23.0"],"所有项目的":["23.0"],"容器":["24.0"],"定义在主轴上的对齐方式":["24.1"],"start":["24.1","125.0"],"默认":["24.1"],"左对齐":["24.1"],"end":["24.1"],"右对齐":["24.1"],"居中":["24.1"],"space":["24.1"],"between":["24.1"],"也不放大":["24.2"],"如果所有项目的":["24.2"],"被同时加载":["25.0"],"引入的":["25.0"],"将在页面加载完毕后被加载":["25.0"],"值来分隔它们":["26.0"],"当然我们也可以将父元素设置为":["26.0"],"第三种是高度为":["26.0"],"的父元素的":["26.0"],"如果不存在逐级向上查找":["27.0"],"和":["29.0","49.0","63.4","65.11","81.0","91.4","93.13","93.24"],"来修改和操作":["29.0"],"而":["29.0"],"除非一再触发动画":["30.0"],"blue":["31.0"],"flex":["31.0"],"布局":["31.0"],"左边定宽":["31.0"],"右侧":["31.0"],"outer":["31.0"],"我们可以通过":["32.0"],"hover":["32.0"],"子孙节点消失是继承了":["33.0"],"属性":["33.0"],"可以通过设置":["33.0"],"visibile":["33.0"],"使子孙节点显示":["33.0"],"只会导致重绘":["33.0"],"绝对定位中":["34.0"],"bottom":["34.0","39.0","137.0"],"骨架屏":["35.0"],"关键样式直接写在":["36.0"],"标签的":["36.0"],"style":["36.0","93.24"],"属性中":["36.0"],"多行":["38.0"],"right":["39.0","42.1","137.0"],"通过使用绝对定位":["40.0"],"以及设置元素":["40.0"],"为其宽度的一半":["40.0"],"不再向父元素汇报高度":["41.0"],"后期不容易维护":["41.1"],"原理":["41.1"],"元素的左右两侧都不允许浮动元素存在":["41.1"],"只设置":["42.0"],"transparent":["42.1"],"只包括内容区域":["43.0"],"ie":["43.0"],"盒模型":["43.0"],"包含内容区域":["43.0"],"这些空白字符会被解析为文本节点":["44.0"],"使":["44.1"],"li":["44.1"],"自动排列在一行内":["44.1"],"间隔消失":["44.1"],"伪类选择器":["45.0"],"id选择器":["45.1"],"类选择器":["45.1"],"on":["46.0"],"后者带":["46.0"],"脚本文件":["47.0"],"他们都不会阻塞页面的解析":["47.0"],"区别":["47.0"],"脚本的执行时机是在下载完成后立即执行":["47.0"],"href":["48.0"],"中指定锚点的":["48.0"],"和离线存储":["49.0"],"多媒体方面规定了":["49.0"],"audio":["49.0"],"允许在主页面加载的时候并行加载嵌套页面":["50.0"],"提高页面并发性能":["50.0"],"for":["51.0","65.10","103.0","112.0","120.0","125.0","127.0","130.0","131.0"],"异步地预取指定资源":["52.0"],"这意味着浏览器会在":["52.0"],"空闲":["52.0"],"时加载这些资源":["52.0"],"编译":["53.0"],"执行完毕":["53.0"],"因此":["53.0"],"属性会影响页面的加载和渲染速度":["53.0"],"这也是为什么将":["53.0"],"放在底部而不是头部":["53.0"],"message":["54.1"],"event":["54.1"],"javascript":["54.2","63.1"],"function":["54.2","114.0","129.0","131.0","146.0"],"click":["54.2"],"页面1":["54.3"],"input":["54.3","121.0"],"id":["54.3"],"标签具有强调的语义":["55.1"],"对于一般显示":["55.1"],"可能看上去没有什么差异":["55.1"],"但是对于机器来说":["55.1"],"会有很大的不同":["55.1"],"如果用户使用的是屏幕阅读器来访问网页":["55.1"],"内容块":["55.2"],"比如新闻文章":["55.2"],"博客帖子等":["55.2"],"aside":["55.2"],"简化了函数调用时传参的操作":["57.0"],"扩展运算符":["57.0"],"使用三个点":["57.0"],"进行数组和对象的展开操作":["57.0"],"可以将一个数组或对象拆分为独立的元素":["57.0"],"或者将多个数组或对象合并为一个":["57.0"],"promise":["57.0","66.1","89.9","108.2"],"引入了":["57.0"],"当某个宏任务执行完后":["58.0"],"会查看微任务队列是否有任务":["58.0"],"执行微任务队列中的所有微任务":["58.0"],"注意这里是执行所有的微任务":["58.0"],"微任务执行完成后":["58.0"],"会读取宏任务队列中排在最前的第一个宏任务":["58.0"],"注意宏任务是一个个取":["58.0"],"执行该宏任务":["58.0"],"如果执行过程中":["58.0"],"遇到微任务":["58.0"],"依次加入微任务队列":["58.0"],"宏任务执行完成后":["58.0"],"再次读取微任务队列里的任务":["58.0"],"依次类推":["58.0"],"async":["58.0"],"this2":["59.0"],"note":["59.0"],"开启了严格模式之和":["59.0"],"只是使函数内的this指向undefined":["59.0"],"不影响全局下的this的指向":["59.0"],"let":["59.0","104.0","112.0","117.3","120.0","122.0","122.1","128.0","129.0","131.0","133.0","138.0"],"const":["59.0","103.0","107.0","131.0","132.0"],"b":["59.0"],"的事件对象通过设置事件对象的":["60.0"],"canclebubble":["60.0"],"如果在同一对象上定义了其他处理程序":["60.1"],"剩下的处理程序将依旧被调用":["60.1"],"但调用":["60.1"],"之后任何其他对象上的事件处理程序将不会被调用":["60.1"],"不仅可以阻止事件在冒泡阶段的传播":["60.1"],"还能阻止事件在捕获阶段的传播":["60.1"],"ie9":["60.1"],"的时候决定的":["61.2"],"语句中的":["61.3"],"也属于块作用域":["61.3"],"只能在块作用域中访问":["61.4"],"不能跨块访问":["61.4"],"就会从父级的执行上下文的变量对象中查找":["61.5"],"后执行":["61.6"],"在每个":["61.6"],"的回调函数中":["61.6"],"尝试访问":["61.6"],"的值":["61.6"],"这个回调函数是在循环结束之后才会执行":["61.6"],"在循环结束的时候":["61.6"],"全局变量":["61.6"],"为":["61.6"],"所以输出是":["61.6"],"怎么改成":["61.6"],"如果依旧不存在":["62.1"],"中":["62.3","78.1"],"函数也是对象":["62.3"],"所以函数也有":["62.3"],"高延时":["63.0"],"的引用":["63.1"],"垃圾回收器对堆内存从头到尾进行线性遍历":["63.2"],"互相引用的对象不会被回收":["63.3"],"代码都是在执行上下文中运行的":["64.0"],"被调用":["64.1"],"时":["64.1","91.5","92.12"],"都会为该函数创建一个新的上下文":["64.1"],"从上向下按顺序执行":["64.2"],"脚本时":["64.3"],"会创建一个全局的执行上下文并压入当前执行栈":["64.3"],"确定":["64.4"],"this":["64.4","90.10","143.0"],"在顶层":["64.5"],"动态的语言":["65.0"],"bigint":["65.1"],"es10":["65.1"],"引用数据类型":["65.1"],"文件需要往这个对象中添加键名":["65.2"],"由于":["65.2"],"类型的值":["65.3"],"创建":["65.4"],"当一个数据不再需要使用时":["65.5"],"通过将其设置为":["65.5"],"代表的其实就是一个空对象":["65.6"],"在":["65.6","70.1","81.5","93.21"],"所以可以存储在栈中":["65.7"],"可以直接访问和复制":["65.7"],"普通对象":["65.8"],"数组对象":["65.8"],"正则对象":["65.8"],"日期对象":["65.8"],"prototype":["65.9","93.19"],"tostring":["65.9"],"call":["65.9"],"利用":["65.9","98.1"],"in":["65.10"],"循环":["65.10"],"因此非数字值传入也会返回":["65.12"],"会影响":["65.12"],"直接返回":["65.13","113.0"],"false":["65.13","89.4","93.2","105.0","133.0"],"var":["65.15","66.0","124.0","129.0","146.0"],"以":["65.16"],"进制的规则去解析":["65.16"],"字符串":["65.16"],"不合法导致解析失败":["65.16"],"随时可以消失":["65.17"],"可以用来保存":["65.17"],"dom":["65.17","90.7","93.13","94.0","94.3"],"节点":["65.17","92.3"],"不容易造成内存泄漏":["65.17"],"不能遍历":["65.17"],"不容易调试":["66.0"],"创建ajax对象":["66.0"],"xhr":["66.0"],"window":["66.0","89.4","89.6"],"xmlhttprequest":["66.0"],"new":["66.0","81.3","90.1","108.2","110.0","128.0","131.0","150.3"],"用于进行网络请求":["66.1"],"支持":["66.1"],"的远程":["67.0"],"mirror":["67.0"],"镜像":["67.0"],"远程用户":["67.0"],"访问时从":["67.0"],"gtld":["68.0"],"域名解析服务器地址":["68.0"],"向":["68.0"],"请求携带的参数一般是写在":["69.0"],"报文中":["69.0"],"使得报文能够密文传输":["70.0"],"连接建立相对简单":["70.0"],"三次握手之后就可以进行":["70.0"],"然后生成一个新的随机数":["70.3"],"premaster":["70.3"],"secret":["70.3"],"并使用数字证书中的公钥":["70.3"],"对称密钥加密和非对称密钥加密它们有什么区别":["70.4"],"对称密钥加密是最简单的一种加密方式":["70.4"],"它的加解密用的都是相同的密钥":["70.4"],"这样带来的好处就是加解密效率很快":["70.4"],"但是并不安全":["70.4"],"如果有人拿到了这把密钥那谁都可以进行解密了":["70.4"],"而非对称密钥会有两把密钥":["70.4"],"一把是私钥":["70.4"],"只有自己才有":["70.4"],"一把是公钥":["70.4","85.2"],"hmac":["70.5"],"sha256":["70.5"],"对":["70.5","89.2"],"头部信息也是":["71.1"],"key":["71.1","85.3"],"value":["71.1"],"的状态":["71.2","74.6"],"为了解决这个问题":["71.3"],"提出了长连接的方式":["71.3"],"减少了":["71.3"],"连接的重复建立和断开所造成的额外开销":["71.3"],"可以将重定向的工作交给代理服务器":["71.4"],"就能减少":["71.4"],"合并请求":["71.4"],"就是把多个访问小文件的请求合并成一个大的请求":["71.4"],"虽然传输的总资源是一样的":["71.4"],"但是减少请求":["71.4"],"就意味着减少了重复发送的":["71.4"],"http1":["71.4","78.1"],"中是请求响应模型":["71.4"],"默认不开启管道模式":["71.4"],"所以也存在队头阻塞问题":["71.4"],"如果合并了请求":["71.4"],"就会减少":["71.4"],"tcp":["71.4","74.5"],"连接的数量":["71.4"],"节省":["71.4"],"将":["71.6","95.0","98.1"],"的文本格式改成二进制帧格式传输数据":["71.6"],"极大的提高了":["71.6"],"传输的效率":["71.6"],"h2":["71.6"],"将响应报文划分成了两类帧":["71.6"],"headers":["71.6"],"首部和":["71.6"],"消息负载":["71.6"],"就是说一条":["71.6"],"响应":["71.6"],"划分成了两类帧来传输":["71.6"],"采用二进制编码":["71.6"],"并发传输":["71.6"],"是基于请求":["71.6"],"响应模型实现的":["71.6"],"在同一个连接中":["71.6"],"完成一个请求":["71.6"],"才能处理下一个":["71.6"],"也就是说在发出请求等待响应的过程中":["71.6"],"length":["72.0","111.0","127.0","134.2"],"服务器在返回数据的时候":["72.0"],"用户就可以在不用再次登录的情况下访问应用系统":["73.0"],"和应用系统":["73.0"],"了":["73.0"],"需要注意两点":["73.0"],"系统共享":["73.0"],"统一的认证系统":["73.0"],"共享内存":["74.0"],"信号":["74.0"],"面向连接":["74.1","74.8"],"发送方不会超过接收方指定的窗口大小发送数据":["74.2"],"超时重传":["74.2"],"在发送某一个数据之后就开启一个定时器":["74.2"],"在一定的时间内如果没有收到发送的数据包的":["74.2"],"ack":["74.2"],"报文":["74.2"],"就会重新发送":["74.2"],"直到发送成功为止":["74.2"],"拥塞控制":["74.2"],"通过观察感知网络的拥塞状态":["74.2"],"确认应答号":["74.3"],"指下一次期望收到的数据的序列号":["74.3"],"发送端收到这个确认应答以后可以认为在这个序号以前的数据都已经被正常接收":["74.3"],"不能保证网络包的交付":["74.4"],"不保证网络包的按序交付":["74.4"],"服务端收到客户端的":["74.5"],"服务端随机初始化自己的序列号":["74.5"],"将这个序列号填入":["74.5"],"首部的序号字段":["74.5"],"和客户端的第一次挥手一样":["74.6"],"发给":["74.6"],"且指定一个序列号":["74.6"],"last":["74.6"],"第四次挥手":["74.6"],"只能够存在一台服务器上":["74.7"],"如果我们的请求通过负载平衡被转移到了其他的服务器上":["74.7"],"那么就无法恢复对话":["74.7"],"不会丢失数据因此适合大数据量的交换":["74.8"],"是面向字节流":["74.8"],"面向报文":["74.8"],"并且网络出现拥塞不会使得发送速率降低":["74.8"],"因":["74.8"],"还需要后续的操作":["75.0"],"no":["75.1"],"永久重定向":["75.2"],"说明请求的资源已经不存在了":["75.2"],"需要用新的url再次访问":["75.2"],"forbidden":["75.3"],"表示客户端请求的功能还不支持":["75.4"],"x":["76.0","92.8","92.9"],"www":["76.0"],"urlencoded":["76.0"],"当服务器收到客户端发来的请求后":["77.0"],"服务器端不会直接进行响应":["77.0"],"而是先将":["77.0"],"这个请求挂起":["77.0"],"然后判断服务器端数据是否有更新":["77.0"],"如果有更新":["77.0"],"则进行响应":["77.0"],"如果一直没有数据":["77.0"],"所以缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面":["78.0"],"浏览器缓存机制有四个方面":["78.0"],"按照获取资源时请求的优先级排序":["78.0"],"memory":["78.0"],"就会无法达到预期":["78.1"],"所以在":["78.1"],"增加了":["78.1"],"这个字段来代替":["78.1"],"使用":["78.1","78.2","81.6"],"max":["78.1"],"age":["78.1"],"来控制资源的有效期":["78.1"],"不会再添加":["78.2"],"字段":["78.2"],"会有两个弊端":["78.2"],"比如我们编辑了文件":["78.2"],"但是文件的内容没有改变":["78.2"],"但是当":["78.3"],"tab":["78.3"],"关闭的时候":["78.3"],"内存中的数据也会消失":["78.3"],"base64":["78.3","96.3"],"格式的图片":["78.3"],"几乎都是放进":["78.3"],"体积不大的":["78.3"],"请求上":["78.5"],"在浏览器和服务器之间进行传递":["78.5"],"可以携带用户信息":["78.5"],"当服务器检查":["78.5"],"常用于存储一些内容稳定的资源":["78.6"],"无法共享":["78.7"],"当数据的复杂度和规模上升到了":["78.8"],"把资源":["78.9"],"copy":["78.9"],"只要我们在页面打开的时候把首屏的资源加载出来":["79.0"],"用户就会认为页面是没问题的":["79.0"],"下面的图片":["79.0"],"可以等到用户下拉的瞬间再去请求":["79.0"],"防抖":["79.1"],"不需要为了生成":["80.0"],"内容自己再去跑一遍":["80.0"],"代码":["80.0","80.1"],"使用服务端渲染很多是因为网站的":["80.0"],"编译执行":["80.1"],"以创建的是":["80.1"],"所以将":["80.2"],"放在":["80.2"],"head":["80.2","140.0"],"标签中":["80.2"],"会阻塞":["80.2"],"引擎是独立于渲染引擎的":["80.2"],"当":["80.2"],"解析器遇到应该":["80.2"],"script":["80.2","93.24"],"重绘":["80.3"],"的修改导致了样式的变化":["80.3"],"却并未影响其几何属性时":["80.3"],"对于":["81.0"],"exclude":["81.2"],"帮我们避免不必要的转译":["81.2"],"或者通过开启缓存将转译结果缓存至文件系统":["81.2"],"join":["81.3"],"dirname":["81.3"],"dist":["81.3"],"filename":["81.3","150.4"],"name":["81.3"],"library":["81.3"],"hash":["81.3"],"plugins":["81.3"],"dllplugin的name属性需要和libary保持一致":["81.3"],"cpu":["81.4","93.21"],"是多核的":["81.4"],"可以在编译的过程中知道哪些模块并没有被真正的使用":["81.5"],"这些没用的代码":["81.5"],"在最后打包的时候会被去除":["81.5"],"按需加载":["81.5"],"一次不加载完所有的文件内容":["81.5"],"只加载此刻需要用到的那部分":["81.5"],"当需要更多内容时":["81.5"],"再对用到的内容进行即时加载":["81.5"],"的配置文件中":["81.5"],"所以说文件中代码的重复率越高":["81.6"],"压缩的效率就越高":["81.6"],"的收益也就越大":["81.6"],"一般来说":["81.6"],"在计算机中":["81.7"],"像素是用二进制表示的":["81.7"],"不同的图片格式中像素与二进制位数之间的对应关系是不同的":["81.7"],"一个像素对应的二进制位数越多":["81.7"],"可以呈现多达":["81.8"],"万中颜色":["81.8"],"一般场景下足以应对":["81.8"],"适用于呈现色彩丰富的图片":["81.8"],"万种颜色":["81.9"],"图片具有比":["81.9"],"jpg":["81.9","81.10"],"更强的色彩表现力":["81.9"],"文件体积更小":["81.10"],"可压缩性更强":["81.10"],"最显著的优势是可以无限放大不失真":["81.10"],"而且因为":["81.10"],"从而减少":["81.11"],"http":["81.11","93.25"],"请求的次数":["81.11"],"编码之后":["81.11"],"图片的大小会膨胀为原文件的":["81.11"],"编码同样质量的":["81.12"],"文件会占用更多的计算资源":["81.12"],"应用场景":["81.12"],"在站点先进行兼容性的预判":["81.12"],"进行验证":["82.0"],"或限制长度":["83.0"],"对单引号和双":["83.0"],"进行转换等":["83.0"],"永远不要使用动态拼装":["83.0"],"攻击者在论坛中放一个看似安全的链接":["84.0"],"骗取用户点击后":["84.0"],"窃取":["84.0"],"非对称解密":["85.1"],"可以发布给任何人":["85.2"],"客户端解析证书拿到公钥":["85.3"],"生成随机的":["85.3"],"连接":["85.4"],"和服务端之之间使用对称加密进行数据传输":["85.4"],"拿到服务端的响应数据":["85.4"],"可访问目录下":["86.0"],"账号不断尝试":["87.0"],"depp":["88.0"],"没有缓存性":["88.1"],"更多的是观察的作用":["88.1"],"可以监听某些数据执行回调":["88.1"],"当我们需要深度监听对象中的属性时":["88.1"],"每个":["88.2"],"属性都是一个":["88.2"],"watch":["88.2"],"实例":["88.2"],"对应原理如下":["88.3"],"深度监听对象":["88.3"],"为对象的每一个属性创建一个":["88.3"],"接收":["89.0"],"path":["89.1","89.2","89.5","89.10"],"query":["89.1"],"params":["89.1"],"在安卓上有问题是":["89.3"],"改变":["89.4"],"值":["89.4"],"我们可以使用":["89.4"],"hashchange":["89.4"],"事件来监听":["89.4"],"值的变化":["89.4"],"从而对页面进行跳转":["89.4"],"渲染":["89.4"],"addeventlistener":["89.4"],"funcref":["89.4"],"每一次改变":["89.4"],"to":["89.5"],"属性定义跳转":["89.5"],"实际上也可以通过":["89.5"],"custom":["89.5"],"和插槽自定义最终的展现形式":["89.5"],"唯一不同的是":["89.6"],"前者是新增一个历史记录":["89.6"],"后者是直接替换当前的历史记录":["89.6"],"利用自定义事件":["89.7"],"beforeeach":["89.8"],"可以注册一个全局前置守卫":["89.8"],"每次路由导航都会经过这个守卫":["89.8"],"因此在其内部可以加入控制逻辑决定用户是否可以导航到目标路由":["89.8"],"在路由注册的时候可以加入单路由独享的守卫":["89.8"],"给":["89.9"],"component":["89.9"],"选项配置一个返回":["89.9"],"组件的函数就可以定义懒加载路由":["89.9"],"popstate":["89.10"],"事件":["89.10"],"回调里根据":["89.10"],"只能劫持对象的属性":["90.0"],"从而需要对每个对象":["90.0"],"每个属性进行遍历":["90.0"],"如果属性值是对象":["90.0"],"底层采用":["90.1"],"可以在回调函数中处理多个函数的变化情况":["90.2"],"只处理函数内部使用的响应式数据":["90.2"],"几乎是函数":["90.3"],"会有更好的类型推断":["90.3"],"proxy":["90.4","92.9"],"等":["90.4"],"beforedestroy":["90.5"],"改为":["90.5"],"无需使用":["90.6"],"usememo":["90.6"],"usecallback":["90.6"],"避免子组件重复渲染":["90.6"],"在框架层面也有很多亮眼的改进":["90.7"],"更快":["90.7"],"虚拟":["90.7","92.8"],"重写":["90.7"],"diff":["90.7","90.8"],"算法优化":["90.7"],"比如":["90.8"],"静态标记":["90.8"],"pachflag":["90.8"],"算法增加了一个静态标记":["90.8"],"是一个对象":["90.9"],"不丢失响应式":["90.9"],"存储值":["90.9"],"通过":["90.9"],"属性的":["90.9"],"中没有":["90.10"],"需要浅拷贝对象之后更改":["91.0"],"需要直接修改状态则提交":["91.1"],"但由于":["91.1"],"dispatch":["91.1"],"commit":["91.1"],"是两个":["91.1"],"api":["91.1"],"容易引起混淆":["91.1"],"实践中也会采用统一使用":["91.1"],"方式":["91.2"],"可以调用":["91.2"],"cb":["91.2"],"的初始值即可":["91.3"],"这里有两个问题":["91.3"],"不是所有状态都需要持久化":["91.3"],"如果需要保存的状态很多":["91.3"],"为什么要使用":["91.4"],"vue2":["91.4"],"都支持":["91.4"],"这让我们同时使用":["91.4"],"的小伙伴都能很快上手":["91.4"],"可以定义":["91.5"],"类":["91.5"],"构造函数接收选项":["91.5"],"options":["91.5"],"设置属性":["91.5"],"state":["91.5"],"defineproperty":["92.0","92.7"],"是":["92.1"],"createcompiler":["92.1"],"的返回值":["92.1"],"是用以创建编译器的":["92.1"],"另外":["92.1"],"比如有一次操作":["92.3"],"需要更新":["92.3"],"个":["92.3"],"浏览器收到第一个更新":["92.3"],"请求后":["92.3"],"采用重写数组的方法来实现":["92.4"],"去更新":["92.5"],"默认在初始化的时候会调用":["92.5"],"当前节点和旧节点头尾交叉对比没有结果时":["92.6"],"会根据新节点的":["92.6"],"去对比旧节点数组中的":["92.6"],"从而找到相应的旧节点":["92.6"],"如果没有找到就认为是一个新增节点":["92.6"],"如果没有":["92.6"],"就会采用遍历查找的方式去找到对应的旧节点":["92.6"],"数组采用方法重写":["92.7"],"再看一下用户是否传入了":["92.7"],"el":["92.7"],"属性和":["92.7"],"template":["92.7","93.24"],"snabbdom":["92.8"],"修改而来":["92.8"],"要想转化为真实":["92.8"],"就需要通过":["92.8"],"patch":["92.8"],"方法转换":["92.8"],"最初":["92.8"],"vue1":["92.8"],"视图中每个依赖均有更新函数对应":["92.8"],"可以做到精准更新":["92.8"],"因此并不需要虚拟":["92.8"],"vue3":["92.9"],"改用":["92.9"],"替代":["92.9"],"可以直接监听对象和数组的变化":["92.9"],"并且有多达":["92.9"],"种拦截方法":["92.9"],"并且作为新标准将受到浏览器厂商重点持续的性能优化":["92.9"],"回答范例":["92.9"],"所谓数据响应式就是":["92.9"],"能够使数据变化可以被检测并对这种变化做出响应的机制":["92.9"],"建立更新机制":["92.10"],"初始化会创建组件实例":["92.10"],"当数据发生了变化时":["92.11"],"首先调用":["92.11"],"deo":["92.11"],"notify":["92.11"],"开发时":["92.12"],"有两个场景我们会用到":["92.12"],"created":["92.12"],"中想要获取":["92.12"],"响应式数据变化后获取":["92.12"],"textarea":["92.13"],"select":["92.13"],"等元素上创建双向数据绑定":["92.13"],"n3":["92.14"],"vue":["92.14","93.18"],"更关注结果":["93.0"],"收到":["93.0"],"文件在使用的时候实际上会转换成一个":["93.1"],"class":["93.1"],"由":["93.2"],"变为":["93.2"],"true":["93.2","105.0"],"的时候不会触发组件的生命周期":["93.2"],"的时候":["93.2"],"输出的渲染函数中可以看出会先执行循环再判断条件":["93.3"],"哪怕只渲染列表中一小部分元素":["93.3"],"也得在每次重新渲染的时候遍历整个列表":["93.3"],"这会比较浪费":["93.3"],"先给标签设置一个":["93.4"],"管的":["93.5"],"所以写的代码在还没有解析的情况下会容易出现花屏现象":["93.5"],"看到类似":["93.5"],"就不需要放入":["93.6"],"不会因为用户的操作进行页面的重新加载或跳转":["93.7"],"而是利用路由机制实现":["93.7"],"内容的变换":["93.7"],"ui":["93.7"],"是否发生重复请求":["93.8"],"加载脚本的时候":["93.8"],"渲染内容堵塞":["93.8"],"允许组件有条件的进行缓存":["93.9"],"两者都支持字符串或正则表达式":["93.9"],"表示只有名称匹配的组件会被缓存":["93.9"],"表示任何名称匹配的组件都不会被缓存":["93.9"],"内部会用它来处理":["93.10"],"设计的每一个组件一个":["93.11"],"watcher":["93.11"],"没有采用一个属性对应一个":["93.11"],"原理类似":["93.12"],"对象的继承":["93.12"],"当组件初始化时会调用":["93.12"],"层的桥梁":["93.13"],"模式不需要用户手动的去操作":["93.13"],"元素":["93.13"],"将数据绑定到":["93.13"],"组件也会转换为一个":["93.14"],"中之所以可以写多个根节点":["93.14"],"的方式调用外部传入的事件":["93.15"],"因为函数式组件是没有实例化的":["93.15"],"所以在外部通过":["93.15"],"ref":["93.15"],"去引用组件时":["93.15"],"实际引用的是":["93.15"],"htmlelement":["93.15"],"这里会包含所有父作用域的绑定":["93.16"],"并且可以通过":["93.16"],"v":["93.16"],"bind":["93.16","102.0"],"传入内部组件":["93.16"],"通常配合":["93.16"],"inheritattrs":["93.16"],"选项一起使用":["93.16"],"多余的属性不会被解析到标签上":["93.16"],"包含了父作用域中的":["93.16"],"不含":["93.16"],"native":["93.16"],"修饰器的":["93.16"],"是分发":["93.17"],"组件中可复用功能的非常灵活的方式":["93.17"],"会在浏览器控制台中发出警告":["93.18"],"实际开发过程中有两个场景会想要修改一个属性":["93.18"],"这个":["93.18"],"过滤器":["93.19"],"过渡等":["93.19"],"touch":["93.19"],"通过全局混入来添加一些组件选项":["93.19"],"router":["93.19"],"添加":["93.19","150.13"],"实例方法":["93.19"],"通过把它们添加到":["93.19"],"修饰符":["93.20"],"相同点":["93.20"],"都是语法糖":["93.20"],"都可以实现父子组件中的数据的双向通信":["93.20"],"区别点":["93.20"],"服务端渲染应用程序也需要处于":["93.21"],"node":["93.21"],"的运行环境":["93.21"],"服务器会有更大的负载需求":["93.21"],"中渲染完整的应用程序":["93.21"],"显然会比仅仅提供静态文件的":["93.21"],"server":["93.21"],"更加大量占用":["93.21"],"资源":["93.21"],"intensive":["93.21"],"密集":["93.21"],"因此如果你预料在高流量环境":["93.21"],"high":["93.21"],"traffic":["93.21"],"下使用":["93.21"],"请准备相应的服务器负载":["93.21"],"并明智地采用缓存策略":["93.21"],"其基本实现原理":["93.21"],"app":["93.21"],"只是被删除的元素变成了":["93.22"],"empty":["93.22"],"box":["93.23"],"获取子组件中的":["93.23"],"代码会异常清晰":["93.24"],"结合其他":["93.24"],"我们还可以用":["93.24"],"工具我会选":["93.25"],"axios":["93.25"],"其他比较常用的库有":["93.25"],"vueuse":["93.25"],"nprogress":["93.25"],"图标可以使用":["93.25"],"svg":["93.25"],"loader":["93.25"],"下面是代码规范":["93.25"],"更改数据":["94.0"],"在这里更改数据不会触发":["94.0"],"函数":["94.0"],"可以做一些初始化数据的获取":["94.0"],"当前阶段不能和":["94.0"],"进行交互":["94.0"],"但是可以通过":["94.0"],"vm":["94.0"],"nexttick":["94.0"],"来访问":["94.0"],"之后触发钩子函数":["94.0"],"所以可以访问到":["94.0"],"确保在销毁实例时不会触发不必要的回调或产生不稳定的行为":["94.1"],"清理订阅":["94.1"],"如果使用了观察者模式或者订阅发布模式":["94.1"],"子组件更新过程":["94.2"],"beforeupdate":["94.2"],"如果需要在组件实例被创建时立即获取数据并且不依赖于":["94.3"],"转化成":["95.0"],"ast":["95.0"],"抽象语法树":["95.0"],"任何非":["96.0"],"document":["96.1"],"createelement":["96.1"],"链":["96.2"],"类似":["96.3"],"区别是用户可以设置一个阈值":["96.3"],"大于阈值交给":["96.3"],"处理":["96.3"],"小于阈值返回文件的":["96.3"],"编码":["96.3"],"通过compiler获取webpack内部的钩子":["97.2"],"hooks":["97.2"],"done":["97.2"],"找到依赖关系":["98.0"],"babel":["98.1"],"babylon":["98.1"],"代码转化为":["98.1"],"ast抽象语法树":["98.1"],"webpack":["99.0","150.0"],"打包的":["99.0"],"chunk":["99.0"],"编译后浏览器替换修改的模块":["100.0"],"再去启动":["100.1"],"建立本地服务和浏览器的双向通信":["100.1"],"每次编译后":["100.1"],"setrequestheader":["101.0"],"application":["101.0"],"json":["101.0"],"mybind":["102.0"],"args1":["102.0"],"首先需要进行判断":["102.0"],"如果调用者不是函数":["102.0"],"直接抛出异常":["102.0"],"fn":["103.0"],"of":["103.0"],"proto":["104.0"],"getprototypeof":["104.0"],"sleepwrapper":["105.0"],"return":["105.0","106.0","108.2","109.0","113.0","115.0","116.0","122.1","132.0","134.2","145.0"],"链式调用":["105.0"],"sleepfirst":["105.0"],"delete":["106.0"],"set":["106.0"],"创建一个新对象":["107.0"],"关联到构造函数的原型":["107.0"],"obj":["107.0","118.0"],"create":["107.0"],"error":["108.0"],"保证rejecttask事件注册成功":["108.0"],"关键代码":["108.0"],"执行fn函数":["108.0"],"then":["108.1"],"res":["108.1","132.0","133.0"],"catch":["108.1"],"err":["108.1"],"all静态方法":["108.1"],"返回promises列表中全部执行完的结果":["108.1"],"resolve":["108.2"],"reject":["108.2"],"clear":["109.0"],"返回清除定时器的方法":["109.0"],"cleartimeout":["109.0"],"temp":["112.0","140.0"],"treedata":["112.0"],"i":["112.0","125.0","130.0","134.2"],"使用数组的filter方法":["113.0"],"过滤掉要取消订阅的回调函数":["113.0"],"实现代码":["114.0"],"真正的渲染函数":["114.0"],"render":["114.0"],"vnode":["114.0"],"如果是数字类型转化为字符串":["114.0"],"if":["114.0","122.1","125.0","127.0","132.0","134.2","145.0"],"typeof":["114.0"],"number":["114.0"],"string":["114.0","132.0"],"else":["115.0","116.0"],"push":["115.0","116.0"],"注意差别在这行":["117.0"],"我们对内层循环的范围作了限制":["117.0"],"初始化":["117.1"],"为当前区间第一个元素":["117.1"],"j分别定义当前区间的上下界":["117.1"],"j":["117.2"],"判断":["117.2"],"前面一个元素是否比":["117.2"],"pivotindex":["117.3"],"partition":["117.3"],"对枢轴左侧和右侧的子数组分别进行快速排序":["117.3"],"合并左右两个有序数组":["117.4"],"mergearr":["117.4"],"返回合并后的结果":["117.4"],"arr1":["117.4"],"arr2":["117.4"],"初始化两个指针":["117.4"],"分别指向":["117.4"],"方法3":["118.0"],"使用对象":["118.0"],"newobj":["120.0"],"array":["120.0"],"isarray":["120.0"],"上一次执行":["122.0"],"的时间":["122.0"],"previous":["122.0"],"timer":["122.1"],"null":["122.1","146.0"],"args":["122.1"],"题目主要来源于代码随想录":["123.0"],"解题思路":["124.0","126.0","135.0","136.0","138.0","146.0"],"使用双指针的方法":["124.0"],"一个指针指向首元素":["124.0"],"一个指针指向尾元素":["124.0"],"翻转单词":["125.0"],"中的分隔符替换为空格":["126.0"],"请返回加密后的字符串":["126.0"],"遍历":["126.0"],"如果当前遍历元素为":["126.0"],"将其替换为空格":["126.0"],"len":["127.0","141.0"],"break":["127.0"],"哈希":["128.0"],"set1":["128.0"],"set2":["128.0"],"twosum":["129.0"],"map":["129.0","131.0"],"sort":["130.0"],"continue":["130.0"],"summap":["131.0"],"count":["131.0"],"dfs":["132.0"],"map1":["133.0"],"transmap":["133.0"],"map2":["133.0"],"equalmap":["133.0"],"不断缩小查找区间":["134.0"],"更新中间元素为":["134.1"],"mid":["134.1"],"排序":["135.0"],"看到这个题目的第一个思路就是遍历数组":["135.0"],"将数组中每一个元素平方":["135.0"],"然后对数组使用":["135.0"],"额外空间并":["136.0"],"修改输入数组":["136.0"],"元素的顺序可以改变":["136.0"],"你不需要考虑数组中超出新长度后面的元素":["136.0"],"题目要求原地移除":["136.0"],"考虑使用双指针方法":["136.0"],"num":["137.0"],"while":["137.0","140.0"],"滑动窗口":["138.0"],"minlen":["138.0"],"infinity":["138.0"],"listnode":["140.0"],"获取链表的长度":["141.0"],"getlen":["141.0"],"计算要删除的节点再正向遍历中的位置":["141.0"],"targetn":["141.0"],"评测系统内部使用整数":["142.0"],"pos":["142.0"],"来表示链表尾连接到链表中的位置":["142.0"],"索引从":["142.0"],"开始":["142.0"],"如果":["142.0"],"当下一个节点的":["144.0"],"target":["144.0"],"让下一个节点的":["144.0"],"next":["144.0","145.0"],"指向":["144.0"],"getintersectionnode":["146.0"],"安装":["150.0"],"development":["150.1"],"模式":["150.1"],"默认两种":["150.1"],"production":["150.1"],"minicssextractplugin":["150.4"],"main":["150.4"],"plugin":["150.5"],"优化项":["150.6"],"minimizer":["150.6"],"文件转换成":["150.7","150.10"],"这种语法的":["150.8"],"插入到":["150.9"],"preset":["150.12"]},{"0":["6.10","6.13","6.21","33.0","44.1","65.15","117.2","122.0","124.0","129.0","133.0","143.0","144.0"],"1":["19.0","24.2","61.6","74.8","106.0","127.0","134.1","142.0"],"2":["9.0","61.6","64.4","66.0","71.6","89.4","89.10","95.0"],"3":["33.0","36.0","39.0","61.6","62.3","64.1","69.0","81.11","92.10","93.19","98.1"],"4":["31.0","34.0","40.0","61.6","92.12","101.0"],"5":["67.0","81.5","85.3"],"6":["93.15","93.25"],"7":["92.4","93.25"],"8":["57.0"],"9":["92.3"],"10":["65.16"],"32":["65.6"],"64":["65.11"],"302":["75.2"],"502":["75.4"],"端":["5.0"],"用户是否将浏览器全屏也是个问题":["5.0"],"不同屏幕分辨率也不同":["5.0"],"的约束":["5.1"],"img":["5.1"],"来标记图像背景尺寸":["5.1"],"适用于图片尺寸自适应":["5.1"],"overflow":["5.1","6.26"],"x":["5.1","13.4"],"排版横向列表":["5.1"],"flexbox":["5.1"],"或":["5.1","6.10"],"inline":["5.1","17.1"],"block":["5.1","17.1"],"的形式横行排列元素":["5.1"],"且属性会继承":["6.2"],"会影响后代行内内容":["6.2"],"如果子元素宽度大于父元素宽度就会失效":["6.2"],"宽度要小于父元素":["6.3"],"否则无效":["6.3"],"css":["6.3","41.1","96.1","150.10"],"align对其生效":["6.4"],"优点":["6.4","6.6","73.0","93.7"],"兼容性好":["6.4"],"00ff00":["6.5"],"简单":["6.6"],"与height等值":["6.8"],"元素在页面呈现为5行":["6.9"],"则line":["6.9"],"height的值为height":["6.9"],"兼容性不好":["6.10"],"ie9":["6.10"],"当":["6.10"],"为":["6.10","65.16","74.3","122.1"],"时":["6.10","88.0","90.9"],"会无限延伸占满空间并且平分":["6.10"],"self":["6.11"],"font":["6.13","44.1"],"size":["6.13","44.1"],"text":["6.14","96.1"],"center":["6.14"],"如果是行内元素就添加这个":["6.14"],"定宽高时等同于margin":["6.15"],"负自身宽度一半":["6.15"],"height":["6.16","6.19","6.22","22.1","22.2"],"50px":["6.16"],"top":["6.16"],"align":["6.17","13.4","24.1"],"items":["6.17","24.1"],"width":["6.19","6.20","6.21","6.27"],"100px":["6.19","6.27","39.0"],"color":["6.20","6.21"],"f00":["6.20","6.21"],"background":["6.21","6.27"],"500px":["6.22"],"display":["6.22","17.1","41.1"],"10px":["6.23","6.24","6.27"],"只设置浮动":["6.23"],"不设宽度":["6.24"],"margin":["6.24","6.27","34.0"],"间距":["6.27"],"user":["9.0"],"scalable":["9.0"],"no":["9.0"],"fastclick":["9.0"],"js":["9.0","65.11","96.3","126.0","135.0","144.0","150.13"],"才能开始渲染":["10.0"],"因此":["10.0"],"加载是会阻塞":["10.0"],"的渲染的":["10.0"],"可能会操作之前的":["10.0"],"节点和":["10.0"],"样式":["10.0"],"因此浏览器会维持":["10.0"],"中":["10.0","19.0"],"带宽":["11.0"],"webkit":["12.0","18.2","38.0"],"blink":["12.0"],"segmentfault":["13.0"],"同源策略就是浏览器的一种重要的安全策略":["13.1"],"通过限制不同源之间的资源不能相互访问来保证浏览器的安全":["13.1"],"同源策略限制的内容":["13.1"],"cookie":["13.1"],"wd":["13.3"],"b":["13.3"],"show":["13.3"],"arrs":["13.3"],"for":["13.3","129.0","133.0","135.0","141.0"],"key":["13.3","120.0"],"in":["13.3","112.0","120.0"],"multipart":["13.4"],"form":["13.4"],"data":["13.4","54.1","93.10","93.18","119.0"],"application":["13.4"],"拿到服务器响应数据":["13.5"],"响应处理":["14.0"],"检查响应类型":["14.0"],"content":["14.0","41.1","75.1"],"type":["14.0","54.3","72.0","96.1"],"如果是字节流类型":["14.0"],"则将该请求提交给下载管理器":["14.0"],"该导航流程结束":["14.0"],"不再进行后续的渲染":["14.0"],"html":["14.0","71.4"],"则通知浏览器进程准备渲染进程准备进行渲染":["14.0"],"准备渲染进程":["14.0"],"浏览器进程检查当前":["14.0"],"是否和之前打开的渲染进程根域名是否相同":["14.0"],"如果相同":["14.0"],"则复用原来的进程":["14.0"],"是进程内的最小执行单位":["15.1"],"是进程的一部分":["15.1"],"一个进程可以包含多个线程":["15.1"],"转换为用户可以与之交互的网页":["15.2"],"gpu":["15.2"],"进程":["15.2"],"与其他区域相互隔离":["17.0"],"的边界会包裹浮动元素":["17.2"],"垂直外边距重叠":["17.2"],"在同一个":["17.2","71.3"],"input":["18.2"],"hidden":["19.0"],"是一样的":["19.0"],"chrome":["19.0"],"使用":["19.0","55.1","93.21"],"圆角边框":["20.0"],"边框图像":["20.0"],"减少选择器的复杂性":["21.0"],"避免使用":["21.0"],"weight":["22.0","22.1"],"大小由内容撑开":["22.0"],"当空间不足时":["23.0"],"缩小的比例相同":["23.0"],"空间不足时":["23.0"],"该项目不会缩小":["23.0"],"它的所有子元素自动成为容器成员":["24.0"],"两端对齐":["24.1"],"项目之间的间隔相等":["24.1"],"around":["24.1"],"两个项目两侧间隔相等":["24.1"],"定义在交叉轴上的对齐方式":["24.1"],"交叉轴起点对齐":["24.1"],"都为":["24.2"],"等分剩余空间":["24.2"],"shrink":["24.2"],"css2":["25.0"],"才有的语法":["25.0"],"故只可在":["25.0"],"ie5":["25.0"],"它们发生重叠一个是因为它们相":["26.0"],"邻":["26.0"],"一个是因为父元素的高度不固定":["26.0"],"因此我们可以为父元素设置":["26.0"],"直到相对于":["27.0"],"大小来计算":["28.0"],"vh":["28.0"],"viewport":["28.0"],"来绘制图形":["29.0"],"需要重新绘制才能进行修改":["29.0"],"需要在特定状态触发后才能执行":["30.0"],"animation":["30.0"],"绝对定位":["31.0"],"父元素设置为相对定位":["31.0"],"左边元素设置为绝对定位":["31.0"],"右边元素的":["31.0"],"设置为":["31.0"],"来描述这个元素的状态":["32.0"],"双冒号":["32.0"],"读屏器会读取":["33.0"],"opacity":["33.0"],"auto":["34.0","39.0"],"资源预加载":["35.0"],"这样即使外部样式表加载延迟":["36.0"],"页面仍然可以有基本的样式展示":["36.0"],"避免出现完全无样式的情况":["36.0"],"使用样式预加载":["36.0"],"如果需要手写编写动画":["37.0"],"可以将最小时间间隔设置为":["37.0"],"box":["38.0","43.0"],"line":["38.0"],"clamp":["38.0"],"负值":["39.0"],"必须定宽高":["39.0"],"如果元素为绝对定位":["40.0"],"position":["40.0"],"所以父元素在计算高度的时候并没有将浮动元素的高度计算出来":["41.0"],"伪元素":["41.1"],"outer":["41.1"],"after":["41.1","105.0"],"border":["42.0"],"可以通过":["43.0","61.3"],"sizing":["43.0"],"属性来改变元素的盒模型":["43.0"],"而文本节点默认会应用一定的样式":["44.0"],"导致":["44.0"],"父元素设置":["44.1"],"伪元素选择器":["45.0"],"后代选择器":["45.0"],"属性选择器":["45.1"],"伪类选择器":["45.1"],"标签选择器":["45.1"],"前者回调函数中的":["46.0"],"this":["46.0","64.5"],"指向当前元素":["46.0"],"这意味着如果脚本的加载速度很快":["47.0"],"可能会在页面的其他资源加载之前执行":["47.0"],"导致可能的依赖问题":["47.0"],"脚本的执行时机是在文档解析完毕后":["47.0"],"domcontentloaded":["47.0"],"id":["48.0","89.2","89.9"],"来实现":["48.0"],"video":["49.0"],"canvas":["49.0"],"画布":["49.0"],"拖拽元素":["49.0"],"代码复用":["50.0"],"可以将共享的内容嵌套在多个页面中":["50.0"],"mobile":["51.0"],"number":["51.0","65.8"],"以备将来可能需要用到":["52.0"],"适用于当前页面未使用但可能在后续页面或用户操作中可能会用到的资源":["52.0"],"preload":["52.0"],"预加载":["52.0"],"href":["53.0"],"指向网络资源所在位置":["53.0"],"建立和当前元素或当前文档之间的链接":["53.0"],"a":["53.0"],"link":["53.0"],"area":["53.0"],"处理接收到的消息":["54.1"],"发送消息":["54.1"],"send":["54.1"],"var":["54.2","126.0"],"val":["54.2"],"name":["54.3","81.5","89.5"],"就会有明显的语调上的变化":["55.1"],"标签则没有":["55.1"],"如果是搜索引擎的爬虫对我们的网页进行分析的话":["55.1"],"它会依赖":["55.1"],"侧边栏":["55.2"],"footer":["55.2"],"页脚":["55.2"],"figure":["55.2"],"对象":["57.0","81.5","91.2"],"用于更好地处理异步操作":["57.0"],"解决了回调地狱的问题":["57.0"],"并提供了更清晰的异步编程模式":["57.0"],"类和模块化":["57.0"],"es6":["57.0"],"引入了类的概念":["57.0"],"可以使用":["57.0","71.2","93.25","94.3"],"class":["57.0"],"关键字定义类":["57.0"],"await":["58.0"],"事件轮询执行时机":["58.0"],"隐式返回":["58.0"],"promise":["58.0","92.12","110.0"],"会产生一个微任务":["58.0"],"后面的代码是在微任务时执行":["58.0"],"event":["58.0"],"loop":["58.0"],"和浏览器更新渲染时机1":["58.0"],"浏览器更新渲染会在":["58.0"],"中的":["58.0","91.4"],"和":["58.0","59.0","70.1","74.5","90.9","91.5","92.9","117.4"],"使用let":["59.0"],"声明的变量不会被绑定到window上":["59.0"],"这里需要注意的时候":["59.0"],"true":["60.0","81.2","88.1"],"来阻止冒泡":["60.0"],"默认事件的话通过事件对象的":["60.0"],"之前的":["60.1"],"ie":["60.1"],"不支持":["60.1"],"方法":["60.1","61.6"],"而是设置事件对象":["60.1"],"cancelbubble":["60.1"],"属性为":["60.1"],"在块级作用域中":["61.3"],"也不能跨函数访问":["61.4"],"没有变量提升":["61.4"],"不能重复声明":["61.4"],"如果还没有找到":["61.5"],"一直找到全局上下文的变量对象":["61.5"],"后":["61.6"],"打印":["61.6"],"使用立即执行函数创建了闭包":["61.6"],"将当前的":["61.6"],"值传递给回调函数":["61.6"],"就会去原型的proto属性所指向的原型对象上去查找":["62.1"],"直到找到":["62.1"],"属性":["62.3"],"奔溃等问题":["63.0"],"有自动的垃圾回收机制":["63.1"],"当一个值":["63.1"],"如果发现有对象没有被标识为可到达对象":["63.2"],"那么就将此对象占用的内存回收":["63.2"],"weakset":["63.4"],"执行上下文就是指当前环境中的变量":["64.0"],"函数声明":["64.0"],"eval":["64.1"],"执行上下文":["64.1"],"全局上下文只有一个":["64.2"],"也就是":["64.2"],"每当":["64.3"],"引擎调用一个函数的时候":["64.3"],"会为该函数创建一个新的执行上下文并压入栈的顶部":["64.3"],"指向":["64.4"],"代码中":["64.5"],"动态语言":["65.0"],"object":["65.1"],"普通对象":["65.1"],"函数":["65.1","92.5"],"文件在不同模块":["65.2"],"值作为对象的属性名":["65.3"],"通过":["65.3","90.10","92.9"],"只需要在数字末尾追加":["65.4"],"来解除引用":["65.5"],"字面意思就是":["65.5"],"的最初版本中使用的是":["65.6"],"位系统":["65.6"],"引用数据类型用堆存储":["65.7"],"堆内存是动态分配":["65.7"],"都是":["65.8"],"nan":["65.8","65.12"],"instanceof":["65.8","102.0"],"value":["65.9","65.15","133.0"],"将要判断的变量作为参数传入":["65.9"],"并判断返回的字符串是否为":["65.9"],"if":["65.10","101.0","102.0","131.0"],"hasownproperty":["65.10","118.0","120.0"],"在转换为二进制表示的时候会出现位数无限循环的情况":["65.11"],"中是以":["65.11"],"位双精度格式来存储数字的":["65.11"],"只有":["65.11"],"的判断":["65.12"],"一般情况下和":["65.13"],"相同":["65.13"],"首先转换成布尔值":["65.14"],"false":["65.14"],"valueof":["65.15"],"且第一个参数不以":["65.16"],"0x":["65.16"],"开头时":["65.16"],"按照":["65.16"],"为基数返回":["65.16"],"本质上是健值对的集合":["65.17"],"activexobject":["66.0"],"microsoft":["66.0"],"xmlhttp":["66.0"],"兼容ie6及以下版本":["66.0"],"配置":["66.0"],"ajax请求地址":["66.0"],"open":["66.0"],"get":["66.0","90.9"],"但在某些方面功能较为简单":["66.1"],"需要进行封装来处理错误":["66.1"],"超时等情况":["66.1"],"是一个第三方库":["66.1"],"服务器上读取数据":["67.0"],"减少远程访问":["67.0"],"的带宽":["67.0"],"分担网络流量":["67.0"],"减轻原站点web":["67.0"],"负载等功能":["67.0"],"集群抗攻击":["67.0"],"广泛分布的":["67.0"],"服务器发起解析请求":["68.0"],"服务器接收请求并返回":["68.0"],"没有限制":["69.0"],"请求是安全且幂等的":["69.0"],"无论操作多少次":["69.0"],"的报文传输":["70.0"],"三次握手之后还需要进行":["70.0"],"tcp":["70.1"],"之间加入了":["70.1"],"加密这个随机数":["70.3"],"发给服务端":["70.3"],"第四步":["70.3"],"服务端使用自己的私钥":["70.3"],"可以发布给任何人":["70.4"],"并且加密的内容只有相匹配的密钥才能解":["70.4","85.2"],"这样带来的一个好处就是能保证传输的内容是安全的":["70.4","85.2"],"因为例如如果是公钥加密的数据":["70.4","85.2"],"就算是第三方截取了这个数据但是没有对应的私钥也破解不了":["70.4"],"不过它也有缺点":["70.4"],"一是公钥因为是公开的":["70.4"],"谁都可以过去":["70.4"],"如果内容是通过私钥加密的话":["70.4"],"那拥有对应公钥的黑客就可以用这个公钥来进行解密得到里面的信息":["70.4"],"payload":["70.5"],"如账号密码":["70.5"],"生成一个字符串":["70.5"],"简单文本的形式":["71.1"],"易于理解":["71.1"],"学习和使用的门槛低":["71.1"],"当要完成有关联性的操作时会麻烦":["71.2"],"减轻了服务器端的负载":["71.3"],"持久连接就是只要任意一端没有明确提出断开连接":["71.3"],"就会报错":["71.3"],"连接状态":["71.3"],"管道":["71.3"],"握手和慢启动过程耗费的时间":["71.4"],"常见的合并请求比如精灵图就是将请求多个小图片合并成请求成一张大的图片":["71.4"],"请求的次数":["71.4"],"减少网络开销":["71.4"],"延迟发送请求":["71.4"],"一个":["71.4"],"文件中会包含很多的":["71.4"],"如果是当前页面不需要的资源":["71.4"],"没必要一次性全部获取":["71.4"],"可以通过按需获取的方式":["71.4"],"减少第一时间的":["71.4"],"比如请求网页的时候":["71.4"],"就没有必要把全部的资源获取到":["71.4"],"是没办法做其它事情的":["71.6"],"如果响应迟迟不来":["71.6"],"后续的请求是无法发送的":["71.6"],"这就造成了队头阻塞的问题":["71.6"],"通过使用多个":["71.6"],"stream":["71.6"],"复用一条":["71.6"],"连接":["71.6"],"达到并发的效果":["71.6"],"连接包含一个或者多个":["71.6"],"是":["71.6","89.1","142.0"],"并发的关键技术":["71.6"],"里可以包含":["71.6"],"个或多个":["71.6"],"message":["71.6","93.5"],"对应":["71.6"],"表示本次回应的数据长度":["72.0"],"信息识别":["73.0"],"让应用系统能够识别已经登录过的用户":["73.0"],"其实要把":["73.0"],"发送到认证系统进行校验":["73.0"],"单点登录":["73.0"],"用户只需登录一次":["73.0"],"消息队列等方式":["74.0"],"而不同的设备之间想要进行通信":["74.0"],"一对一":["74.1"],"调整发送速度":["74.2"],"等特点":["74.2"],"基于这些特点能够保证数据包能够可靠的传输给对方":["74.2"],"所有是安全的":["74.2"],"可靠的":["74.2"],"只负责传输数据":["74.2"],"不保证数据能否抵达":["74.2"],"传输效率比较高":["74.2"],"实时性也比较好":["74.2"],"当应用传输的数据非常大的时候":["74.2"],"用来解决丢包问题":["74.3"],"控制位":["74.3"],"ack":["74.3","74.5"],"不保证网络包中数据的完整性":["74.4"],"如果需要保证网络数据包的可靠性":["74.4"],"置为":["74.5"],"最后把这个报文发给客户端":["74.5"],"服务端处于":["74.5"],"rcvd":["74.5"],"客户端收到":["74.6"],"一样发送一个":["74.6"],"报文作为应答":["74.6"],"且把服务端的序列号值":["74.6"],"作为自己":["74.6"],"ticket":["74.7"],"另一种方式是":["74.7"],"此会出现丢包":["74.8"],"对实时的应用比如":["74.8"],"ip":["74.8"],"电话和视频会议等":["74.8"],"只能是":["74.8"],"对":["74.8","90.3","98.1"],"但是响应头没有body数据":["75.1"],"found":["75.2"],"表示临时重定向":["75.2"],"表示服务器禁止访问资源":["75.3"],"不是客户端的请求出错":["75.3"],"通常是服务器作为网关或代理时返回的错误码":["75.4"],"复杂请求":["76.0"],"不符合以上条件的就是复杂请求":["76.0"],"复杂请求的":["76.0"],"cors":["76.0"],"则到达一定的时间限制才返回":["77.0"],"客户端":["77.0","93.21"],"javascript":["77.0","78.3"],"响应处理函数会在处理完服务器返回的信息后":["77.0"],"再次发出请求":["77.0"],"重新建立连接":["77.0"],"长轮询和短轮询比起来":["77.0"],"cache":["78.0"],"service":["78.0","78.3"],"worker":["78.0","78.3"],"不再是一个时间戳":["78.1"],"而是一个时间长度":["78.1"],"意味着该资源在当前时间长度内都是有效的":["78.1"],"这就完美规避了时间戳带来的潜在问题":["78.1"],"相对于":["78.1"],"更加准确":["78.1"],"优先级也更高":["78.1"],"两者同时出现":["78.1"],"以":["78.1","92.9"],"为准":["78.1"],"s":["78.1"],"服务端并不知道我们是否真正改变了文件":["78.2"],"它仍然通过最后编辑时间进行判断":["78.2"],"因此这个资源在再次被请求时":["78.2"],"会被当作新资源":["78.2"],"进而引发一次完整的响应":["78.2"],"不该重新请求的时候":["78.2"],"也会重新请求":["78.2"],"当我们修改文件的速度过快时":["78.2"],"由于":["78.2"],"只能检查到以秒为最小计量单位的时间差":["78.2"],"所以是感知不到这个改动的":["78.2"],"该请求的时候没有请求":["78.2"],"也可以放进去":["78.3"],"但是较大的":["78.3"],"就不可以了":["78.3"],"因为内存资源是有限的":["78.3"],"独立于主线程之外的":["78.3"],"线程":["78.3"],"脱离于浏览器窗体":["78.3"],"的时候":["78.5","136.0","150.4"],"就可以获取到客户端的状态":["78.5"],"有体积上限":["78.5"],"存储只适用于当前会话的信息":["78.7"],"相同点":["78.7"],"localstorage":["78.8"],"一份到":["78.9"],"服务器上的过程":["78.9"],"回源":["78.9"],"这个就是懒加载":["79.0"],"懒加载的实现有两个关键的数值":["79.0"],"一个是当前可视区域的高度":["79.0"],"const":["79.0","114.0","115.0","116.0","119.0"],"在一段时间内":["79.1"],"seo":["80.0"],"客户端渲染":["80.0"],"在搜索引擎搜索某个关键字":["80.0"],"是找不到的":["80.0"],"因为搜索引擎只会搜现成的内容":["80.0"],"所以这种情况下":["80.0"],"会使用服务端渲染":["80.0"],"渲染引擎开始解析":["80.1"],"转换树中的标签到":["80.1"],"节点":["80.1"],"被称为内容树":["80.1"],"cssom":["80.1"],"标签":["80.2"],"会暂停渲染过程":["80.2"],"将控制器交给":["80.2"],"引擎":["80.2"],"引擎对内联的":["80.2"],"代码会直接执行":["80.2"],"对外部":["80.2"],"文件要先获取到脚本":["80.2"],"再进行执行":["80.2"],"浏览器不需要重新计算元素的几何属性":["80.3"],"直接为该元素绘制新的样式":["80.3"],"这个过程叫重绘":["80.3"],"所以":["80.3"],"重绘不一定导致回流":["80.3"],"连接这两个步骤":["81.0"],"前端可以做的非常有限":["81.0"],"核心是在":["81.0"],"只需要为":["81.2"],"添加":["81.2"],"cachedirectory":["81.2"],"manifest":["81.3"],"json":["81.3"],"context需要和webpack":["81.3"],"js保持一致":["81.3"],"context":["81.3"],"编译完成之后":["81.3"],"运行这个文件":["81.3"],"dist文件夹多出两个文件":["81.3"],"会充分释放":["81.4"],"在多核并发方面的优势":["81.4"],"output":["81.5"],"chunkfilename":["81.5"],"chunkhash":["81.5"],"chunk":["81.5"],"写路由的时候":["81.5"],"压缩是服务器的工作":["81.6"],"服务器接收到需要压缩的文件":["81.6"],"会启动自己的":["81.6"],"cpu":["81.6"],"去完成这个任务":["81.6"],"压缩本身也是需要耗费时间的":["81.6"],"它可以表示的颜色种类就越多":["81.7"],"成像效果就越细腻":["81.7"],"文件体积相应就越大":["81.7"],"一个二进制位表示两种颜色":["81.7"],"在我们日常的开发中":["81.8"],"图片经常作为大的背景图":["81.8"],"轮播图或":["81.8"],"banner":["81.8"],"对线条的处理更加细腻":["81.9"],"对透明度有良好的支持":["81.9"],"当追求最佳的显示效果":["81.9"],"不在意文件体积大小的时候":["81.9"],"推荐使用":["81.9"],"是文本文件":["81.10"],"我们既可以像写代码一样定义":["81.10"],"也可以把他写在":["81.10"],"如果把大图也编码到":["81.11"],"文件中":["81.11"],"后者的体积会明显增加":["81.11"],"即便减少了":["81.11"],"如果浏览器环境支持":["81.12"],"优先使用":["81.12"],"格式":["81.12"],"否则把图片降级为":["81.12"],"验证请求来源":["82.0"],"可以使用参数化的":["83.0"],"或者直接使用存储过程进行数据查询存取":["83.0"],"中的用户私密信息":["84.0"],"或者攻击者在论坛中加一个恶意表单":["84.0"],"当用户提交表单的时候":["84.0"],"却把信息传送到攻击者的服务器中":["84.0"],"有公钥和私钥之分":["85.1"],"公钥所有人都知道":["85.1"],"客户端把解密后的":["85.3"],"传递给服务端":["85.3"],"使用随机码":["85.3"],"并通过和服务器建立的对称加密的密钥进行解密":["85.4"],"中间人再通过和客户端建立的对称加密对响应数据进行加密后传输给客户端":["85.4"],"客户端通过与中间人建立的对称加密的密钥对数据进行解密":["85.4"],"简单来说":["85.4"],"生成唯一且安全的文件名":["86.0"],"防止刷票和灌水":["87.0"],"可以打开":["88.1"],"deep":["88.1","90.2"],"选项":["88.1"],"这样便会对对象中的每一项进行监听":["88.1"],"每个属性提供的函数作为属性的":["88.2"],"从而确保对象的每一个属性更新时都会触发传入的回调函数":["88.3"],"主要原因在于对象属于引用类型":["88.3"],"单个属性的更新并不会触发对象":["88.3"],"params":["89.0"],"等":["89.1"],"vue":["89.1","96.3"],"属性加上":["89.2"],"babel":["89.3"],"的问题":["89.3"],"都会在浏览器的访问历史中增加一个记录利用":["89.4"],"的以上特点":["89.4"],"就可以来实现前端路由":["89.4"],"更新视图但不重新请求页面":["89.4"],"的功能了":["89.4"],"特点":["89.4"],"兼容性好但是不美观":["89.4"],"采用":["89.4"],"html5":["89.4"],"的新特性":["89.4"],"且提供了两个新方法":["89.4"],"pushstate":["89.4"],"replacestate":["89.4"],"是要显示组件的占位组件":["89.5"],"可以嵌套":["89.5"],"对应路由配置的嵌套关系":["89.5"],"配合":["89.5"],"back":["89.6"],"后退":["89.6"],"forward":["89.6"],"new":["89.7","108.0","129.0","133.0","144.0","150.6"],"例如":["89.8","89.9"],"beforeenter":["89.8"],"守卫只在进入路由时触发":["89.8"],"因此只会影响这个路由":["89.8"],"控制更精确":["89.8"],"path":["89.9"],"users":["89.9"],"匹配对应路由":["89.10"],"将":["89.10","92.1","122.0","150.12"],"router":["89.10"],"定义成一个":["89.10"],"还需要深度遍历":["90.0"],"优势":["90.0"],"针对对象":["90.0"],"proxy":["90.1","90.7"],"可以通过配置选项来控制监听行为":["90.2"],"比如":["90.2"],"immediate":["90.2"],"tree":["90.3"],"shaking":["90.3"],"友好":["90.3"],"代码也更容易压缩":["90.3"],"体积更小":["90.4"],"更好的":["90.4"],"beforeunmount":["90.5"],"destroyed":["90.5"],"在":["90.6"],"闭包中缓存了变量":["90.6"],"无需顾虑调用顺序":["90.6"],"编译器优化":["90.7"],"静态提升":["90.7","90.8"],"patchflags":["90.7"],"静态标记":["90.7"],"事件监听缓存":["90.7"],"基于":["90.7"],"的响应式系统":["90.7"],"ssr":["90.7"],"只对比有标记的":["90.8"],"dom":["90.8","92.9"],"元素":["90.8","94.3"],"事件增加缓存":["90.8"],"set":["90.9"],"实现响应式":["90.9"],"用于模板":["90.9"],"reactive":["90.9"],"不需要":["90.9"],"getcurrentinstance":["90.10"],"获取当前实例":["90.10"],"否则会报错":["91.0"],"的方式":["91.1"],"调用":["91.1"],"两个":["91.1"],"时几乎完全一样":["91.1"],"但是定义两者时却不甚相同":["91.1"],"回调函数接收":["91.2"],"mutation":["91.2","91.4"],"对象和":["91.2"],"这样可以进一步判断":["91.2"],"编写的代码就不够优雅":["91.3"],"每个提交的地方都要单独做保存处理":["91.3"],"这里就可以利用":["91.3"],"提供的":["91.3"],"中只有":["91.4"],"state":["91.4","93.6"],"getter":["91.4"],"action":["91.4"],"抛弃了":["91.4"],"一直都不太受小伙伴们的待见":["91.4"],"对外暴露状态":["91.5"],"提供":["91.5"],"修改属性":["91.5"],"这里需要设置":["91.5"],"来劫持各个属性的":["92.0"],"setter":["92.0"],"还负责合并":["92.1"],"option":["92.1"],"然后":["92.1"],"会经过":["92.1"],"generate":["92.1"],"并不知道后续还有":["92.3"],"次更新操作":["92.3"],"所以会马上执行流程":["92.3"],"最终执行":["92.3"],"次流程":["92.3"],"而通过":["92.3"],"vnode":["92.3"],"个变异的方法":["92.4"],"能改变原数组的方法":["92.4"],"render":["92.5","92.7"],"此时会触发属性依赖收集":["92.5"],"为什么不推荐使用":["92.6"],"index":["92.6","108.1","150.1"],"作为":["92.6"],"因为使用":["92.6"],"和不带":["92.6"],"的效果是一样的":["92.6"],"或者":["92.7"],"的优先级更高":["92.7"],"如果用户写的是":["92.7"],"会做模板编译":["92.7"],"算法支持":["92.8"],"但是这样粒度过细导致":["92.8"],"无法承载较大应用":["92.8"],"中为了降低":["92.8"],"watcher":["92.8","92.11"],"粒度":["92.8"],"每个组件只有一个":["92.8"],"与之对应":["92.8"],"此时就需要引入":["92.8"],"mvvm":["92.9","93.0"],"框架中要解决的一个核心问题是连接数据层和视图层":["92.9"],"数据驱动":["92.9"],"应用":["92.9"],"数据变化":["92.9"],"视图更新":["92.9"],"要做到这点的就需要对数据做响应式处理":["92.9"],"这样一旦数据发生变化就可以立即做出更新处理":["92.9"],"为例说明":["92.9"],"通过数据响应式加上虚拟":["92.9"],"patch":["92.9"],"算法":["92.9"],"开发人员只需要操作数据":["92.9"],"关心业务":["92.9"],"初始化组件状态":["92.10"],"创建各种响应式数据":["92.10"],"建立更新机制这一步会立即执行一次组件更新函数":["92.10"],"去通知":["92.11"],"进行更新操作":["92.11"],"依次调用":["92.11"],"更新后的状态":["92.12"],"比如希望获取列表更新后的高度":["92.12"],"签名如下":["92.12"],"function":["92.12","119.0","122.0","124.0","126.0"],"callback":["92.12"],"void":["92.12"],"我们知道":["92.13"],"进行了优化":["92.14"],"转换成了":["92.14"],"模式启发":["93.0"],"简化了映射关系":["93.0"],"一个组件被复用多次的话":["93.1"],"也会创建多个实例":["93.1"],"本质上":["93.1"],"这些实例用的都是同一个构造函数":["93.1"],"触发组件的":["93.2"],"beforecreate":["93.2"],"create":["93.2"],"beforemount":["93.2"],"mounted":["93.2"],"钩子":["93.2"],"的时候触发组件的":["93.2"],"beforedestory":["93.2"],"destory":["93.2"],"vue3":["93.3"],"中完全相反":["93.3"],"值":["93.4","100.1"],"再通过":["93.4"],"的字样":["93.5"],"可以在":["93.5"],"的":["93.6"],"和用户的交互":["93.7"],"用户体验好":["93.7"],"内容的改变不需要重新加载整个页面":["93.7"],"避免了不必要的跳转和重复渲染":["93.7"],"解决办法":["93.8"],"减小入口文件体积":["93.8"],"静态资源本地缓存":["93.8"],"其中":["93.9"],"的优先级比":["93.9"],"高":["93.9"],"对应两个钩子函数":["93.9"],"这样会导致大量的":["93.11"],"mergeoptions":["93.12"],"方法进行合并":["93.12"],"采用策略模式针对不同的属性进行合并":["93.12"],"当组件和混入对象含有同名选项时":["93.12"],"层上":["93.13"],"会自动将数据渲染到页面中":["93.13"],"视图变化会通知":["93.13"],"层更新数据":["93.13"],"代表数据模型":["93.13"],"也可以在":["93.13"],"中定义数据修改和操作的业务逻辑":["93.13"],"是因为引入了":["93.14"],"fragment":["93.14"],"的概念":["93.14"],"这是一个抽象的节点":["93.14"],"如果发现组件是多根的":["93.14"],"函数式组件的":["93.15"],"props":["93.15"],"可以不用显示声明":["93.15"],"所以没有在":["93.15"],"里面声明的属性都会被自动隐式解析为":["93.15"],"prop":["93.15"],"而普通组件所有未声明的属性都解析到":["93.15"],"事件监听器":["93.16"],"它可以通过":["93.16"],"provide":["93.16"],"inject":["93.16"],"祖先组件中通过":["93.16"],"provider":["93.16"],"来提供变量":["93.16"],"然后在子孙组件中通过":["93.16"],"来注入变量":["93.16"],"api":["93.16","93.19"],"主要解决了跨级组件间的通信问题":["93.16"],"不过它的使用场景":["93.16"],"主要是子组件获取上级组件的状态":["93.16"],"混入对象可以包含任意组件选项":["93.17"],"当组件使用混入对象时":["93.17"],"所有混入对象的选项将被混入该组件本身的选项":["93.17"],"用来传递一个初始值":["93.18"],"这个子组件接下来希望将其作为一个本地的":["93.18"],"数据来使用":["93.18"],"在这种情况下":["93.18"],"最好定义一个本地的":["93.18"],"上实现":["93.19"],"一个库":["93.19"],"提供自己的":["93.19"],"同时提供上面提到的一个或多个功能":["93.19"],"两者的区别":["93.19"],"两者的区别主要表现在以下几个方面":["93.19"],"编写形式":["93.19"],"编写一个组件":["93.19"],"可以有很多方式":["93.19"],"我们最常见的就是":["93.19"],"格式不同":["93.20"],"num":["93.20"],"作为客户端与服务端的公用入口":["93.21"],"导出":["93.21"],"根实例":["93.21"],"供客户端":["93.21"],"entry":["93.21","99.0","150.1"],"与服务端":["93.21"],"主要作用挂载到":["93.21"],"上":["93.21"],"服务端":["93.21"],"除了创建和返回实例":["93.21"],"还进行路由匹配与数据预获取":["93.21"],"webpack":["93.21"],"为客服端打包一个":["93.21"],"client":["93.21"],"bundle":["93.21"],"为服务端打包一个":["93.21"],"服务器接收请求时":["93.21"],"会根据":["93.21"],"undefined":["93.22","143.0"],"其他的元素的键值还是不变":["93.22"],"pug":["93.24"],"编写":["93.24"],"用":["93.24"],"sass":["93.24"],"ts":["93.24"],"结合":["93.25"],"prettier":["93.25"],"eslint":["93.25"],"即可":["93.25"],"最后是提交规范":["93.25"],"husky":["93.25"],"lint":["93.25"],"staged":["93.25"],"commitlint":["93.25"],"目录结构我有如下习惯":["93.25"],"等属性":["94.0"],"实例挂载之前发生":["94.0"],"在这之前":["94.0"],"template":["94.0"],"模板已经导入渲染函数编译":["94.0"],"当前阶段虚拟":["94.0"],"已经创建完成":["94.0"],"即将开始渲染":["94.0"],"在此时也可以对数据进行更改":["94.0"],"不会触发":["94.0"],"挂载完成之后发生":["94.0"],"可以在这里取消订阅":["94.1"],"确保不再接收到不需要的事件获取数据更新":["94.1"],"销毁第三方库实例":["94.1"],"updated":["94.2"],"traverse":["95.0","98.1"],"是一个对":["95.0"],"文件都必须被对应的":["96.0"],"setattribute":["96.1"],"执行顺序为从右到左":["96.2"],"单文件组件":["96.3"],"raw":["96.3"],"加载文件原始内容":["96.3"],"在运行过程中会广播事件":["97.1"],"tap":["97.2"],"my":["97.2"],"plugin":["97.2"],"compilation":["97.2"],"递归遍历引入的其它js":["98.0"],"生成最终的依赖关系图":["98.0"],"然后通过":["98.1"],"ast":["98.1"],"进行遍历":["98.1"],"遍历的目的找到文件的":["98.1"],"import引用节点":["98.1"],"有关":["99.0"],"不同的":["99.0"],"局部刷新":["100.0"],"无需刷新整个页面":["100.0"],"会生成一个":["100.1"],"hash":["100.1"],"代表每一次编译的标识":["100.1"],"本次输出的":["100.1"],"onreadystatechange":["101.0"],"readystate":["101.0"],"let":["102.0","117.4","119.0","124.0","126.0","135.0","144.0","145.0","146.0"],"f":["102.0"],"symbol":["102.0"],"result":["102.0","107.0","108.1"],"result如果作为构造函数被调用":["102.0"],"typeof":["103.0"],"while":["104.0","117.2","125.0","127.0","138.0"],"first":["105.0"],"wake":["105.0"],"up":["105.0"],"如果缓存中不存在该键":["106.0"],"返回":["106.0"],"put":["106.0"],"prototype":["107.0","120.0"],"调用构造函数":["107.0"],"将新对象作为上下文":["107.0"],"try":["108.0"],"catch":["108.0"],"then":["108.0","108.2"],"resolvecallback":["108.0"],"rejectcallback":["108.0"],"解决链式调用的情况":["108.0"],"继续返回promise":["108.0"],"func":["108.2"],"res":["108.2","117.4","119.0"],"mysettimeout":["109.0"],"resolve":["110.0"],"length":["112.0","138.0"],"filter":["113.0"],"item":["113.0"],"只保留不需要取消的回调函数的项":["113.0"],"只执行一次订阅事件":["113.0"],"once":["113.0"],"字符串类型直接就是文本节点":["114.0"],"return":["114.0","122.0","125.0","128.0"],"document":["114.0"],"createtextnode":["114.0"],"普通dom":["114.0"],"迭代":["115.0","116.0"],"使用栈":["115.0","116.0"],"stack":["115.0","116.0"],"时间复杂度为n的情况":["117.0"],"i是左边界":["117.1"],"j是右边界":["117.1"],"j":["117.1","117.4","130.0","136.0"],"若":["117.1"],"大":["117.2"],"返回排序后的数组":["117.3"],"定义名为partition的分区函数":["117.3"],"将最右边的元素作为枢轴元素":["117.3"],"pivot":["117.3"],"i":["117.4","129.0","133.0","135.0","136.0","141.0"],"初始化结果数组":["117.4"],"缓存arr1的长度":["117.4"],"len1":["117.4"],"通过这个字段来确定子父级":["119.0"],"实现代码如下":["119.0"],"treetolist":["119.0"],"reduce":["121.0"],"处理结果当作函数返回":["122.0"],"args":["122.0"],"获取当前时间":["122.0"],"cleartimeout":["122.1"],"time":["122.1"],"新增部分":["122.1"],"start":["122.1"],"侵删":["123.0"],"reversestring":["124.0"],"left":["124.0","134.2"],"right":["124.0","138.0"],"join":["125.0"],"删除多余空格":["125.0"],"slowindex":["125.0"],"fastindex":["125.0"],"pathencryption":["126.0"],"arr":["126.0"],"continue":["127.0"],"l":["127.0"],"r":["127.0"],"break":["130.0"],"num1":["131.0"],"of":["131.0"],"num2":["131.0"],"sum":["131.0"],"终止条件1":["132.0"],"变为":["132.0"],"是快乐数":["132.0"],"终止条件2":["132.0"],"出现循环":["132.0"],"不是快乐数":["132.0"],"根据中间元素和目标元素":["134.0"],"继续查找左半部分":["134.1"],"如果中间元素小于目标元素":["134.1"],"二分法":["134.2"],"因为题目给出是有序的":["134.2"],"没有重复的数组":["134.2"],"所以可以考虑使用二分法":["134.2"],"sort":["135.0"],"指针":["136.0"],"用来遍历原数组":["136.0"],"用于当遍历值":["136.0"],"target":["136.0"],"存储新的值":["136.0"],"nums":["138.0"],"next":["140.0"],"cur":["140.0","141.0","145.0"],"cur指向dummy节点":["141.0"],"用于遍历链表":["141.0"],"遍历到要删除的节点的前一个节点":["141.0"],"则在该链表中没有环":["142.0"],"注意":["142.0"],"不作为参数进行传递":["142.0"],"dummy":["144.0"],"listnode":["144.0"],"虚拟头节点":["144.0"],"temp":["145.0"],"null":["145.0"],"pre":["145.0"],"交点不是数值相等":["146.0"],"而是指针相等":["146.0"],"pa":["146.0"],"pb":["146.0"],"add":["150.0"],"src":["150.1"],"title":["150.3"],"html页面的标题":["150.3"],"在配置":["150.4"],"loader":["150.4"],"优化压缩":["150.5"],"uglifyjsplugin":["150.6"],"可以理解的模块":["150.7"],"head":["150.9"],"env":["150.12"]},{"0":["6.14","6.16","40.0","59.0","81.7","126.0","132.0","135.0","136.0"],"1":["54.1","74.3","81.7","89.6","131.0","133.0"],"2":["19.0","38.0"],"3":["64.3","66.0","89.5","91.2","91.5","92.8","93.17","93.24","100.1"],"4":["20.0","25.0","33.0","66.0","89.9","91.3","98.0","98.1"],"5":["6.9","78.7","92.12"],"6":["85.3"],"7":["92.9"],"8":["96.3"],"9":["57.0"],"20":["6.26"],"50":["34.0"],"53":["65.11"],"200":["101.0"],"206":["75.1"],"304":["75.2"],"404":["75.3"],"1000":["105.0"],"同一张图片在不同的设备上":["5.0"],"大小可能天差地别":["5.0"],"响应式界面的标准是什么":["5.0"],"同一页面在不同大小和比例上看起来都应该是舒适的":["5.0"],"对父元素设置":["5.1"],"auto":["5.1","6.10","24.1"],"横行滚动查看":["5.1"],"适用于横行滚动列表":["5.1"],"元素过多但位置有限的导航栏":["5.1"],"控制文本溢出":["5.1"],"适用于单行文字":["5.1"],"多行文字溢出":["5.1"],"transform":["5.1"],"描绘":["5.1"],"1px":["5.1"],"注意":["6.2"],"只控制行内内容如何相对父元素对齐":["6.2"],"css":["6.2","44.1","93.5"],"son":["6.3","6.13","6.14"],"width":["6.3","28.0"],"缺点":["6.4","6.6","6.9","50.0","93.7"],"只对行内元素有效":["6.4"],"属性会继承影响到后代行内内容":["6.4"],"子绝父相":["6.5"],"top":["6.5"],"bottom":["6.5","6.16","42.1"],"right":["6.5","40.0","134.2"],"是相对于父元素尺寸的":["6.5"],"margin":["6.5","6.14","6.15"],"容易理解":["6.6"],"优点":["6.8","6.9","93.15"],"兼容性好":["6.8","6.9"],"简单":["6.10"],"消除幽灵空白节点的bug":["6.13"],"display":["6.13"],"inline":["6.13"],"负自身高度一半":["6.15"],"500px":["6.19","6.20","6.21","6.23","6.24"],"100px":["6.20","6.21","6.22"],"height":["6.20","6.21","6.23","6.24","26.0","41.1"],"background":["6.22","6.23","6.24","18.2"],"color":["6.22","6.23","6.24","6.27"],"f00":["6.22","6.23","6.24","6.27"],"不设宽度":["6.23"],"原理是检查到":["9.0"],"touched":["9.0"],"事件的时候":["9.0"],"会通过":["9.0"],"dom":["9.0","78.3","81.10","93.0","114.0"],"的顺序":["10.0"],"样式表会在后面的":["10.0"],"执行前先加载执行完毕":["10.0"],"所以":["10.0","93.3"],"会阻塞后面":["10.0"],"的执行":["10.0"],"怎么解决":["10.0"],"使用":["10.0","81.8","89.2","94.0","95.0"],"cdn":["10.0"],"因为":["10.0"],"会根据你的网络状况":["10.0"],"解析执行":["12.0"],"代码":["12.0"],"com":["13.0"],"localstorage":["13.1"],"indexdb":["13.1"],"等存储性内容":["13.1"],"push":["13.3","78.0","108.0","127.0"],"src":["13.3","150.3"],"join":["13.3"],"www":["13.4"],"urlencoded":["13.4"],"复杂请求":["13.4"],"不符合以上的就是复杂请求":["13.4"],"将响应转发给客户端":["13.5"],"如果不同":["14.0"],"则开启新的渲染进程":["14.0"],"传输数据":["14.0"],"更新状态":["14.0"],"渲染进程准备好后":["14.0"],"浏览器向渲染进程发起":["14.0"],"提交文档":["14.0"],"的消息":["14.0"],"渲染进程接收到消息和网络进程建立传输数据的":["14.0"],"管道":["14.0"],"渲染进程接收完数据后":["14.0"],"向浏览器发送":["14.0"],"确认提交":["14.0"],"浏览器进程接收到确认消息后更新浏览器界面状态":["14.0"],"安全":["14.0"],"地址栏":["14.0"],"每个线程都有自己的独立执行路径和栈空间":["15.1"],"进程和线程的特点":["15.1"],"进程中的任一线程执行出错":["15.1"],"绘制":["15.2"],"网络进程":["15.2"],"不会影响到外部布局":["17.0"],"table":["17.1"],"cell":["17.1"],"caption":["17.1"],"中的元素":["17.2"],"webkit":["18.1"],"autofill":["18.1","18.2"],"值和使用":["19.0"],"没有区别":["19.0"],"flex":["20.0"],"important":["21.0"],"可以使用":["22.0","22.1","78.8"],"padding":["22.0","22.2"],"空间不足时缩小的比例是":["23.0"],"容器中默认存在两条轴":["24.0"],"主轴和交叉轴":["24.0"],"交叉轴终点对齐":["24.1"],"居中对齐":["24.1"],"baseline":["24.1"],"项目的第一行文字的基线对齐":["24.1"],"stretch":["24.1"],"默认值":["24.1"],"如果项目未设置高度或者设置为":["24.1"],"占满整个容器的高度":["24.1"],"定义项目缩小比例":["24.2"],"如果空间不足":["24.2"],"项目缩小":["24.2"],"才能识别":["25.0"],"标签作为":["25.0"],"元素":["25.0","27.0"],"不存在兼容性问题":["25.0"],"来分隔它们":["26.0"],"也可以为":["26.0"],"父元素设置一个高度":["26.0"],"max":["26.0"],"min":["26.0"],"body":["27.0"],"视口的宽":["28.0"],"适用场景":["29.0"],"通常用于创建图像和图表":["29.0"],"可以用":["30.0"],"position":["31.0"],"relative":["31.0","40.0"],"absolute":["31.0"],"不会生成新的元素":["32.0"],"伪元素":["32.0"],"如果该元素绑定了事件会触发":["33.0"],"重绘":["33.0"],"content":["33.0"],"移出文档流":["33.0"],"但是再次显示时消耗性能低":["33.0"],"固定宽高时设置":["34.0"],"接口预加载":["35.0"],"在":["36.0"],"的":["36.0","74.8","92.11","93.21"],"中使用":["36.0"],"这样可以确保每帧动画能够在显示器刷新之前完成":["37.0"],"如果时间间隔小于":["37.0"],"指定要显示的行数":["38.0"],"元素设为":["40.0"],"因此就造就了高度塌陷的问题":["41.0"],"block":["41.1"],"visibility":["41.1"],"hidden":["41.1"],"把任意三边隐藏掉":["42.0"],"默认为":["43.0"],"标准盒子模型":["43.0"],"li":["44.0"],"子元素重新设置字体大小和行高":["44.1"],"原理是":["44.1"],"中字体继承的特性和文字基线对齐":["44.1"],"相邻后代选择器":["45.0"],"伪元素选择器":["45.1"],"后者指向":["46.0"],"window":["46.0","64.2","79.0"],"第三个参数涉及到冒泡和捕获":["46.0"],"是":["46.0"],"事件触发之前执行":["47.0"],"这确保了脚本的执行在整个文档结构构建完成之后":["47.0"],"使用场景":["47.0","93.2","93.10"],"如果页面中有多个带有":["47.0"],"添加":["48.0"],"webworker":["49.0"],"webscoket":["49.0"],"协议":["49.0","70.1"],"新增":["49.0"],"实现代码复用":["50.0"],"input":["51.0","93.20"],"type":["51.0","91.2"],"用于告诉浏览器在页面加载时立即开始加载指定的资源":["52.0"],"与":["52.0"],"用于定义超链接和外部样式表":["53.0"],"不会立即请求资源":["53.0"],"而是将链接添加到文档的超链接列表中":["53.0"],"当用户点击链接时":["53.0"],"才会根据":["53.0"],"hello":["54.1"],"from":["54.1"],"tab":["54.1"],"处理连接关闭":["54.1"],"标签页2":["54.2"],"button":["54.3"],"标签来确定上下文和各个关键字的权重":["55.1"],"一个语义化的文档对爬虫来说是友好的":["55.1"],"是有利于爬虫对文档内容解读的":["55.1"],"从而有利于网站的":["55.1"],"seo":["55.1"],"表示一组媒体内容":["55.2"],"一般包括图像":["55.2"],"图表":["55.2"],"实现了更接近传统面向对象编程的方式":["57.0"],"同时":["57.0"],"还提供了模块化的支持":["57.0"],"import":["57.0","89.9","98.1"],"export":["57.0"],"语法导入和导出模块":["57.0"],"完成后进行":["58.0"],"即":["58.0","70.3"],"渲染更新":["58.0"],"先宏任务":["58.0"],"再微任务":["58.0"],"然后再渲染更新":["58.0"],"宏任务队列中":["58.0"],"如果有大量任务等待执行时":["58.0"],"将":["58.0","92.11"],"dom的变动作为微任务":["58.0"],"能更快的将变化呈现给用户":["58.0"],"这样就可以在这一次的事件轮询中更新":["58.0"],"domevent":["58.0"],"是window调用的foo函数":["59.0"],"所以foo中的this指向window":["59.0"],"obj2":["59.0"],"foo1":["59.0"],"foo2":["59.0"],"settimeout":["59.0","110.0"],"preventdefault":["60.0","60.1"],"方法来阻止":["60.0"],"true":["60.1","66.0","118.0","122.1","150.6"],"来实现阻止事件进一步传播":["60.1"],"e":["60.1"],"可以阻止事件的默认行为发生":["60.1"],"默认行为是指":["60.1"],"点击":["60.1"],"a":["60.1"],"标签就转跳到其他页面":["60.1"],"let":["61.3","132.0","136.0"],"用来定义常量":["61.4"],"声明时必须赋值":["61.4"],"也就是全局对象":["61.5"],"j":["61.6"],"timer":["61.6"],"fn":["61.6","113.0"],"null":["62.1","66.0","81.5","89.4","109.0"],"是一个对象指向一个函数":["62.3"],"这个函数就是这个对象的构造函数":["62.3"],"构造函数":["62.3"],"构造函数本身":["62.3"],"在内存中失去引用时":["63.1"],"垃圾回收机制会根据特殊的算法找到它":["63.1"],"并将原来标记为可到达对象的标识清除":["63.2"],"以便进行下一次垃圾回收操作":["63.2"],"因为它们对于值的引用不计入垃圾回收机制":["63.4"],"作用域链":["64.0"],"运行在":["64.1"],"函数中的代码":["64.1"],"对象":["64.2","91.1"],"当该函数执行结束":["64.3"],"执行上下文从栈中弹出":["64.3"],"执行阶段":["64.4"],"对变量进行赋值":["64.4"],"指向全局对象":["64.5"],"全局变量会作为该对象的属性来被查询":["64.5"],"在运行过程中需要检查数据类型的语言":["65.0"],"静态语言":["65.0"],"function":["65.1","65.15","113.0"],"数组":["65.1"],"array":["65.1"],"所以可能添加相同的键名":["65.2"],"就会出现冲突的问题":["65.2"],"in":["65.3"],"object":["65.3","114.0"],"n":["65.4","92.14"],"或者使用":["65.4"],"未定义的值":["65.5"],"语义是表示一个变量最原始的状态":["65.5"],"而不是人为操作的结果":["65.5"],"声明一个变量":["65.5"],"但是没有赋值":["65.5"],"为了性能考虑使用低位存储变量的类型信息":["65.6"],"000":["65.6"],"开头代表对象":["65.6"],"可以容纳各种大小的数据":["65.7"],"对于复制操作":["65.7"],"可以判断引用类型":["65.8"],"检测当前实例是否是属于这个类的":["65.8"],"底层机制":["65.8"],"只要当前类出现在实例的原型上":["65.8"],"结果都是":["65.8"],"key":["65.10"],"return":["65.10","103.0"],"位的有效数字":["65.11"],"超过这个长度的位数会被截取掉这样就造成了精度丢失的问题":["65.11"],"解决":["65.11","71.2"],"将其转换为整数之后再进行运算":["65.11"],"会首先判断传入参数是否为数字":["65.12"],"如果是数字再继续判断是否为":["65.12"],"处理了一些特殊的情况":["65.13"],"比如":["65.13"],"再转换成数字为":["65.14"],"this":["65.15","90.3","93.4"],"基数为":["65.16"],"表示的数中":["65.16"],"最大值小于":["65.16"],"类似集合":["65.17"],"方法很多":["65.17"],"可以跟各种数据格式转换":["65.17"],"接受对象作为健名":["65.17"],"index":["66.0","150.3"],"xml":["66.0"],"发送请求":["66.0"],"send":["66.0"],"严谨写法":["66.0"],"可以用于浏览器和":["66.1"],"node":["66.1"],"js":["66.1","80.3","93.5","93.16","136.0","142.0"],"环境中发出":["66.1"],"http":["66.1","76.0","78.0","81.12","82.0"],"节点加上节点之间的智能冗余":["67.0"],"机制":["67.0"],"可以有效地预防黑客":["67.0"],"入侵以及降低各种":["67.0"],"d":["67.0"],"o":["67.0"],"s":["67.0"],"攻击对网站的影响":["67.0"],"name":["68.0"],"server":["68.0"],"服务器":["68.0"],"通常情况下就是你注册的域名服务器":["68.0"],"服务器上的数据都是安全的":["69.0"],"每次的结果都是相同的":["69.0"],"浏览器会对":["69.0"],"的握手过程":["70.0"],"才可以进行密文传输":["70.0"],"ssl":["70.1"],"tsl":["70.1"],"获取客户端发来的随机数":["70.3"],"第五步":["70.3"],"二来公钥里并没有包含服务器的信息":["70.4"],"也就是并不能确保服务器身份的合法性":["70.4"],"并且非对称加密的时候要消耗一定的时间":["70.4"],"减低了数据的传输效率":["70.4","85.2"],"混合加密机制的好处是什么":["70.4"],"对称密钥加密和非对称密钥加密都有它们各种的优缺点":["70.4"],"而混合加密机制就是将两者结合利用它们各自的优点来进行加密传输":["70.4"],"比如既然对称密钥的优点是加解密效率快":["70.4"],"那么在客户端与服务端确定了连接之后就可以用它来进行加密传输":["70.4"],"返回前端":["70.5"],"前端每次":["70.5"],"灵活和易于扩展":["71.1"],"协议中的各类请求方法":["71.1"],"cookie":["71.2"],"连接中":["71.3"],"客户端发起多个请求":["71.3"],"发出了第一个请求之后":["71.3"],"不用等待返回结果":["71.3"],"可以发第二个请求":["71.3"],"只获取当前用户能看到的页面资源":["71.4"],"当用户向下滑动页面的时候":["71.4"],"再去请求服务器获取相应的资源":["71.4"],"达到延迟发送请求的效果":["71.4"],"一般来说":["71.4"],"的响应数据要比请求大":["71.4"],"所以可以考虑对响应的资源进行压缩":["71.4"],"减少响应的数据大小":["71.4"],"提高网络传输的效率":["71.4"],"无损压缩":["71.4"],"无损压缩是指源码经过压缩后":["71.4"],"信息不被破坏":["71.4"],"还能恢复到压缩前的模样":["71.4"],"适合用在文本文件":["71.4"],"程序可执行文件":["71.4"],"程序源代码":["71.4"],"一般情况下":["71.4"],"中的请求或响应":["71.6"],"由":["71.6"],"头部和包体构成":["71.6"],"里包含一条或者多个":["71.6"],"frame":["71.6"],"最小单位":["71.6"],"以二进制压缩格式存放":["71.6"],"中的内容":["71.6"],"头部和包体":["71.6"],"多个":["71.6"],"跑在一条":["71.6"],"同一个":["71.6"],"请求与响应是跑在同一个":["71.6"],"消息可以由多个":["71.6"],"用于服务器回应时":["72.0"],"告诉客户端":["72.0"],"即可通过单点登录系统":["73.0"],"etruesso":["73.0"],"访问后台的多个":["73.0"],"应用系统":["73.0"],"二次登陆时无需重新输入用户名和密码":["73.0"],"基于角色访问控制":["73.0"],"根据用户的角色和":["73.0"],"url":["73.0","93.21"],"就需要网络进行通信":["74.0"],"但是设备是多样性的":["74.0"],"保证一个报文一定能到达接收端":["74.1"],"如果直接传输就很不好控制":["74.2"],"所有当传输的数据包大于":["74.2"],"最大报文长度的时候":["74.2"],"就要将数据包分块":["74.2"],"这样的好处就是如果传输过程中有一个丢失或者损坏":["74.2"],"只需要重新发送丢失的分块即可":["74.2"],"不需要重新发送整个数据包":["74.2"],"传输层的报文中会携带端口号":["74.2"],"接收方根据这个端口号来判断这个报文要传输给那个应用":["74.2"],"时":["74.3","92.6"],"确认应答的字段变为有效":["74.3"],"需要":["74.4"],"这个报文也不包含应用层数据":["74.5"],"客户端收到服务端的报文后":["74.5"],"向服务端回应最后一个应答报文":["74.5"],"首先将应答报文":["74.5"],"首部":["74.5"],"标志位置为":["74.5"],"time":["74.6"],"需要过一阵子以确保服务端收到自己的":["74.6"],"报文之后才会进入":["74.6"],"closed":["74.6"],"是服务器在上一次对话中发送给客户的":["74.7"],"这个":["74.7"],"支持":["74.8","90.4","91.4"],"partial":["75.1"],"说明请求的资源还在":["75.2"],"但是暂时需要用另一个url来访问":["75.2"],"not":["75.3"],"表示服务器自身工作正常":["75.4"],"访问后端服务器发生了错误":["75.4"],"请求":["76.0","81.11"],"会在正式通信之前":["76.0"],"增加一次":["76.0"],"它的优点是":["77.0"],"明显减少了很多不必要的":["77.0"],"请求次数":["77.0"],"相比之下节约了资源":["77.0"],"长轮询的缺点在于":["77.0"],"连接挂起也会导致资源的浪费":["77.0"],"websocket":["77.0"],"maxgae":["78.1"],"优先级高于":["78.1"],"如果":["78.1","93.1"],"maxage":["78.1"],"未过期":["78.1"],"向代理服务器请求缓存内容":["78.1"],"只在代理服务器中生效":["78.1"],"客户端只考虑":["78.1"],"public":["78.1","93.25"],"private":["78.1"],"如果为资源设置了":["78.1"],"那么它既可以被浏览器缓存":["78.1"],"所以使用":["78.2"],"可能会有一个":["78.2"],"bug":["78.2"],"那就是服务器并没有正确感知文件的变化":["78.2"],"为了解决这个问题":["78.2"],"etag":["78.2"],"出现了":["78.2"],"是由服务器为每个资源生成的唯一的标识字符串":["78.2"],"这个标识字符串是基于文件内容编码的":["78.2"],"只要文件内容不同":["78.2"],"对应的":["78.2"],"所以无法直接访问":["78.3"],"可以帮我们实现离线缓存":["78.3"],"消息推送和网络代理等功能":["78.3"],"借助":["78.3"],"实现的离线缓存就是":["78.3"],"生命周期包括":["78.3"],"最大只能有":["78.5"],"4kb":["78.5"],"所以只能存少量的信息":["78.5"],"过量的":["78.5"],"存储容量大":["78.7"],"可以达到":["78.7"],"无法解决的程度":["78.8"],"发现自己没有这个资源":["78.9"],"一般是缓存的数据过期了":["78.9"],"转头向根服务器去要这个资源":["78.9"],"viewheight":["79.0"],"innerheight":["79.0"],"document":["79.0"],"无论调用多少次":["79.1"],"服务端渲染也可以解决首屏加载速度过慢":["80.0"],"除了加载":["80.0"],"还要等渲染所需的这部分":["80.0"],"创建的是":["80.1"],"的解析过程是并行的":["80.1"],"渲染树":["80.1"],"等":["80.2","90.2","90.8"],"引擎运行完毕":["80.2"],"浏览器会把控制器交还给渲染引擎":["80.2"],"继续":["80.2"],"和":["80.2"],"的构建":["80.2"],"通过":["80.2"],"有人":["80.2"],"回流一定会导致重绘":["80.3"],"如何避免":["80.3"],"将一些属性使用":["80.3"],"变量缓存起来":["80.3"],"计算完毕再提交给浏览器发出重计算请求":["80.3"],"连接上进行优化":["81.0"],"在webpack":["81.3"],"js中对dll做配置":["81.3"],"帮我们把任务分解给多个子进程去并发执行":["81.4"],"大大提升打包效率":["81.4"],"使用方法":["81.4"],"getcomponent":["81.5"],"location":["81.5"],"cb":["81.5","97.2"],"ensure":["81.5"],"pages":["81.5"],"所以可以理解为以服务器压缩的时间开销和":["81.6"],"开销为代价":["81.6"],"省下了一些传输过程中的时间开销":["81.6"],"但是我们都知道服务器的":["81.6"],"黑":["81.7"],"白":["81.7"],"图":["81.8"],"呈现大图":["81.8"],"既可以保证图片的质量":["81.8"],"但是在日常开发中":["81.9"],"我们为了避免文件体积过大":["81.9"],"一般不使用":["81.9"],"html":["81.10"],"里成为":["81.10"],"的一部分":["81.10"],"也可以把对图形的描述写入以":["81.10"],"无法弥补这庞大的体积带来的性能开销":["81.11"],"只有在传输非常小的图片的时候":["81.11"],"带来的文件体积膨胀":["81.11"],"以及浏览器解析":["81.11"],"jgp":["81.12"],"还有就是让后端去根据":["81.12"],"头部的":["81.12"],"accept":["81.12"],"字段来决定返回什么格式的图片":["81.12"],"验证":["82.0"],"永远不要使用管理员权限的数据库连接":["83.0"],"为每个应用使用单独的权限有限的数据库连接":["83.0"],"不要把机密信息明文存放":["83.0"],"请加密或者":["83.0"],"而不是用户原本以为的信任站点":["84.0"],"防护原理":["84.0"],"对用户输入进行合适的转义和过滤":["84.0"],"使用安全的模板引擎或自动转义函数":["84.0"],"tls":["85.0"],"可以将数据用公钥加密":["85.1"],"就算是第三方截取了这个数据但是没有对应的私钥也解密不了":["85.2"],"缺点是非对称加密的时候要消耗一定的时间":["85.2"],"对传输数据进行对称加密":["85.3"],"服务端拿私钥解密随机码":["85.3"],"中间人攻击中":["85.4"],"中间人首先伪装成服务端和客户端进行通信":["85.4"],"然后又伪装成客户端和服务端进行通信":["85.4"],"可以阻止自动化程序大规模注册账号":["87.0"],"如果当前监控的值是数组类型":["88.0"],"会对对象中的每一项进行求值":["88.0"],"此时会将当前":["88.0"],"这样会带来性能问题":["88.1"],"优化的话可以使用字符串形式监听":["88.1"],"如果没有写到组件中":["88.1"],"不要忘记使用":["88.1"],"unwatch":["88.1"],"转化":["88.2"],"依赖收集":["88.2"],"因此引入":["88.3"],"能够很好地解决监听对象的问题":["88.3"],"的实例":["89.1"],"想要导航到不同":["89.1"],"对象的":["89.2"],"安装":["89.3"],"可以对浏览器历史记录栈进行修改":["89.4"],"以及":["89.4"],"popstate":["89.4"],"事件的监听到状态变更":["89.4"],"path":["89.4"],"程序员poetry":["89.4"],"代码已经复制到剪贴板":["89.4"],"这两个方法有个共同的特点":["89.4"],"可以显示具名组件":["89.5"],"起到更强的布局作用":["89.5"],"组件内部根据":["89.5"],"属性判断如何渲染最终生成节点":["89.5"],"前进":["89.6"],"go":["89.6"],"前进或者后退几步":["89.6"],"event":["89.7"],"创建这两个事件":["89.7"],"我们还可以为路由组件添加守卫配置":["89.8"],"beforerouteenter":["89.8"],"会在渲染该组件的对应路由被验证前调用":["89.8"],"views":["89.9"],"userdetails":["89.9"],"结合注释":["89.9"],"插件":["89.10","91.5"],"即实现":["89.10"],"install":["89.10","93.19"],"方法":["89.10","93.2","93.19"],"内部做两件事":["89.10"],"实现两个全局组件":["89.10"],"针对整个对象":["90.0"],"而不是对象的某个属性":["90.0"],"所以也就不需要对":["90.0"],"keys":["90.0","114.0"],"通常用于处理单值的响应式问题":["90.1"],"底层采用的是":["90.1"],"相对更简单":["90.2"],"没有额外的选项":["90.2"],"中见不到":["90.3"],"的使用":["90.3"],"ts":["90.4"],"umounted":["90.5"],"需要保证":["90.6"],"的顺序一致":["90.6"],"优化":["90.7"],"更小":["90.7"],"更好的摇树优化":["90.7"],"tree":["90.7","119.0"],"shaking":["90.7"],"移除一些不常用的":["90.7"],"更友好":["90.7"],"对不参与更新的元素":["90.8"],"会做静态提升":["90.8"],"只会被创建一次":["90.8"],"之后会在每次渲染时候被不停的复用":["90.8"],"可以有效跳过大量":["90.8"],"其他情况都要":["90.9"],"初衷":["90.9"],"不丢失响应式的情况下":["90.9"],"若使用":["90.10"],"options":["90.10","150.13"],"的回调函数接收参数是":["91.1"],"state":["91.1"],"则是与":["91.1"],"实例具有相同方法和属性的上下文":["91.1"],"context":["91.1"],"因此一般会解构它为":["91.1"],"是否是期待的那个":["91.2"],"从而进一步做后续处理":["91.2"],"方式简单好用":["91.2"],"且能获取变化前后值":["91.2"],"subscribe":["91.3"],"方法做一个统一的处理":["91.3"],"甚至可以封装一个":["91.3"],"插件以便复用":["91.3"],"直接抛弃它了":["91.4"],"这无疑减少了我们工作量":["91.4"],"支持同步和异步":["91.4"],"不支持":["91.4"],"良好的":["91.4"],"typescript":["91.4"],"毕竟我们":["91.4"],"为响应式对象":["91.5"],"同时将":["91.5"],"定义为一个":["91.5"],"vue":["91.5"],"getter":["92.0"],"语法树转化成":["92.1"],"funtion":["92.1"],"字符串的过程":["92.1"],"函数":["92.1","92.7","92.8"],"同样更新":["92.3"],"虚拟":["92.3"],"不会立即操作":["92.3"],"通过原型链":["92.4"],"函数劫持的方式实现的":["92.4"],"depend":["92.5"],"当属性发生修改时会触发":["92.5"],"每个列表项的":["92.6"],"在变更前后是一样的":["92.6"],"都是直接判断为":["92.6"],"samenode":["92.6"],"然后复用":["92.6"],"最终拿到":["92.7"],"内部挂载的时候会产生一个":["92.7"],"watcher":["92.7"],"会调用":["92.7"],"算法才能精确找到发生变化的地方并高效更新":["92.8"],"中":["92.8"],"执行的时刻是组件内响应式数据变更触发实例执行其更新函数时":["92.8"],"更新函数会再次执行":["92.8"],"render":["92.8"],"函数获得最新的虚拟":["92.8"],"然后执行":["92.8"],"并传入新旧两次虚拟":["92.8"],"通过比对两者找到变化的地方":["92.8"],"最后将其转化为对应的":["92.8"],"完全不用接触繁琐的":["92.9"],"操作":["92.9"],"从而大大提升开发效率":["92.9"],"降低开发难度":["92.9"],"中的数据响应式会根据数据类型来做不同处理":["92.9"],"如果是":["92.9","117.2"],"对象则采用":["92.9"],"的方式定义数据拦截":["92.9"],"当数据被访问或发生变化时":["92.9"],"我们感知并作出响应":["92.9"],"如果是数组则通过覆盖数组对象原型的":["92.9"],"个变更方法":["92.9"],"使这些方法可以额外的做更新通知":["92.9"],"这会首次执行组件渲染函数并执行":["92.10"],"patch":["92.10"],"将前面获得":["92.10"],"update":["92.11"],"所以我们只需要在传入的回调函数中访问最新":["92.12"],"状态即可":["92.12"],"或者我们可以":["92.12"],"await":["92.12"],"方法返回的":["92.12"],"之后做这件事":["92.12"],"本质上不过是语法糖":["92.13"],"可以看成是":["92.13"],"value":["92.13","93.20","121.0"],"采用虚拟":["93.0"],"是对象的话":["93.1"],"对象属于引用类型":["93.1"],"性能消耗":["93.2"],"有更高的切换消耗":["93.2"],"有更高的初始渲染消耗":["93.2"],"里加":["93.5"],"如果被其它地方复用":["93.6"],"就放在":["93.6"],"前后端职责分离":["93.7"],"架构清晰":["93.7"],"服务器压力小":["93.7"],"初次加载耗时多":["93.7"],"ui":["93.8"],"框架按需加载":["93.8"],"图片资源压缩":["93.8"],"activated":["93.9"],"deactivated":["93.9"],"当组件被激活时":["93.9"],"触发钩子函数":["93.9"],"函数返回的对象":["93.10"],"的产生而浪费内存":["93.11"],"如果粒度过低也无法精准检测变化":["93.11"],"所以采用":["93.11"],"这些选项将以恰当的方式进行":["93.12"],"合并":["93.12"],"如果混入的数据和本身组件的数据冲突":["93.12"],"我们可以把":["93.13"],"称为数据层":["93.13"],"因为它仅仅关注数据本身":["93.13"],"不关心任何行为":["93.13"],"用户操作界面":["93.13"],"当":["93.13"],"就创建一个":["93.14"],"节点":["93.14","94.0","98.1"],"把多个根节点作为它的":["93.14"],"children":["93.14"],"attrs":["93.15"],"里面":["93.15"],"并自动挂载到组件根元素上面":["93.15"],"可以通过":["93.15"],"inheritattrs":["93.15"],"属性禁止":["93.15"],"由于函数式组件不需要实例化":["93.15"],"跨级组件间建立了一种主动提供与依赖注入的关系":["93.16"],"root":["93.16"],"访问根组件中的属性或方法":["93.16"],"是根组件":["93.16"],"不是父组件":["93.16"],"只对根组件有用":["93.16"],"vuex":["93.16"],"是一个专为":["93.16"],"应用程序开发的状态管理模式":["93.16"],"每一个":["93.16","93.19"],"插槽主要用于":["93.17"],"组件中的内容分发":["93.17"],"并将这个":["93.18"],"用作其初始值":["93.18"],"以一种原始的值传入且需要进行转换":["93.18"],"单文件的这种格式":["93.19"],"文件我们都可以看成是一个组件":["93.19"],"use":["93.19"],"插件的实现应该暴露一个":["93.19"],"这个方法的第一个参数是":["93.19"],"构造器":["93.19"],"第二个参数是一个可选的选项对象":["93.19"],"注册形式":["93.19"],"组件注册主要分为":["93.19"],"加载相应组件":["93.21"],"获取和解析异步数据":["93.21"],"创建一个读取":["93.21"],"bundlerenderer":["93.21"],"然后生成":["93.21"],"发送给客户端":["93.21"],"客户端混合":["93.21"],"客户端收到从服务端传来的":["93.21"],"与自己的生成的":["93.21"],"进行对比":["93.21"],"把不相同的":["93.21"],"使其可以能够响应后续变化":["93.21"],"这个过程称为客户端激活":["93.21"],"为确保混合成功":["93.21"],"客户端与服务器端需要共享同一套数据":["93.21"],"在服务端":["93.21"],"可以在渲染之前获取数据":["93.21"],"填充到":["93.21"],"msg":["93.23"],"调用子组件中的方法":["93.23"],"我们的":["93.24"],"还可以单独作用当前组件":["93.24"],"打包时":["93.24"],"vscode":["93.25"],"用来放项目中的":["93.25"],"配置":["93.25"],"plugins":["93.25"],"用来放":["93.25"],"插件的":["93.25"],"plugin":["93.25"],"用来放一些诸如":["93.25"],"页头":["93.25"],"icon":["93.25"],"真实":["94.0"],"已经挂载完毕":["94.0"],"数据完成双向绑定":["94.0"],"可以访问到":["94.0"],"refs":["94.0"],"属性对":["94.0"],"进行操作":["94.0"],"也可以向后台发送请求":["94.0"],"拿到返回数据":["94.0"],"更新之前发生":["94.0"],"也就是响应式数据发生更新":["94.0"],"如果在":["94.1"],"中使用了第三方库":["94.1"],"父组件更新过程":["94.2"],"如果需要等待":["94.3"],"进行遍历":["95.0"],"插件转化成新的":["95.0"],"处理转换成":["96.0"],"innerhtml":["96.1"],"head":["96.1"],"从下到上":["96.2"],"utf":["96.3"],"把文件输出到一个文件夹中":["96.3"],"在代码中通过相对":["96.3"],"去引用输出的文件":["96.3"],"image":["96.3"],"插件只需要监听它所关系的事件":["97.1"],"console":["97.2"],"log":["97.2"],"将es6语法转化成es5":["98.0"],"因为现在我们引入文件都是通过":["98.1"],"的方式引入":["98.1"],"所以找到了":["98.1"],"就找到了文件的依赖关系":["98.1"],"会生出不同的":["99.0"],"contenthash":["99.0"],"好处":["100.0"],"值会编译新生成的文件标识":["100.1"],"被作为下次热更新的标识":["100.1"],"监听文件变化":["100.1"],"主要是通过文件的生成时间判断是否有变化":["100.1"],"status":["101.0"],"this指向的是new出来的对象":["102.0"],"判断new出来的对象是否为fn的实例":["102.0"],"thisf":["102.0"],"传入的所有参数都必须为函数":["103.0"],"prototype":["104.0"],"if":["105.0","112.0","117.1","119.0","128.0","129.0","142.0","144.0"],"unshift":["105.0"],"放到任务队列顶部":["105.0"],"else":["105.0","125.0","131.0"],"删除旧的数据":["106.0"],"apply":["107.0"],"如果构造函数显示返回了一个对象":["107.0"],"将then传入的回调函数":["108.0"],"注册到resolvetask中":["108.0"],"重点":["108.0"],"判断resolvecallback事件的返回值":["108.0"],"假如用户注册的resolvecallback事件又返回一个promise":["108.0"],"将resolve和reject传进去":["108.0"],"这样就实现控制了链式调用的顺序":["108.0"],"const":["108.0","127.0"],"res":["108.0"],"catch":["108.2"],"err":["108.2"],"接口失败后":["108.2"],"判断剩余次数不为0时":["108.2"],"继续重发":["108.2"],"timeout":["109.0"],"moreargs":["111.0"],"定义一个内部函数fn":["113.0"],"会在触发时执行回调函数并取消订阅":["113.0"],"执行回调函数":["113.0"],"createelement":["114.0"],"遍历属性":["114.0"],"while":["115.0","116.0","117.4","124.0","130.0","134.2","142.0","144.0","145.0","146.0"],"next":["115.0","116.0","141.0"],"区别在这里":["117.0"],"我们加了一个标志位":["117.0"],"flag":["117.0"],"false":["117.0"],"处的数据项比当前最小值还要小":["117.1"],"则更新最小值索引为":["117.1"],"则将":["117.2"],"前面的一个元素后移一位":["117.2"],"为":["117.2"],"让出位置":["117.2"],"初始化左边界的索引":["117.3"],"leftindex":["117.3"],"lef":["117.3"],"遍历从左边界到右边界之前的元素":["117.3"],"for":["117.3","126.0","132.0","136.0"],"i":["117.3","126.0","132.0"],"如果当前元素小于枢轴元素":["117.3"],"缓存arr2的长度":["117.4"],"len2":["117.4"],"合并两个子数组":["117.4"],"方法4":["118.0"],"dfs":["119.0"],"foreach":["119.0"],"item":["119.0"],"call":["120.0"],"func":["121.0"],"转换成时间戳":["122.0"],"单位毫秒":["122.0"],"now":["122.0"],"new":["122.0"],"date":["122.0"],"将当前时间和上一次执行函数的时间进行对比":["122.0"],"表示第一次触发后执行":["122.1"],"为空表示首次触发":["122.1"],"length":["124.0","129.0","135.0"],"移除开始位置和重复的空格":["125.0"],"移除末尾空格":["125.0"],"split":["126.0"],"sum":["127.0","130.0","132.0"],"size":["128.0"],"has":["129.0","131.0","133.0"],"l":["130.0"],"r":["130.0"],"set":["131.0","133.0"],"get":["131.0","133.0"],"记录当前":["132.0"],"防止循环":["132.0"],"的比较关系来确定目标元素在那一半":["134.0"],"说明目标元素在右半部分":["134.1"],"mid":["134.2"],"找可行解":["138.0"],"优化可行解":["138.0"],"pre":["140.0"],"删除要删除的节点":["141.0"],"仅仅是为了标识链表的实际情况":["142.0"],"不允许修改":["142.0"],"链表":["142.0"],"解题思路":["142.0"],"cur":["144.0"],"cue":["144.0"],"cli":["150.0"],"入口":["150.1"],"output":["150.1"],"出口":["150.1"],"filename":["150.1"],"bundle":["150.1"],"template":["150.3"],"处理css文件":["150.4"],"test":["150.4"],"cache":["150.6"],"parallel":["150.6"],"特点":["150.7"],"功能单一":["150.7"],"的标签中":["150.9"],"文件":["150.10"],"es6":["150.12"]},{"0":["31.0","41.1","65.13","108.2"],"1":["6.22"],"3":["91.1","93.18","95.0"],"4":["39.0","62.3","64.2","64.3","65.9","92.8","93.17","93.24","100.1"],"5":["20.0","31.0","33.0","34.0","40.0","98.0","98.1"],"6":["33.0"],"7":["85.3"],"10":["57.0"],"20":["74.8"],"80":["70.0"],"100":["71.6"],"304":["101.0"],"443":["70.0"],"503":["75.4"],"3000":["13.3"],"同一页面在不同分辨率上看起来应该合理":["5.0"],"同一页面在不同操作方式下":["5.0"],"体验应该是统一的":["5.0"],"边框":["5.1"],"适用于容器":["5.1"],"翻转内容":["5.1"],"scale3d":["5.1"],"对内容进行翻转":["5.1"],"适用于内容翻转":["5.1"],"letter":["5.1"],"spacing":["5.1"],"排版倒序文本":["5.1"],"parent":["6.2"],"100px":["6.3","6.14"],"块级元素改为":["6.4"],"或":["6.5"],"是相对于自身尺寸的":["6.5"],"组合使用达到水平居中的目的":["6.5"],"优点":["6.5"],"使用":["6.5","40.0","65.11","84.0","89.1","92.6"],"pc":["6.6"],"端兼容性不好":["6.6"],"缺点":["6.8","63.2","73.0"],"只能用于单行行内内容":["6.8"],"只能用于行内内容":["6.9"],"需要知道高度和最终呈现多少行来计算出":["6.9"],"兼容性较好":["6.10"],"ie8":["6.10"],"items":["6.10","39.0"],"center":["6.10","39.0"],"self":["6.10"],"direction":["6.11"],"column":["6.11"],"justify":["6.11","39.0"],"block":["6.13"],"如果是块级元素需改为行内或行内块级才生效":["6.13"],"vertical":["6.13","38.0"],"auto":["6.14","23.0"],"如果是块级元素就添加这个":["6.14"],"transform":["6.15"],"translate":["6.15"],"left":["6.16","42.1","125.0"],"right":["6.16"],"0f0":["6.19","6.20","6.22","6.24"],"值大于等于":["6.21"],"left的宽度":["6.21"],"均分了父元素剩余空间":["6.22"],"hidden":["6.23"],"触发bfc":["6.23"],"间隔":["6.26"],"在此定义和":["6.26"],"的间隔":["6.26"],"200px":["6.27"],"eeff2b":["6.27"],"自定义事件立即发出":["9.0"],"click":["9.0"],"事件":["9.0"],"并把浏览器在":["9.0"],"替你挑选最近的一个具有缓存内容的节点为你提供资源":["10.0"],"因此可以减少加载时间":["10.0"],"对":["10.0"],"进行压缩":["10.0"],"可以用很多打包工具":["10.0"],"比如":["10.0","90.6"],"webpack":["10.0","81.6"],"gulp":["10.0"],"等":["10.0"],"也可以通过开启":["10.0"],"gzip":["10.0","71.4","93.8"],"压缩":["10.0","93.8"],"合理的使用缓存":["10.0"],"设置":["10.0"],"cache":["10.0"],"control":["10.0"],"expires":["10.0"],"实现网页的动态交互":["12.0"],"v8":["12.0"],"a":["13.0","71.3"],"1190000010719058":["13.0"],"dom":["13.1","14.0","25.0","92.10"],"节点":["13.1"],"ajax":["13.1"],"appendchild":["13.3","96.1"],"http":["13.3","13.4","84.0"],"localhost":["13.3"],"say":["13.3"],"请求地址":["13.3"],"发送复杂请求":["13.4"],"会在正式通信之前":["13.4"],"增加一次":["13.4"],"查询请求":["13.4","76.0"],"前进后退的历史状态":["14.0"],"更新":["14.0","92.5"],"页面":["14.0"],"渲染流程":["14.0"],"渲染进程将":["14.0"],"内容转换为能够读懂的":["14.0"],"树结构":["14.0"],"渲染引擎将":["14.0"],"css":["14.0","53.0","93.25"],"样式表转化为浏览器可以理解的":["14.0"],"stylesheets":["14.0"],"计算出":["14.0"],"都会导致整个进程奔溃":["15.1"],"线程之间共享进程中的数据":["15.1"],"当一个进程关闭后":["15.1"],"负责页面的网络资源加载":["15.2"],"插件进程":["15.2"],"负责插件的运行":["15.2"],"flex":["17.1","39.0"],"grid":["17.1"],"中的元素":["17.1"],"overflow":["17.1","41.1"],"它们的边界会被限制在":["17.2"],"的内部":["17.2"],"私有属性造成的":["18.1"],"color":["18.2"],"transparent":["18.2"],"firefox":["19.0"],"opera":["19.0"],"和":["19.0","89.10"],"ie":["19.0"],"弹性盒子布局":["20.0"],"使用缓存":["21.0"],"使用精灵图":["21.0"],"margin":["22.0","22.1","22.2"],"上下不生效":["22.0"],"padding":["22.1"],"定义在分配多余空间之前":["23.0"],"项目占据的主轴空间":["23.0"],"main":["23.0","81.3"],"size":["23.0","106.0","133.0"],"浏览器根据此属性计算主轴是否有多余空间":["23.0"],"默认值为":["23.0"],"项目原本大小":["23.0"],"项目默认沿主轴排列":["24.0"],"多根轴线的对齐方式":["24.1"],"如果只有一根轴线":["24.1"],"不起作用":["24.1"],"和交叉轴的起点对齐":["24.1"],"和交叉轴终点对齐":["24.1"],"和交叉轴的中点对齐":["24.1"],"可以通过":["25.0"],"js":["25.0","60.1","78.9","92.3"],"操作":["25.0","60.1"],"插入":["25.0"],"标签来改变样式":["25.0"],"也能解决这个问题":["26.0"],"当然将父元素设置为":["26.0"],"是最简单的方法":["26.0"],"第四种情况":["26.0"],"是没有内容的元素":["26.0"],"自身的":["26.0"],"即相对于浏览器窗口":["27.0"],"vw":["28.0"],"通常用于创建动画":["29.0"],"游戏和交互式图形":["29.0"],"如果需要创建可伸缩的图形或需要处理文本或样式的图形":["29.0"],"应该适用":["29.0"],"keyframes定义动画序列":["30.0"],"可以设置动画执行的次数":["30.0"],"父元素设置为绝对定位":["31.0"],"左边元素设置为":["31.0"],"右边元素设置为绝对定位":["31.0"],"左边定位为":["31.0"],"其余方向为":["31.0"],"用于创建一些不在文档树中的元素":["32.0"],"并为其添加样式":["32.0"],"z":["33.0"],"index":["33.0","81.3","118.0"],"负值":["33.0"],"将层级放到底部":["33.0"],"被覆盖":["33.0"],"相当于隐藏了":["33.0"],"为":["34.0","43.0"],"2height":["34.0"],"文本垂直居中设置":["34.0"],"接口合并":["35.0"],"link":["36.0","89.10"],"ref":["36.0"],"preload":["36.0"],"将样式提前预加载":["36.0"],"确保在页面渲染之前样式表已经下载完毕":["36.0"],"则会导致某些帧在显示器刷新之后才能呈现":["37.0"],"orient":["38.0"],"display":["39.0"],"content":["39.0","71.4","84.0"],"align":["39.0"],"解决高度塌陷的问题就叫做清除浮动":["41.0"],"bfc":["41.1"],"布局规则":["41.1"],"给父元素添加":["41.1"],"剩下的就是一个三角形":["42.0"],"盒子模型":["43.0"],"指定":["43.0"],"之间产生间隔":["44.0"],"字体是继承属性":["44.1"],"所以在默认情况下":["44.1"],"子元素的文本内容会根据父元素的字体大小来渲染":["44.1"],"如果父元素的字体大小不设置为":["44.1"],"兄弟选择器":["45.0"],"通配符选择器":["45.0"],"继承":["45.1"],"true":["46.0","65.8","104.0"],"时为捕获":["46.0"],"属性的脚本":["47.0"],"它们的执行顺序是不确定的":["47.0"],"因为它们可能在下载完成后立即执行":["47.0"],"而下载速度快慢不一":["47.0"],"导致顺序混乱":["47.0"],"download":["48.0"],"属性":["48.0","92.7"],"email":["49.0"],"number":["49.0"],"url":["49.0","71.1","89.1"],"等表单类型":["49.0"],"浏览器兼容问题":["50.0"],"搜索引擎的检索程序无法解读这种页面":["50.0"],"text":["51.0"],"id":["51.0","98.1"],"不同":["52.0"],"会在页面加载时立即下载资源":["52.0"],"而不是在后台异步加载":["52.0"],"属性的值请求相应的资源":["53.0"],"如果使用":["53.0"],"来引入":["53.0"],"文件":["53.0","96.3"],"会并行下载资源而且不会停止对当前文档的处理":["53.0"],"close":["54.1"],"window":["54.2","64.5","93.21"],"addeventlistener":["54.2"],"event":["54.2"],"console":["54.2"],"btn":["54.3"],"value":["54.3","114.0","118.0"],"提交":["54.3"],"从":["55.1"],"html5":["55.1","77.0"],"可以看出":["55.1"],"标准是倾向于以语义化的方式构建网页的":["55.1"],"比如新增了":["55.1"],"header":["55.1","70.5"],"footer":["55.1"],"视频等":["55.2"],"abbr":["55.2"],"缩写词":["55.2"],"address":["55.2"],"模块化":["57.0"],"引入了模块化的概念":["57.0"],"提供了更好的代码组织和模块复用的方式":["57.0"],"迭代器和生":["57.0"],"成器":["57.0"],"vue":["58.0","88.1","92.1"],"nexttick1":["58.0"],"nexttick":["58.0"],"的源码实现":["58.0"],"优先级判断":["58.0"],"总结就是":["58.0"],"这里优先使用":["58.0"],"因为根据":["58.0"],"与浏览器更新渲染时机":["58.0"],"对于settimeout中的函数":["59.0"],"存在隐式绑定的丢失":["59.0"],"也就是当讲函数作为参数传递的时候":["59.0"],"会被隐式赋值":["59.0"],"回调函数丢失this绑定":["59.0"],"所以settimeout中函数内的this指向window":["59.0"],"name":["59.0"],"通过设置事件对象的":["60.0"],"returnvalue":["60.0"],"拖拽一个图片到浏览器会自动打开":["60.1"],"点击表单的提交按钮会提交表单":["60.1"],"事件委托":["60.1"],"在":["60.1","70.5","78.3","92.12"],"中性能优化的一个主要思想就是减少":["60.1"],"const":["61.3","128.0","133.0"],"声明变量":["61.3","61.6"],"只能在块级作用域中访问":["61.4"],"不能修改":["61.4"],"这种由多个执行上下文的变量对象构成的链表就叫作用域链":["61.5"],"第三个参数":["61.6"],"将作为":["61.6"],"的参数":["61.6"],"let":["61.6"],"具有块级作用域":["61.6"],"而不是函数作用域":["61.6"],"在每次迭代的时候都会创建一个新的变量":["61.6"],"而不是共享一个全局变量":["61.6"],"当循环执行的时候":["61.6"],"这个查找的路线就是原型链":["62.1"],"一个对象的":["62.3"],"指向其构造函数的":["62.3"],"并将其回收":["63.1"],"释放内存":["63.1"],"垃圾收集后可能会造成大量的内存碎片":["63.2"],"this":["64.0","122.1"],"等信息":["64.0"],"对于每个执行上下文":["64.1"],"都有变量对象":["64.1"],"作用域链":["64.1"],"函数每调用一次就会产生一个新的执行上下文环境":["64.2"],"控制流程到达当前栈中的下一个上下文中":["64.3"],"一旦所有代码都执行完毕":["64.3"],"函数引用":["64.4"],"执行其它代码":["64.4"],"在浏览器中":["64.5"],"在使用之前就需要确认其变量数据类型的语言":["65.0"],"数学函数":["65.1"],"math":["65.1","138.0"],"正则对象":["65.1"],"regexp":["65.1"],"所以":["65.2","65.3","78.2","81.6"],"keys":["65.3"],"都是获取不到的":["65.3"],"构造函数来创建":["65.4"],"访问对象上不存在的属性或者没有定义的变量":["65.5"],"函数定义了形参":["65.5"],"但是调用的时候":["65.5"],"没有传递实参":["65.5"],"但是":["65.6"],"表示为全零":["65.6"],"原始类型的数据直接完整地复制变量值":["65.7"],"对象数据类型的数据则是复制引用地址":["65.7"],"基于原型链和构造函数":["65.8"],"但是不能检测基本数据类型":["65.8"],"prototype":["65.8"],"es5":["65.9","150.12"],"新增的":["65.9"],"isarray":["65.9"],"false":["65.10"],"json":["65.10","96.3"],"stringfy":["65.10"],"运算之后再转换为小数":["65.11"],"tofixed":["65.11"],"控制小数点后的位数":["65.11"],"不会进行数据类型的转换":["65.12"],"这种方法对于判断":["65.12"],"nan":["65.13"],"return":["65.15","96.1","129.0","135.0","141.0","142.0"],"无法解析":["65.16"],"返回":["65.16"],"null":["65.17","107.0","143.0"],"除外":["65.17"],"不接受其他类型的值作为健名":["65.17"],"健名所指向的对象":["65.17"],"不计入垃圾回收机制":["65.17"],"监听请求":["66.0"],"接受响应":["66.0"],"onreadysatechange":["66.0"],"function":["66.0"],"if":["66.0","89.2","107.0","108.1","108.2","122.0","126.0","136.0"],"readysate":["66.0"],"请求":["66.1"],"提供了更多的功能和选项":["66.1"],"同时保证较好的服务质量":["67.0"],"作用":["67.0"],"使用户就近获取所需内容":["67.0"],"降低网络拥塞":["67.0"],"提高用户访问响应速度和命中率":["67.0"],"原理":["67.0"],"最简单的":["67.0"],"网络由一个":["67.0"],"dns":["67.0"],"服务器和几台缓存服务器组成":["67.0"],"而工作的核心就是缓存服务器":["67.0"],"它记录了用户所需内容":["67.0"],"而且离用户较近":["67.0"],"服务器返回":["68.0"],"请求进行缓存":["69.0"],"请求会修改服务器上的资源":["69.0"],"是不安全的":["69.0"],"多次提交会创建多个资源":["69.0"],"默认端口":["70.0"],"将信息加密":["70.1"],"使得交易信息不能被获取":["70.1"],"通过校验机制":["70.1"],"客户端和服务端根据约定的加密方法":["70.3"],"使用前面的三个随机数":["70.3"],"生成":["70.3"],"对话密钥":["70.3"],"不过前提是得解决双方都能安全的拿到这把对称密钥":["70.4"],"这时候就可以里用非对称密钥加密来传输这把对称密钥":["70.4"],"因为我们知道非对称密钥加密的优点就是能保证传输的内容是安全的":["70.4"],"所以它的好处是即保证了对称密钥能在双方之间安全的传输":["70.4"],"又能使用对称加密方式进行通信":["70.4"],"这比单纯的使用非对称加密通信快了很多":["70.4"],"以此来解决了":["70.4"],"中内容可能被窃听的问题":["70.4"],"混合加密的缺点":["70.4"],"request":["70.5"],"uri":["71.1"],"状态码":["71.1"],"内容很容易被窃取":["71.2"],"但是服务器必须按照接收请求的顺序发送对这个管道化请求的响应":["71.3"],"如果服务端在处理":["71.3"],"请求耗时比较长":["71.3"],"就会导致后续的请求的处理都会被堵塞":["71.3"],"这就是":["71.3"],"队头堵塞":["71.3"],"代码文件中会有很多换行符或空格":["71.4"],"目的是为了更好的可读性":["71.4"],"但是机器执行的时候不需要这些符合":["71.4"],"所以可以把这些多余的字符去除":["71.4"],"就是常见的无损压缩":["71.4"],"客户端也支持":["71.4"],"客户端会在请求中提高头部":["71.4"],"accept":["71.4"],"encoding":["71.4","72.0"],"字段告知服务器支持的压缩算法":["71.4"],"服务器从中选择一个服务器支持的合适的压缩算法":["71.4"],"使用这个算法对代码进行压缩":["71.4"],"通过响应头中的":["71.4"],"字段告诉客户端当前资源使用的压缩算法":["71.4"],"服务器应该选择压缩效率更高的":["71.4"],"br":["71.4"],"压缩算法":["71.4"],"有损压缩":["71.4"],"构成":["71.6"],"一个":["71.6"],"可以由多个":["71.6"],"报文构成":["71.6"],"当":["71.6","81.12","93.16"],"实现":["71.6"],"个并发":["71.6"],"时":["71.6","81.12"],"只需要建立一次":["71.6"],"而":["71.6","74.8","91.4"],"需要建立":["71.6"],"每个":["71.6"],"连接都要经过":["71.6"],"本次数据是什么格式":["72.0"],"实现访问控制功能":["73.0"],"集群":["73.0"],"通过集群功能":["73.0"],"实现多台服务器之间的动态负载均衡":["73.0"],"传输加密":["73.0"],"支持多种对称和非对称加密算法":["73.0"],"保证用户信息在传输过程中不被窃取和篡改":["73.0"],"为了兼容多种设备":["74.0"],"就协商出了一套通用的网络协议":["74.0"],"字节流":["74.1"],"网络层":["74.2"],"完成实际的传输功能":["74.2"],"最常使用的是":["74.2"],"协议":["74.2"],"层将传输层的报文作为数据部分":["74.2"],"加上":["74.2"],"包头组成":["74.2"],"表示希望建立连接":["74.3"],"fin":["74.3"],"来负责":["74.4"],"工作在传输层":["74.4"],"将服务端的":["74.5"],"作为确认应答号":["74.5"],"最后把报文发给服务端":["74.5"],"这次报文可以携带客户到服务端的数据":["74.5"],"之后客户端处于":["74.5"],"established":["74.5"],"报文之后":["74.6"],"就处于关闭连接了":["74.6"],"处于":["74.6"],"服务端在收到客户端断开连接":["74.6"],"报文后":["74.6"],"是加密的":["74.7"],"只有服务器能够解密":["74.7"],"里面包含了本次会话的信息":["74.7"],"比如对话秘钥和加密方法等":["74.7"],"这样不管我们的请求是否转移到其他的服务器上":["74.7"],"当服务器将":["74.7"],"对多":["74.8"],"的首部较大为":["74.8"],"字节":["74.8"],"只有":["74.8"],"用于http分块下载或断点续传":["75.1"],"表示响应返回的body数据不是资源的全部":["75.1"],"not":["75.2"],"modified":["75.2"],"表示资源未修改":["75.2"],"found":["75.3"],"请求的资源在服务器上找不到或不存在":["75.3"],"表示服务器当前很忙":["75.4"],"称为":["76.0"],"预检请求":["76.0"],"该请求的方法是":["76.0"],"是":["77.0"],"定义的一个新协议":["77.0"],"与传统的":["77.0"],"协议不同":["77.0"],"该协议允许由服务器主动的向客户端推送信息":["77.0"],"缓存分为强缓存和协商缓存":["78.0"],"强缓存的优先级高于协商缓存":["78.0"],"也可以被代理服务器缓存":["78.1"],"如果设置了":["78.1"],"则只能被浏览器缓存":["78.1"],"为默认值":["78.1"],"一般情况下":["78.1"],"不需要单独设置":["78.1"],"因为一般情况下会同时写":["78.1"],"这就表明是可以被浏览器和代理服务器缓存的":["78.1"],"no":["78.1"],"store":["78.1","93.16","93.21"],"就是不同的":["78.2"],"能精准的感知文件的变化":["78.2"],"当首次请求的时候":["78.2"],"会在响应头里获取到一个最初的标识字符串":["78.2"],"那么在下一次请求的时候":["78.2"],"请求头中就会带有一个值相同的":["78.2"],"名为":["78.2"],"none":["78.2"],"match":["78.2"],"的字符串供服务端比对了":["78.2"],"install":["78.3"],"active":["78.3"],"working":["78.3"],"一旦被":["78.3"],"将始终存在":["78.3"],"之间切换":["78.3"],"server":["78.3"],"会带来巨大的性能浪费":["78.5"],"同一个域名下的所有请求":["78.5"],"都会携带":["78.5"],"10m":["78.7"],"只位于浏览器端":["78.7"],"往往被用来存储静态资源":["78.9"],"就是":["78.9","117.2"],"documentelement":["79.0"],"clientheight":["79.0"],"另一个是元素距离可视区域顶部的高度":["79.0"],"getclientrects":["79.0"],"只执行最后一次":["79.1"],"加载完":["80.0"],"之后还需要把这部分":["80.0"],"代码在浏览器上跑一遍":["80.0"],"这一切发生在用户点击了链接之后发生的事":["80.0"],"在这个过程结束之前":["80.0"],"树和":["80.1"],"结合":["80.1"],"得到渲染树":["80.1"],"布局渲染树":["80.1"],"从根节点递归调用":["80.1"],"计算每一个元素的大小":["80.1"],"位置等":["80.1"],"默认会阻塞浏览器":["80.2"],"浏览器必须等待当前":["80.2"],"脚本执行完毕才会去继续做其它的事情":["80.2"],"async":["80.2"],"模式下":["80.2"],"不会阻塞浏览器做任何其它的事情":["80.2"],"加载是异步的":["80.2"],"当它加载结束":["80.2"],"脚本会立即执行":["80.2"],"不能保证脚本的执行顺序":["80.2"],"避免逐条改变样式":["80.3"],"使用类名去合并样式":["80.3"],"离线化":["80.3"],"先把元素":["80.3"],"优化有两个大方向":["81.0"],"减少请求次数和减少单次请求所花费的时间":["81.0"],"主要通过":["81.0"],"这样至少可以将":["81.2"],"的工作效率提升两倍":["81.2"],"当然":["81.2"],"mode":["81.3"],"production":["81.3"],"编译入口":["81.3"],"src":["81.3","93.25"],"目标文件":["81.3"],"只需要把":["81.4"],"laoder":["81.4"],"的配置转移到":["81.4"],"bugcomponent":["81.5"],"default":["81.5"],"bug":["81.5"],"route":["81.5"],"path":["81.5"],"核心就是":["81.5"],"的性能不是无限的":["81.6"],"如果存在大量的压缩需求":["81.6"],"服务器也是扛不住的":["81.6"],"如果服务器慢下来了":["81.6"],"用户还是要等":["81.6"],"如果一个图片格式对应的二进制位数有":["81.7"],"n":["81.7"],"个":["81.7"],"那么它就可以呈现":["81.7"],"文件体积也不会太大":["81.8"],"但是也存在一定的缺陷":["81.8"],"当处理矢量图形和":["81.8"],"logo":["81.8"],"等线条感较强":["81.8"],"去处理较复杂的图片":["81.9"],"所有会优先选择":["81.9"],"为后缀的独立文件":["81.10"],"使得":["81.10"],"文件可以被非常多的工具读取和修改":["81.10"],"的时间开销":["81.11"],"和节省掉的":["81.11"],"请求开销相比":["81.11"],"可以忽略不计":["81.11"],"此时才能体现出优势":["81.11"],"什么时候才会用":["81.11"],"满足以下条件":["81.11"],"字段包含":["81.12"],"image":["81.12"],"referer":["82.0"],"hash":["83.0"],"掉密码和敏感的信息":["83.0"],"防护原理":["83.0"],"使用参数化查询或预编译语句":["83.0"],"头部中的":["84.0"],"ssl":["85.0"],"但是将数据解密必须使用私钥解密":["85.1"],"私有只有分发公钥的一方才知道":["85.1"],"因为公钥是公开的":["85.2"],"拥有对应公钥的黑客可以用这个公钥进行解密得到里面的信息":["85.2"],"公钥中没有包含服务器的信息":["85.2"],"对传输的数据进行对称加密":["85.3"],"把对称加密后的内容传递给客户端":["85.3"],"整个过程中":["85.4"],"由于缺少了证书的验证过程":["85.4"],"虽然使用了":["85.4"],"刷屏或在论坛上发布大量无意义的帖子":["87.0"],"watcher":["88.0"],"存入到对应属性的依赖中":["88.0"],"手动注销":["88.1"],"用于观察和监听页面上的":["88.1"],"实例":["88.1"],"用于依赖发生变化时":["88.2"],"触发属性重新计算":["88.2"],"若出现当前":["88.2"],"计算属性嵌套其他":["88.2"],"同时也会引入判断机制":["88.3"],"确保在多个属性更新时回调函数仅触发一次":["88.3"],"避免性能浪费":["88.3"],"params":["89.2"],"polypill":["89.3"],"插件解决":["89.3"],"当调用他们修改浏览器历史记录栈后":["89.4"],"虽然当前":["89.4"],"改变了":["89.4"],"但浏览器不会刷新页面":["89.4"],"这就为单页应用前端路由":["89.4"],"提供了基础":["89.4"],"路由模式的实现主要基于存在下面几个特性":["89.4"],"repalcestate":["89.4"],"两个":["89.4"],"api":["89.4","92.9","93.25"],"来操作实现":["89.4"],"的变化":["89.4"],"内部提供导航方法":["89.5"],"navigate":["89.5","89.8"],"用户点击之后实际调用的是该方法":["89.5"],"此方法最终会修改响应式的路由变量":["89.5"],"然后重新去":["89.5"],"routes":["89.5"],"匹配出数组结果":["89.5"],"从触发事件的监听上来说":["89.6"],"replacestate":["89.6"],"不能被":["89.6"],"并全局监听":["89.7"],"控制的范围更精确了":["89.8"],"用户的任何导航行为都会走":["89.8"],"方法":["89.8"],"内部有个":["89.8"],"webpackchunkname":["89.9"],"group":["89.9"],"user":["89.9"],"view":["89.10"],"分别实现页面跳转和内容显示":["89.10"],"进行遍历":["90.0"],"支持数组":["90.0"],"不需要对数组的方法进行重载":["90.0"],"object":["90.1"],"defineproperty":["90.1"],"的回调函数会接收新值和旧值作为参数":["90.2"],"可以根据需要进行比较和处理":["90.2"],"减少了":["90.3"],"指向不明的情况":["90.3"],"如果是小型组件":["90.3"],"可以继续使用":["90.3"],"更好的代码组织":["90.4"],"更好的逻辑抽离":["90.4"],"其他沿用":["90.5"],"不能放在循环":["90.6"],"判断":["90.6"],"里面":["90.6"],"在兼顾":["90.7"],"vue2":["90.7"],"的":["90.7"],"options":["90.7"],"的同时还推出了":["90.7"],"过程":["90.8"],"打包时更好的支持":["90.8"],"tree":["90.8"],"shaking":["90.8"],"把对象数据":["90.9"],"分解":["90.9"],"扩散":["90.9"],"前端":["90.9"],"针对的是响应式对象":["90.9"],"封装的":["90.9"],"非普通对象":["90.9"],"可以照常使用":["90.10"],"从而方便编码":["91.1"],"另外":["91.1"],"会返回":["91.1"],"promise":["91.1"],"实例便于处理内部异步结果":["91.1"],"实现上":["91.1"],"首选":["91.2"],"方法会被所有":["91.2"],"commit":["91.2","93.16"],"行为触发":["91.2"],"因此还需要判断":["91.2"],"类似的插件有":["91.3"],"persist":["91.3"],"persistedstate":["91.3"],"都推荐使用":["91.4"],"ts":["91.4"],"来编写":["91.4"],"这个时候使用":["91.4"],"就非常合适了":["91.4"],"无需再创建各个模块嵌套了":["91.4"],"中如果数据过多":["91.4"],"我们通常分模块来进行管理":["91.4"],"稍显麻烦":["91.4"],"方法中可以获取用户传入":["91.5"],"mutations":["91.5"],"并执行它":["91.5"],"这样可以按用户提供的方法修改状态":["91.5"],"在数据变动时发布消息给订阅者":["92.0"],"触发相应的监听回调":["92.0"],"的返回值是":["92.1"],"的虚拟":["92.1"],"而是将这":["92.3"],"次更新的":["92.3"],"diff":["92.3"],"内容保存到本地的一个":["92.3"],"对象中":["92.3"],"最终将这个":["92.3"],"缺陷是不能检索索引更改和数组长度的更改":["92.4"],"数组中的元素也会被再次观测":["92.4"],"比如有一个":["92.6"],"ul":["92.6"],"其中有三个":["92.6"],"li":["92.6"],"checkbox":["92.6"],"包裹":["92.6"],"当选择一个复选框时":["92.6"],"可以点击删除按钮将其删除":["92.6"],"如果不设置":["92.6"],"函数触发依赖收集":["92.7"],"内部还会给所有的响应式数据增加":["92.7"],"dep":["92.7"],"让属性记录当前的":["92.7"],"过程是一个递归过程":["92.8"],"遵循深度优先":["92.8"],"同层比较的策略":["92.8"],"以":["92.8"],"vue3":["92.8"],"为例":["92.8"],"首先判断两个节点是否为相同同类节点":["92.8"],"不同则删除重新创建":["92.8"],"如果双方都是文本则更新文本内容":["92.8"],"如果双方都是元素节点则递归更新子元素":["92.8"],"同时更新元素属性":["92.8"],"从而作出响应":["92.9"],"这种机制很好的解决了数据响应化的问题":["92.9"],"但在实际使用中也存在一些缺点":["92.9"],"比如初始化时的递归遍历会造成性能损失":["92.9"],"新增或删除属性时需要用户使用":["92.9"],"set":["92.9"],"delete":["92.9","119.0"],"这样特殊的":["92.9"],"才能生效":["92.9"],"对于":["92.9"],"es6":["92.9"],"中新产生的":["92.9"],"map":["92.9"],"这些数据结构不支持等问题":["92.9"],"为了解决这些问题":["92.9"],"vnode":["92.10"],"转换为":["92.10"],"去重之后放到队列中":["92.11"],"然后通过":["92.11"],"内部":["92.12"],"之所以能够让我们看到":["92.12"],"更新后的结果":["92.12"],"是因为我们传入的":["92.12"],"会被添加到队列刷新函数":["92.12"],"flushschedulerqueue":["92.12"],"方法的语法糖":["92.13"],"复杂度的问题":["92.14"],"只比较同级不考虑跨级问题":["92.14"],"比较新旧虚拟节点":["93.0"],"找到变化再进行更新":["93.0"],"会影响到所有的实例":["93.1"],"所以为了保证组件在不同的实例之间":["93.1"],"不冲突":["93.1"],"都能控制":["93.2"],"元素在页面的显示":["93.2"],"开销更大的":["93.2"],"直接操作":["93.2"],"执行的时候":["93.3"],"调用的变量还不存在":["93.3"],"就会导致异常":["93.3"],"如果一定要一起使用":["93.3"],"可以把":["93.3"],"domname":["93.4"],"来获取":["93.4"],"v":["93.5"],"cloak":["93.5"],"disply":["93.5"],"action":["93.6"],"前进后退路由难管理":["93.7"],"seo":["93.7"],"难度大":["93.7"],"怎么解决":["93.7"],"ssr":["93.7"],"开启":["93.8"],"当组件被移除时":["93.9"],"的中还运用了":["93.9"],"实现非父子组件通信":["93.10"],"算法":["93.11"],"组件级":["93.11"],"会以组件的数据为准":["93.12"],"有很多缺陷如":["93.12"],"命名冲突":["93.12"],"进行更新的时候":["93.13"],"会通过数据绑定更新到":["93.13"],"业务逻辑层":["93.13"],"需要什么数据":["93.13"],"要提供这个数据":["93.13"],"将来":["93.14"],"的时候":["93.14"],"如果发现是一个":["93.14"],"无状态":["93.15"],"没有生命周期":["93.15"],"所以渲染性能要好于普通组件":["93.15"],"函数式组件结构比较简单":["93.15"],"代码结构更清晰":["93.15"],"使用场景":["93.15","93.19"],"一个简单的展示组件":["93.15"],"作为容器组件使用":["93.15"],"应用的核心就是":["93.16"],"仓库":["93.16"],"基本上就是一个容器":["93.16"],"它包含着你的应用中大部分的状态":["93.16"],"state":["93.16","93.21"],"的状态存储是响应式的":["93.16"],"组件从":["93.16"],"中读取状态的时候":["93.16"],"若":["93.16"],"中的状态发生变化":["93.16"],"那么相应的组件也会相应地得到高效更新":["93.16"],"改变":["93.16"],"中的状态的唯一途径就是显式地提交":["93.16"],"也可以用于组件扩展":["93.17"],"组件选项中还有一个不太常用的选项":["93.17"],"最好使用这个":["93.18"],"的值来定义一个计算属性":["93.18"],"实践中如果确实想要改变父组件属性应该":["93.18"],"全局注册":["93.19"],"与":["93.19"],"局部注册":["93.19"],"插件的注册通过":["93.19"],"的方式进行注册":["93.19"],"安装":["93.19"],"第一个参数为插件的名字":["93.19"],"第二个参数是可选择的配置项":["93.19"],"component":["93.19"],"是用来构成你的":["93.19"],"app":["93.19"],"update":["93.20"],"stroe":["93.21"],"里":["93.21"],"这样":["93.21"],"在客户端挂载到":["93.21"],"之前":["93.21"],"可以直接从":["93.21"],"里取数据":["93.21"],"首屏的动态数据通过":["93.21"],"initial":["93.21"],"发送到客户端":["93.21"],"的实现":["93.21"],"主要就是把":["93.21"],"的组件输出成一个完整":["93.21"],"renderer":["93.21"],"就是干这事的":["93.21"],"直接删除了数组":["93.22"],"改变了数组的键值":["93.22"],"会以":["93.24"],"的方式调用":["93.24"],"之类的公共文件":["93.25"],"会被打包到":["93.25"],"dist":["93.25"],"根目录下":["93.25"],"用来放项目代码文件":["93.25"],"的一些接口配置":["93.25"],"assets":["93.25"],"用来放一些":["93.25"],"之类的静态资源":["93.25"],"虚拟":["94.0"],"重新渲染之前被触发":["94.0"],"可以在当前阶段进行数据更改":["94.0"],"不会造成重新渲染":["94.0"],"更新完成之后发生":["94.0"],"当前阶段":["94.0"],"已完成更新":["94.0"],"需要注意的是在此期间应该避免更改数据":["94.0"],"因为可能会导致无限循环的更新":["94.0"],"实例销毁之前发生":["94.0"],"在当前阶段实例完全可以被使用":["94.0"],"可以在这个阶段进行清除定时器等工作":["94.0"],"比如地图库":["94.1"],"图表库":["94.1"],"可以在这里销毁这些库的实例":["94.1"],"销毁过程":["94.2"],"beforedestroy":["94.2"],"准备好才执行一些操作":["94.3"],"generator":["95.0"],"代码":["96.0"],"加载并且压缩图片文件":["96.3"],"babel":["96.3"],"在特定的时间对资源做处理":["97.1"],"分为同步和异步的钩子":["97.2"],"异步钩子必须执行对应的回调":["97.2"],"module":["97.2"],"最终生成一个可以在浏览器加载执行的js文件":["98.0"],"同时每个模块生成一个唯一的":["98.1"],"并将解析过的":["98.1"],"模块缓存":["98.1"],"起来":["98.1"],"如果其他地方也引入该模块":["98.1"],"就无需重新解析":["98.1"],"最后根据依赖关系生成依赖图谱":["98.1"],"根据文件内容来定义":["99.0"],"文件内容不变":["99.0"],"节省开发时间":["100.0"],"提升开发体验":["100.0"],"当文件变化后":["100.1"],"重新编译":["100.1"],"编译结束后":["100.1"],"通知浏览器请求变化的资源":["100.1"],"同时将新生成的":["100.1"],"responsetext":["101.0"],"else":["101.0","102.0","108.0","117.4","120.0","129.0","134.2","142.0"],"bind返回的函数作为普通函数被调用时":["102.0"],"contextf":["102.0"],"input":["103.0"],"reduceright":["103.0"],"result":["103.0"],"放到任务队列尾部":["105.0"],"eat":["105.0"],"如果缓存已满":["106.0"],"返回该对象":["107.0"],"typeof":["107.0"],"instanceof":["108.0"],"假如返回值为普通值":["108.0"],"resolve传递出去":["108.0"],"同理":["108.0"],"判断rejectcallback事件的返回值":["108.0"],"reject传递出去":["108.0"],"输出结果的顺序和promises的顺序一致":["108.1"],"settimeout":["108.2"],"执行回调":["109.0"],"clearinterval":["109.0"],"清除定时器":["109.0"],"调用on方法":["113.0"],"将fn添加为回调函数":["113.0"],"触发事件":["113.0"],"emit":["113.0"],"rest":["113.0"],"如果存在":["113.0"],"依次调用所有回调函数":["113.0"],"foreach":["114.0"],"key":["114.0","133.0"],"setattribute":["114.0"],"pop":["115.0","116.0"],"如果":["117.1"],"对应元素不是目前的头部元素":["117.1"],"则交换两者":["117.1"],"循环让位":["117.2"],"最后得到的":["117.2"],"交换当前元素和左边界元素":["117.3"],"push":["117.4","130.0"],"若其中一个子数组首先被合并完全":["117.4"],"则直接拼接另一个子数组的剩余部分":["117.4"],"使用filter":["118.0"],"filter":["118.0"],"大于等待时间就把":["122.0"],"设置为当前时间并执行函数":["122.0"],"apply":["122.1"],"end":["122.1","125.0"],"翻转从":["125.0"],"到":["125.0"],"的字符":["125.0"],"length":["126.0","132.0","136.0"],"res":["128.0"],"for":["128.0"],"num":["128.0"],"get":["129.0"],"num3":["131.0"],"num4":["131.0"],"target":["131.0"],"parseint":["132.0"],"val1":["133.0"],"val2":["133.0"],"直到找到元素或者确定不存在":["134.0"],"继续查找右半部分":["134.1"],"重复":["134.1"],"min":["138.0"],"返回要删除的节点":["141.0"],"获取链表长度":["141.0"],"flag":["142.0"],"next":["146.0"],"d":["150.0"],"打包后的文件名":["150.1"],"resolve":["150.1"],"使用自定义模板":["150.3"],"可选":["150.3"],"filename":["150.3"],"use":["150.4"],"资源":["150.5"],"执行顺序":["150.7"],"默认从右向左":["150.7"],"转化成":["150.12"],"outputpath":["150.13"]},{"1":["6.24","6.27"],"2":["81.7"],"4":["36.0"],"5":["100.1"],"6":["98.1"],"8":["74.8"],"11":["57.0"],"200":["66.0"],"304":["66.0"],"404":["89.4"],"同一页面在不同类型的设备上":["5.0"],"交互方式应该是符合习惯的":["5.0"],"设置负值字体间距将文本倒序":["5.1"],"适用于文言文":["5.1"],"margin":["5.1"],"left":["5.1"],"排版左重右轻列表":["5.1"],"横行布局时":["5.1"],"最后一个元素通过设置":["5.1"],"实现向右对齐":["5.1"],"适用于右侧带图标的导航栏":["5.1"],"换行":["6.4"],"空格会产生元素间隔":["6.4"],"兼容性好":["6.5"],"不管是块级还是行内都能实现":["6.5"],"缺点":["6.5"],"代码较多":["6.5"],"脱离文档流":["6.5"],"兼容性不好":["6.5"],"需要知道高度的值":["6.8"],"的值":["6.9"],"这个尚未搞清楚":["6.10"],"应该是":["6.10"],"使":["6.10"],"上下边界无限延伸至剩余空间并平分了":["6.10"],"content":["6.11","40.0"],"middle":["6.13"],"50px":["6.14"],"self":["6.17","118.0"],"大于等于":["6.19"],"left的宽度":["6.19"],"hidden":["6.20","6.26"],"触发bfc达到自适应":["6.20"],"0f0":["6.21","6.23","6.27"],"一列不定":["6.22"],"一列自适应":["6.22"],"盒子宽带随着内容增加或减少发生变化":["6.22"],"另一个盒子自适应":["6.22"],"均分":["6.24","6.27"],"parent剩余的部分":["6.24"],"触发":["6.26","41.1"],"bfc":["6.26"],"parent剩余的部分达到自适应":["6.27"],"之后真正的":["9.0"],"事件阻止掉":["9.0"],"还可以解决穿透问题":["9.0"],"以及":["10.0"],"e":["10.0"],"tag":["10.0"],"都是不错的":["10.0"],"不过要注意一个问题":["10.0"],"就是文件更新后":["10.0"],"你要避免缓存而带来的影响":["10.0"],"其中一个解决防范是在文件名字后面加一个版本号":["10.0"],"减少":["10.0"],"http":["10.0"],"请求数":["10.0"],"将多个":["10.0"],"文件合并":["10.0"],"或者是干脆直接写成内联样式":["10.0"],"内联样式的一个缺点就是不能缓存":["10.0"],"spidermonkey":["12.0"],"firefox":["12.0"],"发送请求后":["13.1"],"结果被浏览器拦截了":["13.1"],"iloveyou":["13.3"],"参数":["13.3"],"then":["13.3"],"console":["13.3","66.0"],"log":["13.3","54.2","66.0"],"预检请求":["13.4"],"option":["13.4","76.0"],"方法":["13.4","89.1"],"通过这个请求来获取服务端是否允许跨域请求":["13.4"],"节点的样式":["14.0"],"创建布局树":["14.0"],"并计算元素的布局信息":["14.0"],"对布局树进行分层":["14.0"],"并生成分层树":["14.0"],"为每个图层生成绘制列表":["14.0"],"并将其提交到合成线程":["14.0"],"合成线程将图层分成图块":["14.0"],"并在光栅化线程池中将图块转换成位图":["14.0"],"合成线程发送绘制图块命令":["14.0"],"drawquad":["14.0"],"给浏览器进程":["14.0"],"浏览器进程根据":["14.0"],"消息生成页面":["14.0"],"并显示到显示器上":["14.0"],"操作系统会回收进程所占用的内存":["15.1"],"进程之间的内容相互隔离":["15.1"],"通过插件进程进行隔离":["15.2"],"保证插件进行奔溃不会对浏览器和页面造成影响":["15.2"],"属性值不为":["17.1"],"visible":["17.1"],"的元素":["17.1"],"阻止它们的边界垂直交叠":["17.2"],"display":["19.0","80.3"],"none":["19.0","80.3","93.5"],"没有什么区别":["19.0"],"媒体查询":["20.0"],"使用硬件加速":["21.0"],"之后":["23.0"],"因为有":["23.0"],"的设置会自动放大或缩小":["23.0"],"和交叉轴两端对齐":["24.1"],"轴线之间的间隔平均分布":["24.1"],"每根轴线两侧的间隔都相等":["24.1"],"轴线占满整个交叉轴":["24.1"],"当空间不足时":["24.2"],"等比例缩小":["24.2"],"basis":["24.2"],"由于":["25.0"],"方法是基于文档的":["25.0"],"无法使用":["25.0"],"的方式插入样式":["25.0"],"发生的重叠":["26.0"],"我们可以通过为其设置":["26.0"],"pa":["26.0"],"dding":["26.0"],"或者高度来解决这个问题":["26.0"],"height":["28.0","34.0"],"视口的高":["28.0"],"如果需要创建动画":["29.0"],"游戏或交互式图形":["29.0"],"不需要触发特定状态即可执行":["30.0"],"top":["31.0"],"bottom":["31.0"],"单冒号":["32.0"],"会生成新的元素":["32.0"],"transform":["33.0"],"scale":["33.0"],"将元素缩放为":["33.0"],"依然占据空间":["33.0"],"不可交互":["33.0"],"line":["34.0"],"使用媒体查询避免不必要的样式加载":["36.0"],"通过媒体查询在适当的条件下加载特定的样式":["36.0"],"避免在不需要的情况下加载不必要的样式":["36.0"],"造成不连续的动画效果":["37.0"],"出现跳帧现象":["37.0"],"skyblue":["39.0"],"flex":["40.0"],"布局":["40.0"],"justify":["40.0"],"或":["41.1","89.4"],"auto":["41.1"],"yellow":["42.1"],"inherit":["43.0"],"时":["43.0"],"会从父元素继承":["43.0"],"由于字体的基线对齐":["44.1"],"子元素之间可能会存在一些额外的空白间隙":["44.1"],"浏览器默认":["45.1"],"false":["46.0","60.0"],"则为冒泡":["46.0"],"它们的执行顺序是按照它们在文档中出现的顺序执行的":["47.0"],"保证了它们之间的顺序性":["47.0"],"变为下载链接":["48.0"],"queryselector":["49.0"],"queryselectorall":["49.0"],"不利于":["50.0"],"seo":["50.0"],"适用于当前页面需要用到的重要资源":["52.0"],"以优化关键资源的加载时间":["52.0"],"这也是为什么建议使用":["53.0"],"方式来加载":["53.0"],"而不是":["53.0"],"import":["53.0"],"的方式":["53.0"],"关闭连接":["54.1"],"newvalue":["54.2"],"页面2":["54.3"],"这些语义标签":["55.1"],"删除了":["55.1"],"big":["55.1"],"font":["55.1"],"这些没有语义的标签":["55.1"],"联系信息":["55.2"],"cite":["55.2"],"标记引用的作者或来源":["55.2"],"引入了迭代器和生成器的概念":["57.0"],"可以通过自定义迭代器来遍历数据集合":["57.0"],"并使用生成器函数来生成迭代器":["57.0"],"管道操作符":["57.0"],"提案阶段的特性":["57.0"],"引入了管道操作符":["57.0"],"可以将表达式的结果作为参数传递给下一个表达式":["57.0"],"简化了函数调用和方法链的写法":["57.0"],"使用微任务":["58.0"],"本次":["58.0"],"轮询就可以获取到更新的":["58.0"],"如果使用宏任务":["58.0"],"要到下一次":["58.0"],"中":["58.0","94.0"],"才能获取到更新的":["58.0"],"domnode":["58.0"],"process":["58.0"],"执行顺序早于微任务":["58.0"],"return":["59.0","107.0","112.0","117.1","117.2","118.0","119.0","124.0","126.0","127.0","131.0","136.0","137.0","138.0","140.0","144.0","146.0"],"对于obj":["59.0"],"函数的调用":["59.0"],"它的外层作用域是window":["59.0"],"因为对象obj不属于作用域":["59.0"],"所以会打印window":["59.0"],"第一个this":["59.0"],"name指向的就是调用者obj":["59.0"],"返回的匿名函数是一个箭头函数":["59.0"],"this由外层函数决定":["59.0"],"所以和foo函数的this一样":["59.0"],"指向obj":["59.0"],"来阻止默认事件":["60.0"],"事件委托是利用了事件的冒泡原理实现的":["60.1"],"当我们为最外层的节点添加点击事件":["60.1"],"那么里面的":["60.1"],"ul":["60.1"],"li":["60.1"],"的点击事件会冒泡到最外层节点上":["60.1"],"委托它代为执行事件":["60.1"],"这个变量在块级作用域外无法被访问":["61.3"],"会在每次迭代中创建一个新的块级作用域":["61.6"],"并在这个作用域内声明一个新的变量":["61.6"],"不会污染外部作用域":["61.6"],"所以在每个回调函数中都能访问到正确的":["61.6"],"值":["61.6","92.12"],"函数创建的对象":["62.3"],"该函数":["62.3"],"this":["64.1","94.0","122.0"],"这三个属性":["64.1"],"引擎从当前栈中移除全局执行上下文":["64.3"],"就是全局对象":["64.5"],"日期对象":["65.1"],"date":["65.1"],"数据类型的主要作用就是为对象添加独一无二的属性名":["65.2"],"类型的属性也适合作为对象的私有属性":["65.3"],"使用":["65.5","77.0","83.0","93.8","94.3"],"void":["65.5"],"对表达式求值":["65.5"],"所以误判为对象":["65.6"],"tostring":["65.8"],"call":["65.8","94.0"],"constructor":["65.8"],"支持基本数据类型":["65.8"],"方法判断一个值是否为数组":["65.9"],"然后判断是否等于":["65.10"],"将结果四舍五入到指定的精度":["65.11"],"将相加的结果和右边相减":["65.11"],"如果相减的结果小于一个极小数":["65.11"],"就可以认定结果是相等的":["65.11"],"更准确":["65.12"],"方法同":["65.17"],"get":["65.17"],"status":["66.0"],"responsetxml":["66.0"],"如拦截请求和响应":["66.1"],"转换数据":["66.1"],"取消请求等":["66.1"],"负载较小":["67.0"],"因此提高了服务器响应速度":["67.0"],"实际上":["67.0"],"的工作过程要更复杂":["67.0"],"为了便于理解":["67.0"],"上面只是简述":["67.0"],"我们从用户访问一个":["67.0"],"url":["67.0"],"地址说起":["67.0"],"访问url":["67.0"],"cname指向的cdn专用dns服务器对url解析":["67.0"],"负载均衡设备根据解析的ip地址和内容选择一台缓存服务器":["67.0"],"返回缓存服务器ip地址给用户":["67.0"],"地址给本地服务器":["68.0"],"本地服务器缓存解析结果":["68.0"],"返回解析结果给用户":["68.0"],"不是幂等的":["69.0"],"浏览器一般不会缓存":["69.0"],"请求":["69.0"],"需要向":["70.0"],"ca":["70.0"],"申请数字证书":["70.0"],"保证服务器的身份是可信的":["70.0"],"使得不能篡改通信内容":["70.1"],"通过数字证书保证服务器的合法性":["70.1"],"session":["70.3"],"key":["70.3"],"用来加密接下来的整个对话过程":["70.3"],"混合加密主要是为了解决":["70.4"],"但是它并不能保证数据的完整性":["70.4"],"也就是说在传输的时候数据是有可能被第三方篡改的":["70.4"],"比如完全替换掉":["70.4"],"所以说它并不能校验数据的完整性":["70.4"],"如果需要做到这一点就需要使用到数字签名":["70.4"],"中带上":["70.5"],"后端用同样的算法解密":["70.5"],"头字段每个组成要求都没有被固定死":["71.1"],"允许开发人员自定义和扩展":["71.1"],"所以":["71.3"],"管道解决了请求的队头阻塞":["71.3"],"但是没有解决响应的队头阻塞":["71.3"],"经过有损压缩压缩之后的数据":["71.4"],"解压之后和原始数据不同但是非常相近":["71.4"],"有损压缩主要将次要的数据舍弃":["71.4"],"通过牺牲一些质量来减少数据量":["71.4"],"提高压缩比":["71.4"],"常用于压缩多媒体数据":["71.4"],"比如音视频":["71.4"],"图片":["71.4"],"可以通过":["71.4"],"请求头部中的":["71.4"],"字段中的":["71.4"],"q":["71.4"],"质量因子":["71.4"],"告诉服务器期望的资源质量":["71.4"],"压缩比较高的是":["71.4"],"webp":["71.4"],"格式":["71.4"],"握手":["71.6"],"慢启动以及":["71.6"],"tls":["71.6"],"握手过程":["71.6"],"这些都是很耗时的":["71.6"],"服务器主动推送资源":["71.6"],"客户端发起的请求":["71.6"],"必须使用的是奇数号":["71.6"],"服务器主动的推送":["71.6"],"使用的是偶数号":["71.6"],"服务器在推送资源时":["71.6"],"会通过":["71.6"],"push":["71.6","78.3","89.1","112.0","119.0"],"promise":["71.6","91.5"],"帧传输":["71.6"],"并通过帧中的":["71.6"],"promised":["71.6"],"id":["71.6"],"字段告知客户端":["71.6"],"接下来会在哪个偶数号":["71.6"],"中发送包体":["71.6"],"说明数据的压缩方法":["72.0"],"表示服务器返回的数据使用了什么格式":["72.0"],"不利于重构":["73.0"],"因为涉及到的系统很多":["73.0"],"要重构必须要兼容所有的系统":["73.0"],"可能很耗时":["73.0"],"无人看守桌面":["73.0"],"因为只需要登录一次":["73.0"],"所有的授权的应用系统都可以访问":["73.0"],"可能导致一些很重要的信息泄露":["73.0"],"交由网络接口层":["74.2"],"网络接口层":["74.2"],"在":["74.2"],"报文的前面加上":["74.2"],"mac":["74.2"],"头部":["74.2"],"封装成数据帧发送到网络上":["74.2"],"表示今后不会再有数据发送":["74.3"],"希望断开连接":["74.3"],"服务端接收到应答报文后":["74.5"],"也处于":["74.5"],"至此建立连接":["74.5"],"只有第三次可以携带数据":["74.5"],"并不会立即关闭连接":["74.6"],"而是先发送一个":["74.6"],"包先告诉客户端收到关闭连接的请求":["74.6"],"只有当服务器的所有报文发送完毕之后":["74.6"],"才发送":["74.6"],"报文断开连接":["74.6"],"因此需要四次挥手":["74.6"],"解密以后":["74.7"],"就能够获取上次对话的信息":["74.7"],"就不用重新生成对话秘钥了":["74.7"],"是面向连接的可靠性传输":["74.8"],"是不可靠的":["74.8"],"而是其中的一部分":["75.1"],"重定向已经存在的缓存文件":["75.2"],"也叫做缓存重定向":["75.2"],"暂时无法响应客户端":["75.4"],"通过该请求来查询服务端是否允许跨域请求":["76.0"],"协议的缺点是在服务器端的配置比较复杂":["77.0"],"是一个全双工的协议":["77.0"],"也就是通信双方是平等的":["77.0"],"可以相互发送消息":["77.0"],"在命中强缓存失败的情况下":["78.0"],"才会走协商缓存":["78.0"],"绕开了浏览器":["78.1"],"设置了":["78.1"],"后":["78.1"],"每一次发起请求的时候都不会去询问浏览器的缓存情况":["78.1"],"而是直接向服务端去确认资源是否过期":["78.1"],"就是不使用任何缓存策略":["78.1"],"只允许直接向服务端发送请求":["78.1"],"并下载完整的响应":["78.1"],"优先级高于":["78.2"],"但是":["78.2"],"的生成过程需要服务器付出开销":["78.2"],"会影响服务端的性能":["78.2"],"不能替代":["78.2"],"只是对其的补充":["78.2"],"要求协议必须是":["78.3"],"https":["78.3"],"是指":["78.3"],"http2":["78.3"],"阶段存在的缓存":["78.3"],"有哪些字段":["78.5"],"不和服务器发起通信":["78.7"],"css":["78.9"],"图片等不需要业务服务器进行计算就可以得到的资源":["78.9"],"动态资源就是需要后端实时动态生成的资源":["78.9"],"来获取元素的大小以及相对于视口的位置":["79.0"],"js":["79.0"],"用户始终看不到网页上的内容":["80.0"],"用户一直在等":["80.0"],"但是服务端渲染模式下":["80.0"],"服务器给客户端的已经是一个直接可以拿来呈现给用户的网页":["80.0"],"中间环节早在服务端就帮我们做掉了":["80.0"],"给每个节点所应该出现在屏幕上的精确坐标":["80.1"],"得到基于渲染树的布局渲染树":["80.1"],"绘制渲染树":["80.1"],"遍历渲染树":["80.1"],"每个节点将使用":["80.1"],"ui":["80.1"],"后端层来绘制":["80.1"],"整个过程叫做绘制渲染树":["80.1"],"defer":["80.2"],"的加载是异步的":["80.2"],"执行是被推迟的":["80.2"],"等整个文档解析完成":["80.2"],"被标记了":["80.2"],"的":["80.2","92.9"],"文件才会开始依次执行":["80.2"],"可以保证脚本的执行顺序":["80.2"],"操作完之后再":["80.3"],"block":["80.3"],"webpack":["81.0","89.9"],"去优化":["81.0"],"其它":["81.2"],"原理也一样":["81.2"],"dll相关配置":["81.3"],"dllreferenceplugin":["81.3"],"manifest就是我们第一步中打包出来的json文件":["81.3"],"中即可":["81.4"],"这个方法":["81.5"],"这是一个异步的方法":["81.5"],"在打包时":["81.5"],"会被单独打成一个文件":["81.5"],"只有在我们跳转到这个路由的时候":["81.5"],"这个异步方法的回调才会生效":["81.5"],"才会真正的去获取这个组件的内容":["81.5"],"这就是按需加载":["81.5"],"存在":["81.6"],"压缩操作":["81.6"],"就是在构建的过程中去做一些服务器的工作":["81.6"],"为服务器分压":["81.6"],"种颜色":["81.7"],"颜色对比强烈的图像时":["81.8"],"人为压缩导致的图片模糊会非常明显":["81.8"],"而且不支持透明":["81.8"],"一般用于呈现小的":["81.9"],"logo":["81.9"],"颜色简单且对比强烈的图片或背景":["81.9"],"很灵活":["81.10"],"缺点是渲染成本比较高":["81.10"],"有一定的学习成本":["81.10"],"常用于图标":["81.10"],"图片的实际尺寸很小":["81.11"],"一般小于":["81.11"],"2kb":["81.11"],"图片没有办法以雪碧图的形式和其它小图结合":["81.11"],"图片的更新频率非常低":["81.11"],"不需要重复编码和修改文件内容":["81.11"],"维护成本低":["81.11"],"返回":["81.12"],"格式的图片":["81.12"],"否则返回原图":["81.12"],"头":["82.0"],"orm":["83.0"],"框架或查询构建器":["83.0"],"对用户输入进行输入验证和过滤":["83.0"],"security":["84.0"],"policy":["84.0"],"csp":["84.0"],"所以并不能确保服务器合法的身份":["85.2"],"客户端使用之前生成的随机":["85.3"],"进行解密数据":["85.3"],"但是传输的数据已经被监听":["85.4"],"客户端却无法得知":["85.4"],"保护网站资源免受滥用":["87.0"],"这样数组中对象发生变化时也会通知数据更新":["88.0"],"如果要在数据变化的同时进行异步操作或者是比较大的开销":["88.1"],"那么":["88.1"],"为最佳选择":["88.1"],"计算属性时":["88.2"],"先进行其他的依赖收集":["88.2"],"在初始化时直接调用回调函数":["88.3"],"可以通过在":["88.3"],"created":["88.3"],"阶段手动调用回调函数实现相同的效果":["88.3"],"获取动态参数":["89.2"],"不会触发":["89.4"],"事件":["89.4"],"这时我们需要手动触发页面跳转":["89.4"],"虽然美观":["89.4"],"但是刷新会出现":["89.4"],"需要后端进行配置":["89.4"],"则根据其所处深度":["89.5"],"deep":["89.5"],"在匹配数组结果中找到对应的路由并获取组件":["89.5"],"最终将其渲染出来":["89.5"],"popstate":["89.6"],"事件所监听":["89.6"],"而后面三者可以":["89.6"],"且用户点击浏览器前进后退键时也可以":["89.6"],"guards":["89.8"],"队列按顺序执行用户注册的守卫钩子函数":["89.8"],"如果没有通过验证逻辑则会取消原有的导航":["89.8"],"vue":["89.9"],"可以做":["89.9"],"代码分块":["89.9"],"定义两个全局变量":["89.10"],"route":["89.10"],"组件内可以访问当前路由和路由器实例":["89.10"],"省去了众多":["90.0"],"hack":["90.0"],"减少代码量等于减少了维护成本":["90.0"],"的回调函数只会被执行":["90.2"],"不会传递参数":["90.2"],"也是十分友好的":["90.3"],"更多新功能":["90.4"],"ref":["90.6"],"reactive":["90.6"],"比":["90.6"],"usestate":["90.6"],"难理解":["90.6"],"大大增加了代码的逻辑组织和代码复用能力":["90.7"],"更容易维护":["90.7"],"typescript":["90.7","96.3"],"模块化":["90.7"],"更容易扩展":["90.7"],"独立的响应化模块":["90.7"],"因此整体体积更小":["90.8"],"加载更快":["90.8"],"ssr":["90.8","93.8"],"渲染以字符串方式渲染":["90.8"],"注意":["90.9"],"不创造":["90.9"],"响应式":["90.9"],"而是":["90.9"],"延续":["90.9"],"方法相当于调用":["91.1"],"options":["91.1"],"mutationstype":["91.1"],"actionstype":["91.1"],"这样就很容易理解两者使用上的不同了":["91.1"],"用起来略繁琐":["91.2"],"一般用于":["91.2"],"插件中":["91.2"],"内部的实现就是通过订阅":["91.3"],"变化做统一处理":["91.3"],"通过插件的选项控制哪些需要持久化":["91.3"],"中每个":["91.4"],"store":["91.4","93.25"],"都是独立的":["91.4"],"互相不影响":["91.4"],"体积非常小":["91.4"],"只有":["91.4"],"1kb":["91.4"],"左右":["91.4"],"支持插件来扩展自身功能":["91.4"],"支持服务端渲染":["91.4"],"类似":["91.5"],"但需要注意它可能是异步的":["91.5"],"需要返回一个":["91.5"],"给用户以处理异步结果":["91.5"],"dom":["92.1","92.7"],"节点":["92.1"],"里面有":["92.1"],"标签名":["92.1"],"子节点":["92.1"],"文本等等":["92.1"],"对象一次性":["92.3"],"attach":["92.3"],"到":["92.3"],"树上":["92.3"],"避免大量的无谓计算":["92.3"],"数组中如果元素是对象类型也会进行递归劫持":["92.4"],"notify":["92.5"],"的话":["92.6"],"发现新旧节点的标签都是":["92.6"],"就会复用":["92.6"],"将第一个的复选框的值改成第二个的":["92.6"],"第二个的复用第三个的":["92.6"],"然后将第三个删除":["92.6"],"更新的时候采用虚拟":["92.7"],"的方式进行":["92.7"],"diff":["92.7"],"算法更新":["92.7"],"更新子节点时又分了几种情况":["92.8"],"新的子节点是文本":["92.8"],"老的子节点是数组则清空":["92.8"],"并设置文本":["92.8"],"老的子节点是文本则直接更新文本":["92.8"],"新的子节点是数组":["92.8"],"老的子节点是文本则清空文本":["92.8"],"并创建新子节点数组中的子元素":["92.8"],"老的子节点也是数组":["92.8"],"那么比较两组子节点":["92.8"],"更新细节":["92.8"],"中引入的更新策略":["92.8"],"静态节点标记等":["92.8"],"重新编写了这一部分的实现":["92.9"],"利用":["92.9"],"代理要响应化的数据":["92.9"],"它有很多好处":["92.9"],"编程体验是一致的":["92.9"],"不需要使用特殊":["92.9"],"初始化性能和内存消耗都得到了大幅改善":["92.9"],"另外由于响应化的实现代码抽取为独立的":["92.9"],"reactivity":["92.9"],"包":["92.9"],"使得我们可以更灵活的使用它":["92.9"],"第三方的扩展开发起来更加灵活了":["92.9"],"同时首次执行渲染函数会创建它内部响应式数据之间和组件更新函数之间的依赖关系":["92.10"],"这使得以后数据变化时会执行对应的更新函数":["92.10"],"异步清空":["92.11"],"队列":["92.11"],"的后面":["92.12"],"这样等队列内部的更新函数都执行完毕":["92.12"],"所有":["92.12"],"操作也就结束了":["92.12"],"自然能够获取到最新的":["92.12"],"在内部为不同的输入元素使用不同的属性并抛出不同的事件":["92.13"],"提高性能":["93.0"],"必须是一个函数":["93.1"],"节点增加与删除":["93.2"],"如果需要非常频繁的切换":["93.2"],"则使用":["93.2"],"较好":["93.2"],"如果在运行时条件很少改变":["93.2"],"移动到容器元素上":["93.3"],"或者外面包一层":["93.3"],"template":["93.3"],"方便复用":["93.6"],"csr":["93.7"],"方式":["93.7"],"首屏采用服务端渲染的方式":["93.7"],"后续交互采用客户端渲染方式":["93.7"],"lru":["93.9"],"最近最少使用":["93.9"],"算法":["93.9"],"选择最近最久未使用的组件予以淘汰":["93.9"],"依赖问题":["93.12"],"数据来源问题":["93.12"],"有某些操作":["93.13"],"就要响应这些操作":["93.13"],"所以可以说它是":["93.13"],"for":["93.13"],"则直接遍历":["93.14"],"创建或更新":["93.14"],"比如":["93.15"],"router":["93.15"],"view":["93.15"],"就是一个函数式组件":["93.15"],"高阶组件":["93.15"],"用于接收一个组件作为参数":["93.15"],"返回一个被包装过的组件":["93.15"],"mutation":["93.16"],"这样使得我们可以方便地跟踪每一个状态的变化":["93.16"],"根据组件之间关系讨论组件通信最为清晰有效":["93.16"],"父子组件":["93.16"],"跨层级关系":["93.16"],"也可以起到扩展组件的目的":["93.17"],"emit":["93.18"],"一个事件让父组件去做这个变更":["93.18"],"注意虽然我们不能直接修改一个传入的对象或者数组类型的":["93.18"],"但是我们还是能够直接改内嵌的对象或属性":["93.18"],"的业务模块":["93.19"],"它的目标是":["93.19"],"件":["93.19"],"plugin":["93.19"],"是用来增强你的技术栈的功能模块":["93.19"],"本身":["93.19"],"简单来说":["93.19"],"插件就是对":["93.19"],"的功能的增强或补充":["93.19"],"只能用一次":["93.20"],"可以有多个":["93.20"],"需要做的事多点":["93.21"],"输出完整":["93.21"],"除了":["93.21"],"complier":["93.21"],"vnode":["93.21"],"还需如数据获取填充至":["93.21"],"hydration":["93.21"],"缓存等等":["93.21"],"相比于其他模板引擎":["93.21"],"ejs":["93.21"],"jade":["93.21"],"等":["93.21"],"最终要实现的目的是一样的":["93.21"],"性能上可能要差点":["93.21"],"怎么理解":["93.21"],"的单向数据流":["93.21"],"数据总是从父组件传到子组件":["93.21"],"子组件没有权利修改父组件传过来的数据":["93.21"],"只能请求父组件对原始数据进行修改":["93.21"],"这样会":["93.21"],"防止从子组件意外改变父级组件的状态":["93.21"],"从而导致你的应用的数据流向难以理解":["93.21"],"open":["93.23"],"被执行时":["93.24"],"它会对":["93.24"],"中的每个语言块用单独的":["93.24"],"链处理":["93.24"],"最后将这些单独的块装配成最终的组件模块":["93.24"],"components":["93.25"],"用来放项目通用组件":["93.25"],"layout":["93.25"],"用来放项目的布局":["93.25"],"用来放项目的路由配置":["93.25"],"用来放状态管理":["93.25"],"的配置":["93.25"],"utils":["93.25"],"用来放项目中的工具方法类":["93.25"],"views":["93.25"],"用来放项目的页面文件":["93.25"],"实例销毁之后发生":["94.0"],"此阶段组件已被拆解":["94.0"],"数据绑定被卸除":["94.0"],"监听被移出":["94.0"],"子组件实例也被销毁":["94.0"],"在编写生命周期函数的时候不用使用箭头函数":["94.0"],"因为底层代码":["94.0"],"callhook":["94.0"],"使用了":["94.0"],"apply":["94.0","113.0","122.0"],"改变了":["94.0"],"指向":["94.0"],"释放资源和避免内存泄露":["94.1"],"destroyed":["94.2"],"生成新的":["95.0"],"module":["96.1"],"exports":["96.1","97.2"],"es6":["96.3"],"转换成":["96.3"],"es5":["96.3"],"ts":["96.3"],"将":["96.3"],"递归遍历所有依赖图谱的模块":["98.1"],"组装成一个个包含多个模块的":["98.1"],"chunk":["98.1"],"块":["98.1"],"最后将生成的文件输出到":["98.1"],"output":["98.1"],"的目录中":["98.1"],"则":["99.0"],"不变":["99.0"],"值传给浏览器":["100.1"],"用于下次热更新使用":["100.1"],"浏览器拿到更新后的模块后":["100.1"],"用新模块替换掉旧的模块":["100.1"],"实现局部刷新":["100.1"],"error":["101.0"],"send":["101.0"],"如果绑定的是构造函数":["102.0"],"那么需要继承构造函数原型属性和方法":["102.0"],"实现继承的方式":["102.0"],"使用object":["102.0"],"create":["102.0"],"object":["102.0"],"function":["105.0"],"new":["105.0"],"删除最久未被访问的数据":["106.0"],"keys":["106.0"],"next":["106.0"],"否则返回新对象":["107.0"],"else":["108.2","112.0","127.0","130.0"],"foreach":["113.0"],"使用apply将参数传递给回调函数":["113.0"],"子数组进行递归操作":["114.0"],"child":["114.0"],"appendchild":["114.0"],"reverse":["115.0","116.0"],"只要发生了一次交换":["117.0"],"就修改标志位":["117.0"],"true":["117.0","133.0","142.0"],"若一次交换也没发生":["117.0"],"则说明数组有序":["117.0"],"直接放过":["117.0"],"的正确索引":["117.2"],"将枢轴元素放到左边界的位置":["117.3"],"完成一次分区操作":["117.3"],"返回枢轴元素的最终索引位置":["117.3"],"concat":["117.4"],"indexof":["118.0"],"settimeout":["122.1"],"right":["125.0"],"交换":["125.0"],"join":["126.0"],"has":["128.0"],"add":["128.0"],"set":["129.0"],"递归调用":["132.0"],"传递修改后的":["132.0"],"用于记录出现过的数字":["132.0"],"of":["133.0"],"直到查到目标元素或查找区间为空":["134.1"],"b":["135.0"],"未找到可行解":["138.0"],"返回0":["138.0"],"while":["141.0"],"continue":["144.0"],"表示开发依赖":["150.0"],"dirname":["150.1"],"dist":["150.1"],"路径必须是一个绝对路径":["150.1"],"optimizecssassetswebpackplugin":["150.6"],"从下到上":["150.7"]}]'},t={"0.0":{t:"编程踩坑积累与总结",p:`::: tip
这里主要记录后端知识点!
:::
`,l:"BackEnd/index.html",a:"编程踩坑积累与总结"},"1.0":{t:"test1",p:"",l:"Fragments/Frag1/1.html",a:"test1"},"2.0":{t:"编程踩坑积累与总结",p:`::: tip
这里主要记录突发奇想!
:::
`,l:"Fragments/index.html",a:"编程踩坑积累与总结"},"3.0":{t:"编程踩坑积累与总结",p:`::: tip
这里主要记录框架相关知识点！
:::
`,l:"Framework/index.html",a:"编程踩坑积累与总结"},"4.0":{t:"testdddd",p:"",l:"Framework/Vue/test.html",a:"testdddd"},"5.0":{t:"移动端响应式",p:`什么是响应式？
响应式就是将界面设计成能够适应不同的设备。&quot;如果将屏幕看成是容器，那么内容就像水一样&quot;
为什么要设计响应式？
首先，电脑、笔记本、手机、平板等智能设备在不断增加，其 ...`,l:"FrontEnd/CSS/响应式.html",a:"移动端响应式"},"5.1":{t:"响应式布局常用方法",p:`

使用 vm 定制 rem 自适应布局
移动端使用 rem 布局需要通过 JS 设置不同屏幕宽高比的 font-size，结合 vm 单位和 calc()可以脱离 JS 的控制
适用于 rem 布局 ...`,l:"FrontEnd/CSS/响应式.html#响应式布局常用方法",a:"响应式布局常用方法"},"6.0":{t:"css-常见布局",p:"\r",l:"FrontEnd/CSS/常见布局.html",a:"css-常见布局"},"6.1":{t:"水平布局",p:"\r",l:"FrontEnd/CSS/常见布局.html#水平布局",a:"水平布局"},"6.2":{t:"文本、行内元素、行内块级元素",p:`使用 text-align：center

优点：兼容性比较好
缺点：只对行内元素有效，且属性会继承，会影响后代行内内容，如果子元素宽度大于父元素宽度就会失效。
注意：只控制行内内容如何相对父元素对齐 ...`,l:"FrontEnd/CSS/常见布局.html#文本、行内元素、行内块级元素",a:"文本、行内元素、行内块级元素"},"6.3":{t:"单个块级元素",p:`margin:0 auto

必须定宽
优点：兼容性好
缺点：必须顶宽，值不能为 auto，宽度要小于父元素，否则无效

.son {
  width: 100px;
  margin: 0 auto ...`,l:"FrontEnd/CSS/常见布局.html#单个块级元素",a:"单个块级元素"},"6.4":{t:"多个块级元素",p:`#parent {
  text-align: center;
}
.son {
  display: inline-block; /*改为行内或者行内块级形式，以达到text-align对其生效*/ ...`,l:"FrontEnd/CSS/常见布局.html#多个块级元素",a:"多个块级元素"},"6.5":{t:"使用绝对定位",p:`#parent {
  height: 200px;
  width: 200px; /*定宽*/
  position: relative; /*父相*/
  background-color: # ...`,l:"FrontEnd/CSS/常见布局.html#使用绝对定位",a:"使用绝对定位"},"6.6":{t:"任意个元素",p:`#parent {
  display: flex;
  justify-content: center;
}


优点：简单，容易理解
缺点：PC 端兼容性不好

`,l:"FrontEnd/CSS/常见布局.html#任意个元素",a:"任意个元素"},"6.7":{t:"垂直居中",p:"\r",l:"FrontEnd/CSS/常见布局.html#垂直居中",a:"垂直居中"},"6.8":{t:"单行、行内、行内块",p:`#parent {
  height: 150px;
  line-height: 150px; /*与height等值*/
}


优点：兼容性好
缺点：只能用于单行行内内容，需要知道高度的值

`,l:"FrontEnd/CSS/常见布局.html#单行、行内、行内块",a:"单行、行内、行内块"},"6.9":{t:"多行文本、行内元素、行内块级元素",p:`#parent {
  /*或者用span把所有文字包裹起来，设置display：inline-block转换成图片的方式解决*/
  height: 150px;
  line-height: 30 ...`,l:"FrontEnd/CSS/常见布局.html#多行文本、行内元素、行内块级元素",a:"多行文本、行内元素、行内块级元素"},"6.10":{t:"单个块元素",p:`#parent {
  display: table-cell;
  vertical-align: middle;
}
- 使用 table-cell、使用绝对定位、使用 flex

/_原理：子绝 ...`,l:"FrontEnd/CSS/常见布局.html#单个块元素",a:"单个块元素"},"6.11":{t:"任意个元素",p:`#parent {
  display: flex;
  align-items: center;
}

或 #parent {
  display: flex;
}
.son {
  align-s ...`,l:"FrontEnd/CSS/常见布局.html#任意个元素",a:"任意个元素"},"6.12":{t:"水平垂直居中",p:"\r",l:"FrontEnd/CSS/常见布局.html#水平垂直居中",a:"水平垂直居中"},"6.13":{t:"行内、行内块级、图片",p:`#parent {
  height: 150px;
  line-height: 150px; /*行高的值与height相等*/
  text-align: center;
  font-size ...`,l:"FrontEnd/CSS/常见布局.html#行内、行内块级、图片",a:"行内、行内块级、图片"},"6.14":{t:"tabel-cell",p:`#parent {
  height: 150px;
  width: 200px;
  display: table-cell;
  vertical-align: middle;
  /*text ...`,l:"FrontEnd/CSS/常见布局.html#tabel-cell",a:"tabel-cell"},"6.15":{t:"绝对定位",p:`#parent {
  position: relative;
}
#son {
  position: absolute;
  top: 50%;
  left: 50%;
  /*定宽高时等同于m ...`,l:"FrontEnd/CSS/常见布局.html#绝对定位",a:"绝对定位"},"6.16":{t:"绝对居中",p:`#parent {
  position: relative;
}
#son {
  position: absolute;
  margin: auto;
  width: 100px;
  hei ...`,l:"FrontEnd/CSS/常见布局.html#绝对居中",a:"绝对居中"},"6.17":{t:"flex",p:`#parent {
  display: flex;
}
#son {
  margin: auto;
}

或 #parent {
  display: flex;
  justify-conten ...`,l:"FrontEnd/CSS/常见布局.html#flex",a:"flex"},"6.18":{t:"两列布局",p:`左列定宽，右列自适应
`,l:"FrontEnd/CSS/常见布局.html#两列布局",a:"两列布局"},"6.19":{t:"float-margin",p:`&lt;body
  &gt; &lt;div
  id=&quot;left&quot;
  &gt; 左列定宽&lt;/div
  &gt; &lt;div
  id=&quot;right&qu ...`,l:"FrontEnd/CSS/常见布局.html#float-margin",a:"float-margin"},"6.20":{t:"float-overflow",p:`&lt;body&gt;
  &lt;div id=&quot;left&quot;&gt;左列定宽&lt;/div&gt;
  &lt;div id=&quot;right&quot;&gt;右列自 ...`,l:"FrontEnd/CSS/常见布局.html#float-overflow",a:"float-overflow"},"6.21":{t:"绝对定位",p:`&lt;body&gt;
  &lt;div id=&quot;parent&quot;&gt;
    &lt;div id=&quot;left&quot;&gt;左列定宽&lt;/div&gt; ...`,l:"FrontEnd/CSS/常见布局.html#绝对定位",a:"绝对定位"},"6.22":{t:"flex",p:`&lt;body&gt;
  &lt;div id=&quot;parent&quot;&gt;
    &lt;div id=&quot;left&quot;&gt;左列定宽&lt;/div&gt; ...`,l:"FrontEnd/CSS/常见布局.html#flex",a:"flex"},"6.23":{t:"float-overflow",p:`&lt;body&gt;
  &lt;div id=&quot;parent&quot;&gt;
    &lt;div id=&quot;left&quot;&gt;左列不定宽&lt;/div&gt ...`,l:"FrontEnd/CSS/常见布局.html#float-overflow",a:"float-overflow"},"6.24":{t:"flex",p:`&lt;body&gt;
  &lt;div id=&quot;parent&quot;&gt;
    &lt;div id=&quot;left&quot;&gt;左列不定宽&lt;/div&gt ...`,l:"FrontEnd/CSS/常见布局.html#flex",a:"flex"},"6.25":{t:"三列布局",p:`两列定宽，一列自适应
`,l:"FrontEnd/CSS/常见布局.html#三列布局",a:"三列布局"},"6.26":{t:"float-margin",p:`&lt;body&gt;
  &lt;div id=&quot;parent&quot;&gt;
    &lt;div id=&quot;left&quot;&gt;左列定宽&lt;/div&gt; ...`,l:"FrontEnd/CSS/常见布局.html#float-margin",a:"float-margin"},"6.27":{t:"flex",p:`&lt;body&gt;
  &lt;div id=&quot;parent&quot;&gt;
    &lt;div id=&quot;left&quot;&gt;左列定宽&lt;/div&gt; ...`,l:"FrontEnd/CSS/常见布局.html#flex",a:"flex"},"7.0":{t:"编程踩坑积累与总结",p:`::: tip
这里主要记录前端基础知识
:::
`,l:"FrontEnd/index.html",a:"编程踩坑积累与总结"},"9.0":{t:"_300ms-延迟解决的是双击缩放。双击缩放-手指在屏幕快速点击两次。safari-浏览器就会将网页缩放至原始比例。当用户点击屏幕一次之后-浏览器并不会判断用户确实要打开至这个链接-还是想要进行双击操作-所以-safair-浏览器会等待-300ms-用来判断是否再次点击了屏幕。",p:`怎么解决？

禁止缩放，设置 meta 标签 user-scalable=no
fastclick.js 原理是检查到 touched 事件的时候，会通过 dom 自定义事件立即发出 click 事件 ...`,l:"Interview/Browser/300ms延迟.html",a:"_300ms-延迟解决的是双击缩放。双击缩放-手指在屏幕快速点击两次。safari-浏览器就会将网页缩放至原始比例。当用户点击屏幕一次之后-浏览器并不会判断用户确实要打开至这个链接-还是想要进行双击操作-所以-safair-浏览器会等待-300ms-用来判断是否再次点击了屏幕。"},"10.0":{t:"css-加载不会阻塞-dom-树的解析",p:`
css 加载会阻塞 DOM 树的渲染
css 加载会阻塞后面 js 语句的执行

原理：


HTML 解析文件，生成 DOM Tree，解析 CSS 文件生成 CSSOM Tree


将 Dom ...`,l:"Interview/Browser/CSS加载会造成阻塞吗.html",a:"css-加载不会阻塞-dom-树的解析"},"11.0":{t:"cdn-缓存方便",p:`
突破浏览器并发限制
解压 cookie 带宽

`,l:"Interview/Browser/为什么利用多个域名存储网站资源更有效.html",a:"cdn-缓存方便"},"12.0":{t:"是浏览器的核心部分-主要分为两个部分-渲染引擎和-javascript-引擎",p:`渲染引擎：负责解析网页的 HTML、图像等内容，负责处理网页的布局、计算、绘制等任务，将其转化成可视化的网页形式。常见的有 webkit、Blink
JavaScript 引擎：解析执行 JavaSc ...`,l:"Interview/Browser/对浏览器内核的理解.html",a:"是浏览器的核心部分-主要分为两个部分-渲染引擎和-javascript-引擎"},"13.0":{t:"参考文章",p:`https://juejin.cn/post/6844903767226351623 https://segmentfault.com/a/1190000010719058
`,l:"Interview/Browser/跨域问题.html",a:"参考文章"},"13.1":{t:"什么是同源策略",p:`同源就是指 URL 中的协议（http/https）、域名（www.baidu.com）、端口号（80）都相同
同源策略就是浏览器的一种重要的安全策略，通过限制不同源之间的资源不能相互访问来保证浏览器 ...`,l:"Interview/Browser/跨域问题.html#什么是同源策略",a:"什么是同源策略"},"13.2":{t:"跨域解决方案",p:"\r",l:"Interview/Browser/跨域问题.html#跨域解决方案",a:"跨域解决方案"},"13.3":{t:"jsonp",p:`原理
利用script标签没有跨域限制的漏洞，网页可以得到从其它来源动态产生的 JSON 数据
优点是简单兼容性好，可以用于解决主流浏览器的跨域数据访问的问题
缺点是只支持 get 请求方法
实现
/ ...`,l:"Interview/Browser/跨域问题.html#jsonp",a:"jsonp"},"13.4":{t:"cors",p:`服务端设置Access-Control-Allow-Origin开启 CORS，这个属性表示的是那个域名可以访问资源，如果设置为通配符表示所有网站都可以访问资源
使用这种方式解决跨域，在发送请求的时候 ...`,l:"Interview/Browser/跨域问题.html#cors",a:"cors"},"13.5":{t:"node-中间件代理",p:`服务器向服务器请求不用遵循同源策略

接受客户端请求
将请求转发给服务器
拿到服务器响应数据
将响应转发给客户端

`,l:"Interview/Browser/跨域问题.html#node-中间件代理",a:"node-中间件代理"},"14.0":{t:"用户输入-url-并回车",p:`

浏览器进程检查 url，组装协议，构成完整的 url


浏览器进程通过进程间通信（IPC）把 url 请求发送给网络进程


网络进程接收到 url 请求后检查本地缓存是否缓存了该请求资源，如果 ...`,l:"Interview/Browser/输入URL到页面呈现发生了什么.html",a:"用户输入-url-并回车"},"15.0":{t:"什么是并行处理",p:`并行处理就是同一时刻处理多个任务。
`,l:"Interview/Browser/进程问题.html",a:"什么是并行处理"},"15.1":{t:"线程-vs-进程",p:"进程：一个进程就是一个程序的运行实例。启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码，运行中的数据和一个执行任务的主线程，这样一个运行环境叫做进程。（管理任务和资源分配的基本单位）。 ...",l:"Interview/Browser/进程问题.html#线程-vs-进程",a:"线程-vs-进程"},"15.2":{t:"多进程架构",p:`
浏览器进程：主要负责界面显示、用户交互、子进程管理、同时提供存储功能
渲染进程：将 HTML、CSS、JS 转换为用户可以与之交互的网页。
GPU 进程：绘制
网络进程：负责页面的网络资源加载。
插 ...`,l:"Interview/Browser/进程问题.html#多进程架构",a:"多进程架构"},"16.0":{t:"是匹配元素之后的选择器",p:`+是匹配相邻元素的选择器
`,l:"Interview/CSS/+和~选择器有什么不同.html",a:"是匹配元素之后的选择器"},"17.0":{t:"是什么",p:`块级格式化上下文，BFC 是一个独立的渲染区域，其中的元素按照特定规则进行排布，与其他区域相互隔离，不会影响到外部布局。
`,l:"Interview/CSS/BFC.html",a:"是什么"},"17.1":{t:"触发条件",p:`
根元素（HTML）或包含根元素的元素
浮动元素： 元素的 float 属性不为 none。
绝对定位元素： 元素的 position 属性为 absolute 或 fixed。
display 属性 ...`,l:"Interview/CSS/BFC.html#触发条件",a:"触发条件"},"17.2":{t:"作用",p:`
清除浮动： 当一个元素的子元素都是浮动元素时，它将会塌陷，不会正常地包裹子元素。创建一个 BFC 可以解决这个问题，因为 BFC 的边界会包裹浮动元素。
垂直外边距重叠： 在同一个 BFC 中的元素 ...`,l:"Interview/CSS/BFC.html#作用",a:"作用"},"18.0":{t:"怎么修改-chrome-记住密码后自动填充表单的黄色背景",p:"\r",l:"Interview/CSS/Chrome自动填充问题.html",a:"怎么修改-chrome-记住密码后自动填充表单的黄色背景"},"18.1":{t:"产生原因",p:`由于 Chrome 默认会给自动填充的input表单加上 input:-webkit-autofill 私有属性造成的
`,l:"Interview/CSS/Chrome自动填充问题.html#产生原因",a:"产生原因"},"18.2":{t:"解决方案",p:`
在form标签上直接关闭了表单的自动填充：autocomplete=&quot;off&quot;
input:-webkit-autofill { background-color: transp ...`,l:"Interview/CSS/Chrome自动填充问题.html#解决方案",a:"解决方案"},"19.0":{t:"css-里的-visibility-属性有个-collapse-属性值-在不同浏览器下有什么区别",p:`通常用于表格的行和列
当用于行上的时候：该行会被隐藏，并且不会占据任何空间，相邻的行自动合并
当用于列上的时候：该列会被隐藏，但任会占据空间，不会导致相邻元素合并
当一个元素的 visibility  ...`,l:"Interview/CSS/collapse属性.html",a:"css-里的-visibility-属性有个-collapse-属性值-在不同浏览器下有什么区别"},"20.0":{t:"_1-新增伪类和伪元素-通用选择器",p:`
新增盒子模型
圆角边框、边框图像
flex 弹性盒子布局
媒体查询

`,l:"Interview/CSS/CSS3新特性.html",a:"_1-新增伪类和伪元素-通用选择器"},"21.0":{t:"合并压缩-css-文件",p:`
使用字体图标和 SVG 图标
减少选择器的复杂性
避免使用！important
使用缓存
使用精灵图
使用硬件加速

`,l:"Interview/CSS/CSS优化.html",a:"合并压缩-css-文件"},"22.0":{t:"inline",p:`

使元素变成行内元素，拥有行内元素的特性，可以和其它行内元素共占一行，不会独占一行；不能改变 height、weight，大小由内容撑开，


可以使用 padding，margin 上下不生效

 ...`,l:"Interview/CSS/Display.html",a:"inline"},"22.1":{t:"block",p:`
使元素变成块级元素，独占一行，在不设置自己的宽度的情况下，块级元素会默认填满父级元素的宽度
能够改变元素的 height、weight
可以使用 padding，margin

`,l:"Interview/CSS/Display.html#block",a:"block"},"22.2":{t:"inline-block",p:`
可以和其他元素共占一行
可以设置 weight、height
可以设置 padding、margin

`,l:"Interview/CSS/Display.html#inline-block",a:"inline-block"},"22.3":{t:"none",p:`不显示
`,l:"Interview/CSS/Display.html#none",a:"none"},"22.4":{t:"flex",p:`弹性盒子布局
`,l:"Interview/CSS/Display.html#flex",a:"flex"},"23.0":{t:"flex-实际上是-flex-grow-1-、-flex-shrink-1-和-flex-basis-0-三个属性的缩写。",p:`

flex-grow：定义项目的的放大比例；

默认为0，如果存在剩余空间，元素也不会放大，设置为 1，代表会放大，等分剩余空间
flex-grow为n的项目，占据的空间（放大的比例）是flex-g ...`,l:"Interview/CSS/flex1.html",a:"flex-实际上是-flex-grow-1-、-flex-shrink-1-和-flex-basis-0-三个属性的缩写。"},"24.0":{t:"采用-flex-布局的元素-称为-flex-容器-它的所有子元素自动成为容器成员-容器中默认存在两条轴-主轴和交叉轴-项目默认沿主轴排列",p:"\r",l:"Interview/CSS/flex布局.html",a:"采用-flex-布局的元素-称为-flex-容器-它的所有子元素自动成为容器成员-容器中默认存在两条轴-主轴和交叉轴-项目默认沿主轴排列"},"24.1":{t:"容器属性",p:`
flex-direction：决定主轴的方向，row-reverse：主轴为水平方向，起点在左端，column：主轴为垂直方向，起点在上沿，column-reverse：主轴为垂直方向，起点在下沿
 ...`,l:"Interview/CSS/flex布局.html#容器属性",a:"容器属性"},"24.2":{t:"容器成员属性",p:`
order：项目排列顺序，数值越小越靠前，默认为 0
flex-grow：如果不换行，容器宽度不够分的情况，弹性元素会根据这个来决定，项目的放大比例，默认为 0，即使存在剩余空间，也不放大，如果所有 ...`,l:"Interview/CSS/flex布局.html#容器成员属性",a:"容器成员属性"},"25.0":{t:"_1-import-是-css-提供的语法规则-只有导入样式表的作用-link-是-html-提供的标签-不仅可以加载-css-文件-还可以定义-rss、rel-连接属性等。",p:`
加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载。
@import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作 ...`,l:"Interview/CSS/link和@import.html",a:"_1-import-是-css-提供的语法规则-只有导入样式表的作用-link-是-html-提供的标签-不仅可以加载-css-文件-还可以定义-rss、rel-连接属性等。"},"26.0":{t:"margin-重叠指的是在垂直方向上-两个相邻元素的-margin-发生重叠的情况。",p:`一般来说可以分为四种情形：

第一种是相邻兄弟元素的 marin-bottom 和 margin-top 的值发生重叠。这种情况下我们可以通过设置其中一个元素为 BFC 来解决。
第二种是父元素的 m ...`,l:"Interview/CSS/margin重叠问题.html",a:"margin-重叠指的是在垂直方向上-两个相邻元素的-margin-发生重叠的情况。"},"27.0":{t:"absolute",p:`生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。如果不存在逐级向上查找，直到相对于 body 元素，即相对于浏览器窗口
`,l:"Interview/CSS/Position.html",a:"absolute"},"27.1":{t:"fixed",p:`生成绝对定位的元素，相对于浏览器窗口进行定位
`,l:"Interview/CSS/Position.html#fixed",a:"fixed"},"27.2":{t:"relative",p:`生成相对定位的元素，相对于其正常位置进行定位
`,l:"Interview/CSS/Position.html#relative",a:"relative"},"27.3":{t:"static",p:`默认值，没有定位
`,l:"Interview/CSS/Position.html#static",a:"static"},"27.4":{t:"inherit",p:`规定应该从父元素继承 position 的值
`,l:"Interview/CSS/Position.html#inherit",a:"inherit"},"28.0":{t:"rem-单位是根据根元素的-font-size-来计算",p:`
em：单位是根据自身元素的 font-size 大小来计算
vh：viewport width 视口的宽
vw：viewport height 视口的高

`,l:"Interview/CSS/rem-em-vw-vh.html",a:"rem-单位是根据根元素的-font-size-来计算"},"29.0":{t:"图像质量-svg-使用矢量图形-可以无限放大而不失真-canvas-使用像素图形-图像不可以无限放大不失真",p:`
编辑和修改：SVG 使用 XML 文档来描述图形，可以通过 JavaScript 和 CSS 来修改和操作，而 Canvas 使用 JavaScript 来绘制图形，需要重新绘制才能进行修改
适用场 ...`,l:"Interview/CSS/SVG - Canvas.html",a:"图像质量-svg-使用矢量图形-可以无限放大而不失真-canvas-使用像素图形-图像不可以无限放大不失真"},"30.0":{t:"transition",p:`只能定义两个状态：开始状态和结束状态，不能定义中间的状态

不能重复执行动画，除非一再触发动画

需要在特定状态触发后才能执行

animation
可以用@keyframes定义动画序列

可以设置 ...`,l:"Interview/CSS/transition-animation.html",a:"transition"},"31.0":{t:"一栏固定宽度-右边一栏宽度自适应-1-利用浮动-左边元素定宽-200px-向左浮动-float-left-右边元素-margin-left-200px-宽度设置为-auto-默认为-auto-撑满整个盒子",p:`.left {
  width: 200px;
  float: left;
  background-color: tomato;
}

.right {
  margin-left: 200px; ...`,l:"Interview/CSS/两栏布局.html",a:"一栏固定宽度-右边一栏宽度自适应-1-利用浮动-左边元素定宽-200px-向左浮动-float-left-右边元素-margin-left-200px-宽度设置为-auto-默认为-auto-撑满整个盒子"},"32.0":{t:"伪类",p:`用于当已有元素处于某个状态时，为其添加对应的部分，这个状态是根据用户行为而动态变化的，比如说，当用户悬停在指定的元素时，我们可以通过：hover 来描述这个元素的状态。双冒号，不会生成新的元素
伪元素 ...`,l:"Interview/CSS/伪类-伪元素.html",a:"伪类"},"33.0":{t:"_1-display-none-把元素隐藏起来-使元素完全从渲染树中消失-不占据任何空间-会改变页面布局-可以理解为在页面中把该元素删掉-非继承属性-子孙节点消失是因为元素本身从渲染树中消失-修改子孙节点的属性无法使其显示-会导致重排-读屏器不会读取-display-none-元素的内容",p:`
visibility:hidden 把元素隐藏起来，不会使元素从渲染树中消失，不会改变页面布局，不会触发该元素已经绑定的事件 继承属性，子孙节点消失是继承了 hidden 属性，可以通过设置 vis ...`,l:"Interview/CSS/使元素消失的方法.html",a:"_1-display-none-把元素隐藏起来-使元素完全从渲染树中消失-不占据任何空间-会改变页面布局-可以理解为在页面中把该元素删掉-非继承属性-子孙节点消失是因为元素本身从渲染树中消失-修改子孙节点的属性无法使其显示-会导致重排-读屏器不会读取-display-none-元素的内容"},"34.0":{t:"_1-display-table-cell-vertial-align-middle",p:`
flex 布局，align-item：center
绝对定位中，bottom：0，top：0，margin：auto
绝对定位中，固定宽高时设置 top：50%，margin-top 为-1/2he ...`,l:"Interview/CSS/垂直居中.html",a:"_1-display-table-cell-vertial-align-middle"},"35.0":{t:"dns-预解析",p:`TCP 预连接
骨架屏
资源预加载
接口预加载
接口合并
`,l:"Interview/CSS/怎么减少白屏时间.html",a:"dns-预解析"},"36.0":{t:"fouc-指的是在页面加载过程中-由于外部样式表加载较慢或延迟-导致页面先以无样式的方式显示-然后突然闪烁出样式的现象",p:`解决：

将样式表放在文档的 head 中：通过将样式表放在文档头部，确保浏览器在渲染页面内容之前先加载和解析样式表，从而避免了页面一开始的无样式状态
使用内联样式：关键样式直接写在 HTML 标签的 ...`,l:"Interview/CSS/怎么避免FOUC.html",a:"fouc-指的是在页面加载过程中-由于外部样式表加载较慢或延迟-导致页面先以无样式的方式显示-然后突然闪烁出样式的现象"},"37.0":{t:"多数显示屏默认频率是-60hz-就是-1s-刷新-60-次-所以理论上最小时间是-16-7ms-1-60-1000-如果需要手写编写动画-可以将最小时间间隔设置为-16-7ms-这样可以确保每帧动画能够在显示器刷新之前完成-如果时间间隔小于-16-7ms-则会导致某些帧在显示器刷新之后才能呈现-造成不连续的动画效果-出现跳帧现象",p:"",l:"Interview/CSS/手写动画最小间隔.html",a:"多数显示屏默认频率是-60hz-就是-1s-刷新-60-次-所以理论上最小时间是-16-7ms-1-60-1000-如果需要手写编写动画-可以将最小时间间隔设置为-16-7ms-这样可以确保每帧动画能够在显示器刷新之前完成-如果时间间隔小于-16-7ms-则会导致某些帧在显示器刷新之后才能呈现-造成不连续的动画效果-出现跳帧现象"},"38.0":{t:"单行",p:`div {
  width: 200px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

多行
di ...`,l:"Interview/CSS/文字溢出.html",a:"单行"},"39.0":{t:"_1-子绝父相-transform",p:`.box {
  background-color: red;
  width: 100%;
  height: 100vh;
  position: relative;
}

.son {
  ba ...`,l:"Interview/CSS/水平垂直居中.html",a:"_1-子绝父相-transform"},"40.0":{t:"_1-元素为行内元素-设置父元素-text-align-center",p:`
如果元素宽度固定，可以设置左右 margin 为 auto
如果元素宽度固定，通过使用绝对定位，以及设置元素 margin-left 为其宽度的一半
如果元素为绝对定位，设置父元素 position ...`,l:"Interview/CSS/水平居中.html",a:"_1-元素为行内元素-设置父元素-text-align-center"},"41.0":{t:"为什么要清除浮动",p:"为什么要清除浮动？ 浮动元素脱离了标准文档流，变成了浮动元素，不再向父元素汇报高度。所以父元素在计算高度的时候并没有将浮动元素的高度计算出来，因此就造就了高度塌陷的问题。解决高度塌陷的问题就叫做清除浮 ...",l:"Interview/CSS/浮动.html",a:"为什么要清除浮动"},"41.1":{t:"怎么清除",p:`

clear 属性

在浮动元素后添加一个空元素，对其设置 clear：both
优点：简单、代码少，浏览器兼容性好
缺点：需要添加大量无语义的代码，代码不够优雅，后期不容易维护



原理：元素的 ...`,l:"Interview/CSS/浮动.html#怎么清除",a:"怎么清除"},"42.0":{t:"原理",p:`相邻边框连接处的均分原理，将元素的宽高设置为 0，只设置 border，把任意三边隐藏掉，剩下的就是一个三角形
`,l:"Interview/CSS/画三角形.html",a:"原理"},"42.1":{t:"实现",p:`.test {
  width: 0;
  height: 0;
  border-top: 50px solid transparent;
  border-right: 50px solid tr ...`,l:"Interview/CSS/画三角形.html#实现",a:"实现"},"43.0":{t:"在标准的-css-盒子模型中-每个-html-元素被表示为一个矩形盒子",p:`盒子包括四个部分：

内存区域 content
内边距区域 padding
边框区域 border
外边距区域 margin

标准盒模型
计算宽高时，只包括内容区域
IE 盒模型
计算宽高时，包含内 ...`,l:"Interview/CSS/盒模型.html",a:"在标准的-css-盒子模型中-每个-html-元素被表示为一个矩形盒子"},"44.0":{t:"原因",p:`由于 HTML 中的换行符和空格字符引起的，这些空白字符会被解析为文本节点，而文本节点默认会应用一定的样式，导致 li 之间产生间隔
`,l:"Interview/CSS/空白间隔问题.html",a:"原因"},"44.1":{t:"解决",p:`

删除 HTML 代码中的空白字符


使用 flex 布局，将 ul 设置为 flex 容器，使 li 自动排列在一行内，间隔消失


父元素设置 font-size:0，子元素重新设置字体大小和 ...`,l:"Interview/CSS/空白间隔问题.html#解决",a:"解决"},"45.0":{t:"id-选择器",p:`类选择器
标签选择器
属性选择器
伪类选择器
伪元素选择器
后代选择器
相邻后代选择器
兄弟选择器
通配符选择器
`,l:"Interview/CSS/选择器.html",a:"id-选择器"},"45.1":{t:"优先级",p:`
同一级别：就近原则 后写的覆盖先写的
不同级别：
!important &gt; 内联样式 &gt; ID选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素 ...`,l:"Interview/CSS/选择器.html#优先级",a:"优先级"},"46.0":{t:"前者是标准浏览器中的用法-后者-ie8-以下",p:`
addEventListener可有冒泡，可有捕获；attachEvent只有冒泡，没有捕获。
前者事件名不带on，后者带on
前者回调函数中的this指向当前元素，后者指向window
第三个参数 ...`,l:"Interview/HTML/addEventListener-attachEvent.html",a:"前者是标准浏览器中的用法-后者-ie8-以下"},"47.0":{t:"为什么需要-async-和-defer",p:`js 是单线程的,如果没有 defer 或 async 属性,浏览器会立即加载并执行相应的脚本,不会等到后续加载的文档元素,读取到就会开始和执行,会阻塞后续文档的加载
defer 和 async 都是 ...`,l:"Interview/HTML/async和defer的区别.html",a:"为什么需要-async-和-defer"},"48.0":{t:"a-元素除了导航外-还有什么作用",p:`创建内部书签链接，在 href 中指定锚点的 ID 来实现
添加 download 属性 变为下载链接
`,l:"Interview/HTML/a标签.html",a:"a-元素除了导航外-还有什么作用"},"49.0":{t:"h5-新特性",p:`
为了更好的实现语义化，新增了 header、footer、nav、aside、article 等语义化标签
为了方便在客户端存储和获取数据，提供了 localStorage、sessionStora ...`,l:"Interview/HTML/H5新特性.html",a:"h5-新特性"},"50.0":{t:"优点",p:`
内容隔离：允许在一个网页中嵌套另一个网页，实现内容隔离，防止嵌套的内容对主页面的影响。
并行加载：允许在主页面加载的时候并行加载嵌套页面，提高页面并发性能。
代码复用：可以将共享的内容嵌套在多个页面 ...`,l:"Interview/HTML/iframe的优缺点.html",a:"优点"},"51.0":{t:"定义表单控件的关系-当用户选择-label-标签时-浏览器会自动将焦点转到和-label-标签相关的表单控件上",p:"&lt;label for=&quot;mobile&quot;&gt;Number:&lt;/label&gt; &lt;input type=&quot;text&quot; id=&quot;m ...",l:"Interview/HTML/label有什么作用.html",a:"定义表单控件的关系-当用户选择-label-标签时-浏览器会自动将焦点转到和-label-标签相关的表单控件上"},"52.0":{t:"相同点",p:`都是告知浏览器提前加载文件(图片、视频、js、css等)，但执行上是有区别的。
区别

prefetch预取：prefetch 是一个资源提示属性，用于告诉浏览器在页面加载完成后，异步地预取指定资源。 ...`,l:"Interview/HTML/prefetch-preload.html",a:"相同点"},"53.0":{t:"src",p:`
src 用于替换的当前元素
src用于指定外部资源的地址，通常用于引入外部文件，如图片、音频、视频、脚本等，指向的内容会嵌入到文档中当前标签所在的位置。
常用于&lt;img&gt;, &lt;sc ...`,l:"Interview/HTML/src和href的区别.html",a:"src"},"54.0":{t:"怎么实现浏览器内多个标签的通信",p:"\r",l:"Interview/HTML/浏览器内多个标签通信.html",a:"怎么实现浏览器内多个标签的通信"},"54.1":{t:"websocket",p:`

建立 WebSocket 连接，const socket = new WebSocket('ws://your-server-url')


监听消息事件：socket.addEventListe ...`,l:"Interview/HTML/浏览器内多个标签通信.html#websocket",a:"websocket"},"54.2":{t:"localstorage",p:`使用 localStorage，在一个标签页内使用 localStorage.setItem(key,value)内容，在另一个标签页里面监听 storage 事件
// 标签页1
&lt;input ...`,l:"Interview/HTML/浏览器内多个标签通信.html#localstorage",a:"localstorage"},"54.3":{t:"cookie-setinterval",p:`将要传递的消息存储在 cookie 中，每隔一段时间读取 cookie 信息
// 页面1
&lt;input id=&quot;name&quot;&gt;
&lt;input type=&quot ...`,l:"Interview/HTML/浏览器内多个标签通信.html#cookie-setinterval",a:"cookie-setinterval"},"55.0":{t:"对语义化的理解",p:"\r",l:"Interview/HTML/语义化的理解.html",a:"对语义化的理解"},"55.1":{t:"你是怎么理解语义化的-语义化的好处",p:`我认为 html 语义化主要指的是我们应该用合适的标签来划分网页内容的结构。html 的本质作用其实就是定义网页内容的结构，一个语义化的文档，能够使页面的结构更加清晰，易于理解。
这样不仅有利于开发者 ...`,l:"Interview/HTML/语义化的理解.html#你是怎么理解语义化的-语义化的好处",a:"你是怎么理解语义化的-语义化的好处"},"55.2":{t:"常见的语义化标签有哪些",p:`
header：页眉，网站标题、导航菜单等
nav：导航部分，通常包含网站的主要导航链接
main：主要内容区域
article：内容块、比如新闻文章、博客帖子等
aside：侧边栏
footer：页 ...`,l:"Interview/HTML/语义化的理解.html#常见的语义化标签有哪些",a:"常见的语义化标签有哪些"},"56.0":{t:"面试",p:`:::tip
面试题总结与归纳!
:::
`,l:"Interview/index.html",a:"面试"},"57.0":{t:"_1-块级作用域-引入-let-和-const-关键字-允许在块级作用域中声明变量-解决了变量提升和作用域污染的问题。",p:`
箭头函数：使用箭头(=&gt;)定义函数，简化了函数的书写，并且自动绑定了this。
模板字符串：使用反引号（\`）包裹字符串，可以在字符串中使用变量和表达式，实现更灵活的字符串拼接和格式化。
解构赋 ...`,l:"Interview/JavaScript/ES6.html",a:"_1-块级作用域-引入-let-和-const-关键字-允许在块级作用域中声明变量-解决了变量提升和作用域污染的问题。"},"58.0":{t:"作为浏览器脚本语言-javascript-的主要用途是和用户交互以及操作-dom-所以只能是单线程-如果不是单线程-会带来很复杂的同步问题-比如一个线程在-dom-节点上添加内容-另一个线程删除节点-此时浏览器不知道以那个为准。",p:`同一个时间只能做一件事。所有任务都需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着
所有任务可以分成两种，一种是宏任务，另一种是微任务
宏任务指的是，在 ...`,l:"Interview/JavaScript/EventLoop.html",a:"作为浏览器脚本语言-javascript-的主要用途是和用户交互以及操作-dom-所以只能是单线程-如果不是单线程-会带来很复杂的同步问题-比如一个线程在-dom-节点上添加内容-另一个线程删除节点-此时浏览器不知道以那个为准。"},"59.0":{t:"this-的绑定方式",p:`
默认绑定，非严格模式下 this 指向全局对象，严格模式下函数内的 this 指向 undefined，但是不会改变全局中 this 的指向
隐式绑定，当函数引用有上下文对象的时候，比如 obj.f ...`,l:"Interview/JavaScript/this.html",a:"this-的绑定方式"},"60.0":{t:"如何阻止事件冒泡和默认事件",p:`
标准的 DOM 对象中可以使用事件对象的 stopPropagation()方法来阻止冒泡，在 IE8 以下中 IE 的事件对象通过设置事件对象的 cancleBubble 属性为 true 来阻止 ...`,l:"Interview/JavaScript/事件.html",a:"如何阻止事件冒泡和默认事件"},"60.1":{t:"事件捕获和冒泡",p:`事件捕获阶段 处于目标阶段 事件冒泡阶段
事件流是一个事件沿着特定数据结构传播的过程。冒泡和捕获是事件流在 DOM 中两种不同的传播方法

事件捕获：当鼠标点击或者触发 dom 事件时，浏览器会从根节 ...`,l:"Interview/JavaScript/事件.html#事件捕获和冒泡",a:"事件捕获和冒泡"},"61.0":{t:"什么是作用域",p:`作用域就是可访问变量的集合，做大的作用就是隔离变量，不同作用域下同名变量不会冲突
`,l:"Interview/JavaScript/作用域闭包.html",a:"什么是作用域"},"61.1":{t:"作用域的类型",p:`全局作用域、函数作用域和块级作用域
`,l:"Interview/JavaScript/作用域闭包.html#作用域的类型",a:"作用域的类型"},"61.2":{t:"函数作用域",p:`指的是声明在函数内部的变量，函数的作用域在函数定义的时候决定的
`,l:"Interview/JavaScript/作用域闭包.html#函数作用域",a:"函数作用域"},"61.3":{t:"块作用域",p:`块作用域由 {}包括，if 和 for 语句中的{}也属于块作用域
在块级作用域中，可以通过 let 和 const 声明变量，这个变量在块级作用域外无法被访问
`,l:"Interview/JavaScript/作用域闭包.html#块作用域",a:"块作用域"},"61.4":{t:"var-let-const-区别",p:`var：没有块级作用域概念，可以跨块访问，会变量提升
let：只能在块作用域中访问，不能跨块访问，也不能跨函数访问，没有变量提升，不能重复声明
const：用来定义常量，声明时必须赋值，只能在块级作用 ...`,l:"Interview/JavaScript/作用域闭包.html#var-let-const-区别",a:"var-let-const-区别"},"61.5":{t:"作用域链",p:"当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级的执行上下文的变量对象中查找，如果还没有找到，一直找到全局上下文的变量对象，也就是全局对象。这种由多个执行上下文的变量对象构 ...",l:"Interview/JavaScript/作用域闭包.html#作用域链",a:"作用域链"},"61.6":{t:"闭包",p:`有权访问另外一个函数作用域中的变量的函数，主要的就两点，一是是一个函数，二是能访问另外一个函数作用域中的变量
闭包的特性：

可以访问当前函数以外的变量
即使外部函数已经返回，闭包仍然能访问外部函数定 ...`,l:"Interview/JavaScript/作用域闭包.html#闭包",a:"闭包"},"62.0":{t:"原型的作用",p:`原型被定义为给其它对象提供共享属性的对象，函数的实例可以共享原型上的属性和方法
`,l:"Interview/JavaScript/原型-原型链.html",a:"原型的作用"},"62.1":{t:"原型链",p:"作用就是当你在访问一个对象上的属性的时候，如果该对象内部不存在这个属性，那么就会去它的proto属性所指向的原型对象上查找，如果依旧不存在，就会去原型的proto属性所指向的原型对象上去查找，直到找到 ...",l:"Interview/JavaScript/原型-原型链.html#原型链",a:"原型链"},"62.2":{t:"原型链和作用域链的区别",p:`原型链是查找对象上的属性，作用域链是查找当前上下文中的变量
`,l:"Interview/JavaScript/原型-原型链.html#原型链和作用域链的区别",a:"原型链和作用域链的区别"},"62.3":{t:"proto、prototype、constructor",p:`
js 对象分为两种，普通对象和函数对象
proto 和 constructor 是对象独有的，prototype 是函数对象独有的，作用是给特定类型的所有实例提供共享的属性和方法，但是在 js 中， ...`,l:"Interview/JavaScript/原型-原型链.html#proto、prototype、constructor",a:"proto、prototype、constructor"},"63.0":{t:"什么是内存泄漏",p:`
内存泄漏是指应当被回收的对象没有被正常回收,导致内存占用越来越高,会导致应用程序速度变慢,高延时,奔溃等问题

`,l:"Interview/JavaScript/垃圾回收.html",a:"什么是内存泄漏"},"63.1":{t:"内存泄漏的常见原因",p:`
创建全局变量
被遗忘的计时器或回调函数
闭包
脱离 DOM 的引用

JavaScript 有自动的垃圾回收机制，当一个值，在内存中失去引用时，垃圾回收机制会根据特殊的算法找到它，并将其回收，释放内 ...`,l:"Interview/JavaScript/垃圾回收.html#内存泄漏的常见原因",a:"内存泄漏的常见原因"},"63.2":{t:"标记清除方法",p:`
标记阶段：垃圾回收器从根对象开始遍历，每一个可以从根对象访问到的对象都会被添加一个标识，这个对象被标记为可到达对象
清除阶段：垃圾回收器对堆内存从头到尾进行线性遍历，如果发现有对象没有被标识为可到达 ...`,l:"Interview/JavaScript/垃圾回收.html#标记清除方法",a:"标记清除方法"},"63.3":{t:"引用计数法",p:`将资源被引用的次数保存起来,当被引用次数为零时释放,局限性是当出现循环引用时,互相引用的对象不会被回收
`,l:"Interview/JavaScript/垃圾回收.html#引用计数法",a:"引用计数法"},"63.4":{t:"怎么防止内存泄漏",p:`
及时清除引用
使用 WeakMap 和 WeakSet，因为它们对于值的引用不计入垃圾回收机制

`,l:"Interview/JavaScript/垃圾回收.html#怎么防止内存泄漏",a:"怎么防止内存泄漏"},"64.0":{t:"什么是执行上下文",p:`当前 JavaScript 代码被解析和执行所在环境的抽象概念
JavaScript 代码都是在执行上下文中运行的，执行上下文就是指当前环境中的变量、函数声明、作用域链、this 等信息
`,l:"Interview/JavaScript/执行上下文和执行栈.html",a:"什么是执行上下文"},"64.1":{t:"执行上下文分类",p:`
全局执行上下文：只有一个，浏览器环境下为 window
函数执行上下文：存在无数个，每当一个函数被调用时，都会为该函数创建一个新的上下文
eval 执行上下文：运行在 eval 函数中的代码

对于 ...`,l:"Interview/JavaScript/执行上下文和执行栈.html#执行上下文分类",a:"执行上下文分类"},"64.2":{t:"执行上下文的特点",p:`
单线程，只在主线程上运行
同步执行，从上向下按顺序执行
全局上下文只有一个，也就是 window 对象
函数每调用一次就会产生一个新的执行上下文环境

`,l:"Interview/JavaScript/执行上下文和执行栈.html#执行上下文的特点",a:"执行上下文的特点"},"64.3":{t:"什么是执行栈",p:`是一种先进后出的数据结构，用来存储代码运行的所有执行上下文

当 JS 引擎第一次遇到 js 脚本时，会创建一个全局的执行上下文并压入当前执行栈
每当 JS 引擎调用一个函数的时候，会为该函数创建一个 ...`,l:"Interview/JavaScript/执行上下文和执行栈.html#什么是执行栈",a:"什么是执行栈"},"64.4":{t:"执行上下文的生命周期",p:`主要分为两个阶段：
1.创建阶段：在这个阶段生成变量对象，建立作用域链，确定 this 指向
2.执行阶段：对变量进行赋值，函数引用，执行其它代码
`,l:"Interview/JavaScript/执行上下文和执行栈.html#执行上下文的生命周期",a:"执行上下文的生命周期"},"64.5":{t:"什么是变量对象",p:`变量对象是和执行上下文相关的数据作用域，存储了上下文中定义的变量和函数声明
是一个抽象的概念，在全局执行上下文中，变量对象就是全局对象，在顶层 js 代码中，this 指向全局对象，全局变量会作为该对 ...`,l:"Interview/JavaScript/执行上下文和执行栈.html#什么是变量对象",a:"什么是变量对象"},"65.0":{t:"javascript-是什么语言",p:`JavaScript 是一种弱类型（可以发生隐式类型转换）、动态的语言


动态语言：在运行过程中需要检查数据类型的语言


静态语言：在使用之前就需要确认其变量数据类型的语言


`,l:"Interview/JavaScript/数据类型.html",a:"javascript-是什么语言"},"65.1":{t:"js-都有什么数据类型",p:`基本数据类型：string、number、boolean、null、undefined、symbol（ES6 新增）、bigint（ES10 新增）
引用数据类型：object （普通对象-objec ...`,l:"Interview/JavaScript/数据类型.html#js-都有什么数据类型",a:"js-都有什么数据类型"},"65.2":{t:"为什么要新增-symbol",p:"主要是为了解决全局变量冲突的问题，比如定义了一个全局对象，用来缓存数据，现在有两个 js 文件需要往这个对象中添加键名，由于 js 文件在不同模块，所以可能添加相同的键名，就会出现冲突的问题，所以 S ...",l:"Interview/JavaScript/数据类型.html#为什么要新增-symbol",a:"为什么要新增-symbol"},"65.3":{t:"如果想要复用一个-symbol-该怎么操作",p:`使用Symbol.for('字符串')，传入相同的字符串，一定会返回相同的 symbol 类型的值
使用 symbol 值作为对象的属性名，通过 for in、Object.keys 都是获取不到的， ...`,l:"Interview/JavaScript/数据类型.html#如果想要复用一个-symbol-该怎么操作",a:"如果想要复用一个-symbol-该怎么操作"},"65.4":{t:"为什么要新增-bigint-作用是什么",p:`支持比 Number 数据类型支持的范围更大的整数值
创建 bigint，只需要在数字末尾追加 n 或者使用 BigInt()构造函数来创建
`,l:"Interview/JavaScript/数据类型.html#为什么要新增-bigint-作用是什么",a:"为什么要新增-bigint-作用是什么"},"65.5":{t:"null-和-undefined-的区别",p:`

null
空值 语义是表示一个对象被认为的重置为空对象，不是一个变量最原始的状态，使用场景

明确定义的变量在将来是用于保存对象的，就应该将这个变量初始化为 null，有助于区分 null 和 u ...`,l:"Interview/JavaScript/数据类型.html#null-和-undefined-的区别",a:"null-和-undefined-的区别"},"65.6":{t:"null-是对象吗-为什么",p:`typeof null == 'object'
从逻辑上来看，null 值表示一个空对象指针，代表的其实就是一个空对象
在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型 ...`,l:"Interview/JavaScript/数据类型.html#null-是对象吗-为什么",a:"null-是对象吗-为什么"},"65.7":{t:"javascript-数据如何存储",p:`基本数据类型用栈存储，栈内存的特点的分配固定大小的内存空间，可以快速分配和释放，而基本数据类型的值是不可变的，所以可以存储在栈中，可以直接访问和复制
引用数据类型用堆存储，堆内存是动态分配，可以容纳各 ...`,l:"Interview/JavaScript/数据类型.html#javascript-数据如何存储",a:"javascript-数据如何存储"},"65.8":{t:"判断数据类型的方法",p:`
typeof：可以判断除了 null 之外的原始数据类型，判断 null 为 object，对于引用类型，会判断为 function 和 object 两种类型 直接在计算机底层基于数据类型的二进制 ...`,l:"Interview/JavaScript/数据类型.html#判断数据类型的方法",a:"判断数据类型的方法"},"65.9":{t:"怎么判断一个数组",p:`
instanceof方法：使用instanceof运算符判断对象是否为数组，返回布尔值。例如：arr instanceof Array。
constructor方法：使用constructor属性返 ...`,l:"Interview/JavaScript/数据类型.html#怎么判断一个数组",a:"怎么判断一个数组"},"65.10":{t:"如何判断一个对象是否为空",p:`
Object.keys() Object.keys(obj).length === 0
for in 循环，if (obj.hasOwnProperty(key)) {return false}
J ...`,l:"Interview/JavaScript/数据类型.html#如何判断一个对象是否为空",a:"如何判断一个对象是否为空"},"65.11":{t:"为什么没-0-1-0-2-0-3-怎么解决",p:`原因：

当计算机计算 0.1+0.2 的时候，实际上计算的是这两个数字在计算机里所存储的二进制，0.1 和 0.2 在转换为二进制表示的时候会出现位数无限循环的情况。js 中是以 64 位双精度格式 ...`,l:"Interview/JavaScript/数据类型.html#为什么没-0-1-0-2-0-3-怎么解决",a:"为什么没-0-1-0-2-0-3-怎么解决"},"65.12":{t:"isnan-和-number-isnan-函数的区别",p:`isNaN
接收参数后,会尝试将这个参数转换成数值,任何不能被转换成数值的值都会返回 true,因此非数字值传入也会返回 true,会影响 NaN 的判断
Number.isNaN
会首先判断传入参数 ...`,l:"Interview/JavaScript/数据类型.html#isnan-和-number-isnan-函数的区别",a:"isnan-和-number-isnan-函数的区别"},"65.13":{t:"object-is-和-的区别",p:`== 两边类型不一致,会进行强制类型转换再进行比较
=== 如果两边的类型不一致,不会做强制类型转换,直接返回 false
Object.is 一般情况下和===相同,处理了一些特殊的情况 比如-0  ...`,l:"Interview/JavaScript/数据类型.html#object-is-和-的区别",a:"object-is-和-的区别"},"65.14":{t:"为什么",p:`隐式类型转换
转换过程：

[]转换成数字 0
！[]首先转换成布尔值 false，再转换成数字为 0

`,l:"Interview/JavaScript/数据类型.html#为什么",a:"为什么"},"65.15":{t:"如何让-if-a-1-a-2-成立",p:`var a = {
  value: 0,
  valueOf: function () {
    this.value++;
    return this.value;
  },
};

`,l:"Interview/JavaScript/数据类型.html#如何让-if-a-1-a-2-成立",a:"如何让-if-a-1-a-2-成立"},"65.16":{t:"quot-1-quot-quot-2-quot-quot-3-quot-map-parseint-答案是多少",p:`
答案 [1, NaN, NaN] ​
parseInt 第一个参数str，即要解析的字符串
parseInt 第二个参数radix，基数（进制），范围2-36 ，以radix进制的规则去解析str字 ...`,l:"Interview/JavaScript/数据类型.html#quot-1-quot-quot-2-quot-quot-3-quot-map-parseint-答案是多少",a:"quot-1-quot-quot-2-quot-quot-3-quot-map-parseint-答案是多少"},"65.17":{t:"set、weakset、map、weakmap-的区别",p:`Set

成员不能重复
只有健值，没有健名，有点类似数组。
可以遍历，方法有 add, delete,has

WeakSet

成员都是对象
成员都是弱引用，随时可以消失。 可以用来保存 DOM 节 ...`,l:"Interview/JavaScript/数据类型.html#set、weakset、map、weakmap-的区别",a:"set、weakset、map、weakmap-的区别"},"66.0":{t:"ajax",p:`是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法
用途：无刷新获取服务器数据


优点：

通过异步 ...`,l:"Interview/JavaScript/网络请求.html",a:"ajax"},"66.1":{t:"axios、ajax、fetch-的区别",p:`
ajax 是一种技术统称，基于原生的 XHR 开发，已经有了 fetch 的替代方案。
fetch 是一个原生的 API，用于进行网络请求，支持 Promise API，但在某些方面功能较为简单，需 ...`,l:"Interview/JavaScript/网络请求.html#axios、ajax、fetch-的区别",a:"axios、ajax、fetch-的区别"},"67.0":{t:"_28-cdn",p:"&gt; CDN 的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或者网络中，在用户访问网站的时候，将其指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请 ...",l:"Interview/network/CDN.html",a:"_28-cdn"},"68.0":{t:"检查浏览器中是否缓存过该域名对应的-ip-地址",p:`
如果浏览器缓存中没有命中，将继续查找本级（操作系统）是否缓存过该 IP
向本地域名解析服务系统发起域名解析的请求（一般是本地运营商的机房）
向根域名解析服务器发起域名解析服务请求
根域名服务器返回  ...`,l:"Interview/network/DNS.html",a:"检查浏览器中是否缓存过该域名对应的-ip-地址"},"69.0":{t:"_1-get-是从服务器获取指定的资源-post-是根据请求报文对指定的资源做出处理",p:`
get 请求的参数一般放在 URL 中，浏览器对 URL 的长度有限制；post 请求携带的参数一般是写在 body 报文中，没有限制
get 请求是安全且幂等的，无论操作多少次，服务器上的数据都是 ...`,l:"Interview/network/get-post.html",a:"_1-get-是从服务器获取指定的资源-post-是根据请求报文对指定的资源做出处理"},"70.0":{t:"区别",p:`HTTP 是超文本传输协议，明文传输，存在安全风险的问题，HTTPS 是为了解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TSL 安全协议，使得报文能够密文传输
H ...`,l:"Interview/network/HTTP-HTTPS.html",a:"区别"},"70.1":{t:"https-解决了哪些问题",p:`HTTP 存在的问题：窃听风险：（通信链路上可以获取通信内容，用户信息容易泄露），篡改风险：（强制植入垃圾广告），冒充风险
HTTPS 在 HTTP 和 TCP 之间加入了 SSL/TSL 协议，将信 ...`,l:"Interview/network/HTTP-HTTPS.html#https-解决了哪些问题",a:"https-解决了哪些问题"},"70.2":{t:"混合加密",p:`通过混合加密的方法保证信息的机密性，采用对称加密和非对称加密的方式在通信建立前采用非对称加密的方式交换会话密钥，在通信过程中使用对称加密的方式进行加密明文数据
`,l:"Interview/network/HTTP-HTTPS.html#混合加密",a:"混合加密"},"70.3":{t:"https-握手过程",p:`
第一步，客户端给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法
第二步，服务端确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数
第三步 ...`,l:"Interview/network/HTTP-HTTPS.html#https-握手过程",a:"https-握手过程"},"70.4":{t:"对称加密和非对称加密",p:`
对称加密： 对称加密指的就是加密和解密使用同一个秘钥，所以叫做对称加密。对称加密只有一个秘钥。
非对称加密: 加密和解密使用不同的秘钥，一把作为公开的公钥，另一把作为私钥。公钥加密的信息，只有私钥才 ...`,l:"Interview/network/HTTP-HTTPS.html#对称加密和非对称加密",a:"对称加密和非对称加密"},"70.5":{t:"怎么实现-token-加密",p:`
需要一个 secret（随机数）
后端利用 secret 和加密算法(如：HMAC-SHA256)对 payload(如账号密码) 生成一个字符串(token)，返回前端
前端每次 request  ...`,l:"Interview/network/HTTP-HTTPS.html#怎么实现-token-加密",a:"怎么实现-token-加密"},"71.0":{t:"http1-1",p:"\r",l:"Interview/network/HTTP1.html",a:"http1-1"},"71.1":{t:"优点",p:`简单、灵活和好扩展、应用广泛和跨平台
简单：HTTP 的基本报文格式就是 header+body，头部信息也是 key-value 简单文本的形式，易于理解，学习和使用的门槛低
灵活和易于扩展：HTT ...`,l:"Interview/network/HTTP1.html#优点",a:"优点"},"71.2":{t:"缺点",p:`无状态、明文传输、不安全：浏览器不会记录 HTTP 的状态，当要完成有关联性的操作时会麻烦，可以使用 cookie 解决；明文传输，内容很容易被窃取；
`,l:"Interview/network/HTTP1.html#缺点",a:"缺点"},"71.3":{t:"性能",p:`基于 TCP/IP，使用请求-应答的通信模式
在 HTTP 1.0 中，每次发起一个请求，都要新建一次 TCP 链接，而且是串行请求，TCP 的连接和断开，增加了通信开销
HTTP1.0 为了解决这个 ...`,l:"Interview/network/HTTP1.html#性能",a:"性能"},"71.4":{t:"如何优化",p:`主要从以下三个方面来进行考虑：

尽量避免发送 HTTP 请求
在需要发送 HTTP 请求的时候，考虑如何减少 HTTP 请求数
减少服务器的 HTTP 响应的数据大小

避免发送 HTTP 请求
对 ...`,l:"Interview/network/HTTP1.html#如何优化",a:"如何优化"},"71.5":{t:"http2",p:"\r",l:"Interview/network/HTTP1.html#http2",a:"http2"},"71.6":{t:"有什么优点",p:"HTTP2 的出现是为了解决 HTTP1.1 存在的问题，HTTP1.1 中存在以下问题：并发连接有限（比如谷歌浏览器的最大并发连接数是 6 个，而且每一个连接都要经过 TCP 和 TSL 握手的耗时 ...",l:"Interview/network/HTTP1.html#有什么优点",a:"有什么优点"},"72.0":{t:"host-客户端发送请求的时候-用于指定服务器的域名",p:`
Connection：用于客户端要求服务器使用 HTTP 长连接机制
Content-length：服务器在返回数据的时候，表示本次回应的数据长度
Content-Type：用于服务器回应时，告诉客 ...`,l:"Interview/network/HTTP常见字段有哪些.html",a:"host-客户端发送请求的时候-用于指定服务器的域名"},"73.0":{t:"概念",p:`当用户在身份认证服务器上登录过一次之后，即可获取访问单点登录系统中的其它关联系统和应用软件的权限。
实现机制：

当用户第一次访问应用系统 1 的时候，因为还没有登录，会被引导到认证系统中进行登录；根 ...`,l:"Interview/network/SSO单点登录.html",a:"概念"},"74.0":{t:"为什么会有-tcp-ip-协议",p:`同一台设备进程之间进行通信，可以通过管道、共享内存、信号、消息队列等方式，而不同的设备之间想要进行通信，就需要网络进行通信，但是设备是多样性的，为了兼容多种设备，就协商出了一套通用的网络协议
`,l:"Interview/network/TCP-IP.html",a:"为什么会有-tcp-ip-协议"},"74.1":{t:"什么是-tcp",p:`面向连接的、可靠的、基于字节流的传输层通信协议
面向连接：一对一
可靠的：保证一个报文一定能到达接收端
字节流
`,l:"Interview/network/TCP-IP.html#什么是-tcp",a:"什么是-tcp"},"74.2":{t:"tcp-ip-网络模型有几层",p:`应用层：
应用层处于最上层，用户能够直接接触到的就是应用层，比如手机和电脑上的软件。应用层的作用主要就是产生数据，将数据传给传输层。应用层工作在系统的用户态，而传输层之下的工作在内核态
传输层：
应用 ...`,l:"Interview/network/TCP-IP.html#tcp-ip-网络模型有几层",a:"tcp-ip-网络模型有几层"},"74.3":{t:"tcp-头格式有哪些",p:`序列号：在建立连接的时候由计算机生成的随意数作为其初始值，通过 SYN 包传给接收端主机，每发送一次数据，就累加一次该数据字节数的大小。用来解决网络包乱序的问题
确认应答号：指下一次期望收到的数据的序 ...`,l:"Interview/network/TCP-IP.html#tcp-头格式有哪些",a:"tcp-头格式有哪些"},"74.4":{t:"为什么需要-tcp-协议-工作在那一层",p:`IP 层是不可靠的，不能保证网络包的交付，不保证网络包的按序交付，不保证网络包中数据的完整性。如果需要保证网络数据包的可靠性，需要 TCP 来负责，工作在传输层
`,l:"Interview/network/TCP-IP.html#为什么需要-tcp-协议-工作在那一层",a:"为什么需要-tcp-协议-工作在那一层"},"74.5":{t:"三次握手",p:`一开始，客户端和服务端都是 CLOSE 状态，先是服务端主动监听某个端口，处于 LISTEN 状态
客户端随机初始化序列号，把 SYN 标志置为 1，表示当前报文为 SYN 报文，然后把第一个 SYN ...`,l:"Interview/network/TCP-IP.html#三次握手",a:"三次握手"},"74.6":{t:"四次挥手",p:`
第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态，停止发送数据，等待服务端的确认
第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文 ...`,l:"Interview/network/TCP-IP.html#四次挥手",a:"四次挥手"},"74.7":{t:"ssl-断开连接后如何恢复",p:`通过 session ID：
使用 session ID 的方式，每一次的会话都有一个编号，当对话中断后，下一次重新连接时，只要客户端给出这个编号，服务器如果有这个编号的记录，那么双方就可以继续使用以 ...`,l:"Interview/network/TCP-IP.html#ssl-断开连接后如何恢复",a:"ssl-断开连接后如何恢复"},"74.8":{t:"tcp-和-udp-区别",p:`
TCP 是面向连接的，udp 是无连接的即发送数据前不需要先建立链接
TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失， 不重复，且按序到达;UDP 尽最大努力交付，即 ...`,l:"Interview/network/TCP-IP.html#tcp-和-udp-区别",a:"tcp-和-udp-区别"},"75.0":{t:"_1xx",p:`提示信息，表示目前是协议处理的中间状态，还需要后续的操作
`,l:"Interview/network/常见状态码.html",a:"_1xx"},"75.1":{t:"_2xx",p:`成功，报文已经收到并且被正常处理
* 200 OK 最常见的成功状态码，表示一切正常
* 204  No Content  成功，但是响应头没有body数据
* 206 Partial Content ...`,l:"Interview/network/常见状态码.html#_2xx",a:"_2xx"},"75.2":{t:"_3xx",p:`表示客户端请求的资源发生了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向
* 301 Moved Permanently 永久重定向，说明请求的资源已经不存在了，需要用新的URL再 ...`,l:"Interview/network/常见状态码.html#_3xx",a:"_3xx"},"75.3":{t:"_4xx",p:`表示客户端发送的报文有误，服务器无法处理
* 400 表示客户端请求的报文有错误
* 403 Forbidden 表示服务器禁止访问资源，不是客户端的请求出错
* 404 Not Found 请求的资 ...`,l:"Interview/network/常见状态码.html#_4xx",a:"_4xx"},"75.4":{t:"_5xx",p:`客户端请求正确，但是服务器内部发生了错误
* 500 服务器发生错误
* 501 表示客户端请求的功能还不支持
* 502 通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服 ...`,l:"Interview/network/常见状态码.html#_5xx",a:"_5xx"},"76.0":{t:"简单请求",p:`
GET
HEAD
POST
Content-Type： text / plain 、multipart / form-data 、application / x-www-form-urlencode ...`,l:"Interview/network/简单请求和复杂请求.html",a:"简单请求"},"77.0":{t:"短沦陷",p:`
浏览器每隔一段时间向服务器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行 响应。
这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端 ...`,l:"Interview/network/长短轮询.html",a:"短沦陷"},"78.0":{t:"缓存",p:`缓存可以减少网络 IO 消耗，提高访问速度。浏览器缓存是一种操作简单，效果显著的前端性能优化手段。
通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端和服务器之间进行多次往返通信，这会延迟浏 ...`,l:"Interview/Performance/存储篇.html",a:"缓存"},"78.1":{t:"强缓存",p:"强缓存是利用 http 头中的 Expires 和 Cache-Control 两个字段来控制的。强缓存中，当请求再次发出时，浏览器会根据其中的 expires 和 cache-control 判断目 ...",l:"Interview/Performance/存储篇.html#强缓存",a:"强缓存"},"78.2":{t:"协商缓存",p:`协商缓存依赖于浏览器和服务端之间的通信，协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源
如果服务端提示资源未改动，304 No ...`,l:"Interview/Performance/存储篇.html#协商缓存",a:"协商缓存"},"78.3":{t:"决策指南",p:"当我们的资源不可复用的时候，之间为 Cache-Control 为 no-store，拒绝一切形式的缓存；否则考虑是否每次都需要向服务器进行缓存有效确认，如果需要，设置为 no-cache，否则考虑该 ...",l:"Interview/Performance/存储篇.html#决策指南",a:"决策指南"},"78.4":{t:"本地存储",p:"\r",l:"Interview/Performance/存储篇.html#本地存储",a:"本地存储"},"78.5":{t:"cookie",p:`HTTP 是一个无状态协议，服务器接收客户端的请求，返回一个响应，然后就结束了，服务器没有记录任何关于客户端的任何信息，下次请求的时候，不知道客户端是谁
cookie 就是一个存储在浏览器中的很小的一 ...`,l:"Interview/Performance/存储篇.html#cookie",a:"cookie"},"78.6":{t:"localstorage",p:`持久化的本地存储，存储在其中的数据是永远不会过期的，使其消失的唯一办法就是手动删除；常用于存储一些内容稳定的资源
`,l:"Interview/Performance/存储篇.html#localstorage",a:"localstorage"},"78.7":{t:"sessionstorage",p:"会话级别的存储，当会话结束（页面被关闭的时候）存储内容也会随之被释放；即便是相同域名下的两个窗口，只要不在同一个浏览器窗口中打开，那么它们的 SessionStorage 无法共享。存储只适用于当前会 ...",l:"Interview/Performance/存储篇.html#sessionstorage",a:"sessionstorage"},"78.8":{t:"indexdb",p:`运行在浏览器上的非关系型数据库。一般来说是没有存储上限的，不仅可以存储字符串，也可以存储二进制数据。
当数据的复杂度和规模上升到了 LocalStorage 无法解决的程度，可以使用 IndexDB
`,l:"Interview/Performance/存储篇.html#indexdb",a:"indexdb"},"78.9":{t:"cdn-的缓存和回源机制",p:`内容分发网络指的是一组分布在各个地区的服务器。这些服务器存储着数据的副本，所有服务器可以根据哪些服务器和用户距离最近，来满足数据的请求。
缓存、本都存储带来的性能提升，都是只能在拿到数据后存起来这件事 ...`,l:"Interview/Performance/存储篇.html#cdn-的缓存和回源机制",a:"cdn-的缓存和回源机制"},"79.0":{t:"懒加载",p:"针对图片加载时机的优化，在一些图片量比较大的网站，如果尝试在用户打开页面的时候，就把所有的图片资源加载完毕，那么很可能会造成白屏、卡顿等现象，因为图片太多了，浏览器可能做不到一次性处理那么多的任务。实 ...",l:"Interview/Performance/应用篇.html",a:"懒加载"},"79.1":{t:"防抖与节流",p:`本质上都是闭包
节流:通过在一段时间内无视后来产生的回调请求来实现的
防抖:在一段时间内,无论调用多少次,只执行最后一次
`,l:"Interview/Performance/应用篇.html#防抖与节流",a:"防抖与节流"},"80.0":{t:"服务端渲染",p:`首先是客户端渲染，在客户端渲染模式下，服务端会把渲染需要的静态文件发送给客户端，客户端加载过来之后，自己在浏览器里跑一遍 JS，生成相应的 DOM，这种特性使得客户端代码渲染的源代码很简洁。
服务端渲 ...`,l:"Interview/Performance/渲染篇.html",a:"服务端渲染"},"80.1":{t:"浏览器",p:`渲染过程：简单来说就是渲染引擎根据 HTML 文件描述构建相应的数学模型了。调用浏览器各个模块，将网页资源代码转换成图像结果，这个过程就是渲染过程。


HTML 解释器：将 HTML 文档经过词法分 ...`,l:"Interview/Performance/渲染篇.html#浏览器",a:"浏览器"},"80.2":{t:"css-优化",p:`
避免使用通配符，只对需要用到的元素进行选择
关注可以通过继承实现的属性，避免重复匹配重复定义
少用标签选择器
减少嵌套

CSS 是阻塞渲染的资源，DOM 树和 CSSOM 合并构建成渲染树，浏览器 ...`,l:"Interview/Performance/渲染篇.html#css-优化",a:"css-优化"},"80.3":{t:"dom-优化",p:`减少 DOM 操作 ⭐⭐
回流：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性，然后再将计算的结果绘制出来，这个过程就叫回流 ...`,l:"Interview/Performance/渲染篇.html#dom-优化",a:"dom-优化"},"81.0":{t:"在网络层面进行优化-有三个地方可以进行优化-分别是-dns-解析、tcp-连接和-http-请求-响应-对于-dns-和-tcp-连接这两个步骤-前端可以做的非常有限-核心是在-http-连接上进行优化。",p:`HTTP 优化有两个大方向：减少请求次数和减少单次请求所花费的时间。主要通过 webpack 去优化：
`,l:"Interview/Performance/网络篇.html",a:"在网络层面进行优化-有三个地方可以进行优化-分别是-dns-解析、tcp-连接和-http-请求-响应-对于-dns-和-tcp-连接这两个步骤-前端可以做的非常有限-核心是在-http-连接上进行优化。"},"81.1":{t:"webpack",p:"\r",l:"Interview/Performance/网络篇.html#webpack",a:"webpack"},"81.2":{t:"不要让-loader-做太多事情",p:"不要让 loader 做太多事情，比如说 babel-loader，babel-loader 功能很强大，但是也很慢，可以使用 include 或 exclude 帮我们避免不必要的转译，或者通过开启 ...",l:"Interview/Performance/网络篇.html#不要让-loader-做太多事情",a:"不要让-loader-做太多事情"},"81.3":{t:"处理第三方库",p:`使用 DllPlugin，这个插件会把第三方库单独打包到一个文件中，这个文件就是一个单纯的依赖库。这个依赖库不会跟着你的业务代码一起被打包，只有当依赖自身发生版本变化时才会重新打包。
使用 DllPl ...`,l:"Interview/Performance/网络篇.html#处理第三方库",a:"处理第三方库"},"81.4":{t:"使用-happypack-将-loder-由单进程转换成多进程",p:"webpack 是单线程的，如果同一时刻存在多个任务，只能排队一个一个的等待处理，但是 CPU 是多核的，Happypack 会充分释放 CPU 在多核并发方面的优势，帮我们把任务分解给多个子进程去并 ...",l:"Interview/Performance/网络篇.html#使用-happypack-将-loder-由单进程转换成多进程",a:"使用-happypack-将-loder-由单进程转换成多进程"},"81.5":{t:"构建结果体积压缩",p:`将文件结果可视化，找出导致体积过大的原因
包组成可视化工具：webpack-bundle-analyer，配置方式和普通 plugin 一样，能够以矩形树图的形式将包内各个模块的大小和依赖关系呈现出来 ...`,l:"Interview/Performance/网络篇.html#构建结果体积压缩",a:"构建结果体积压缩"},"81.6":{t:"gzip-压缩",p:"在请求头中通过 accept-encoding：gzip 来开启 Gzip 压缩，服务端压缩，客户端解压，一般情况下，如果处理的是具备一定规模的项目，压缩后通常能减少响应 70%左右的大小。Gzip  ...",l:"Interview/Performance/网络篇.html#gzip-压缩",a:"gzip-压缩"},"81.7":{t:"图片优化",p:`图片在所有资源中所占的比重是非常大的，当下应用比较广泛的 Web 图片格式有 JPEG/JPG、PNG、WebP、Base64、SVG 等。
首先，在计算机中，像素是用二进制表示的，不同的图片格式中像 ...`,l:"Interview/Performance/网络篇.html#图片优化",a:"图片优化"},"81.8":{t:"jpeg-jpg",p:`有损压缩、体积小、加载快、不支持透明
最大的特点就是有损压缩，这种压缩算法很高效，所有 JPG 是一种非常轻巧的图片格式，JPG 格式有 24 位存储单个图，可以呈现多达 1600 万中颜色，一般场景 ...`,l:"Interview/Performance/网络篇.html#jpeg-jpg",a:"jpeg-jpg"},"81.9":{t:"png",p:"是一种无损压缩的高保真的图片格式，8 和 24 代表的是二进制的位数，PNG-8 最多支持 256 种颜色，PNG-24 最多支持 1600 万种颜色，PNG 图片具有比 JPG 更强的色彩表现力，对 ...",l:"Interview/Performance/网络篇.html#png",a:"png"},"81.10":{t:"svg",p:`文本文件、体积小、不失真、兼容性好
SVG 是一种基于 XML 语法的图像格式，SVG 对图像的处理不是基于像素点，而是基于对图像的形状描述。对比 PNG 和 JPG，文件体积更小，可压缩性更强。最显 ...`,l:"Interview/Performance/网络篇.html#svg",a:"svg"},"81.11":{t:"base64",p:`文本文件、依赖编码、小图标解决方案
和精灵图一样，都是用于解决小图标的，精灵图就是将小图标合并到一张图片上，然后利用 CSS 的背景定位来显示其中每一部分的技术。Base64 的出现，也是为了减少加载 ...`,l:"Interview/Performance/网络篇.html#base64",a:"base64"},"81.12":{t:"webp",p:`Google 开发的旨在加快图片加载速度的图片格式，支持有损压缩和无损压缩。
优点：具备 JPG、PNG 一样的优点，可以显示动态图片。
缺点：对除 Chrome 之外的浏览器兼容性较差，会增加服务端 ...`,l:"Interview/Performance/网络篇.html#webp",a:"webp"},"82.0":{t:"跨站伪造请求",p:`

防护原理：

使用CSRF Token进行验证
验证请求来源
验证HTTP Referer头



`,l:"Interview/Safe/SCRF.html",a:"跨站伪造请求"},"83.0":{t:"就是通过把-sql-命令插入到-web-表单递交或输入域名或页面请求的查询字符串-最终达到欺骗服务器执行恶意的-sql-命令",p:`

总的来说有以下几点

永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双&quot;-&quot;进行转换等
永远不要使用动态拼装 SQL，可以使用参数化 ...`,l:"Interview/Safe/SQl注入.html",a:"就是通过把-sql-命令插入到-web-表单递交或输入域名或页面请求的查询字符串-最终达到欺骗服务器执行恶意的-sql-命令"},"84.0":{t:"xss-cross-site-scripting-攻击指的是攻击者往-web-页面里插入恶意-html-标签或者-javascript-代码。比如-攻击者在论坛中放一个看似安全的链接-骗取用户点击后-窃取-cookie-中的用户私密信息-或者攻击者在论坛中加一个恶意表单-当用户提交表单的时候-却把信息传送到攻击者的服务器中-而不是用户原本以为的信任站点",p:`

防护原理：

对用户输入进行合适的转义和过滤
使用安全的模板引擎或自动转义函数
使用 HTTP 头部中的 Content Security Policy (CSP)



`,l:"Interview/Safe/XSS.html",a:"xss-cross-site-scripting-攻击指的是攻击者往-web-页面里插入恶意-html-标签或者-javascript-代码。比如-攻击者在论坛中放一个看似安全的链接-骗取用户点击后-窃取-cookie-中的用户私密信息-或者攻击者在论坛中加一个恶意表单-当用户提交表单的时候-却把信息传送到攻击者的服务器中-而不是用户原本以为的信任站点"},"85.0":{t:"http-是明文传输-https-是加密传输-https-http-tls-ssl",p:"\r",l:"Interview/Safe/中间人攻击.html",a:"http-是明文传输-https-是加密传输-https-http-tls-ssl"},"85.1":{t:"tsl-中的加密",p:`
对称加密：两边拥有相同的密钥，两边都知道如何将密文加密解密
非对称解密：有公钥和私钥之分，公钥所有人都知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私有只有分发公钥的一方才知道

`,l:"Interview/Safe/中间人攻击.html#tsl-中的加密",a:"tsl-中的加密"},"85.2":{t:"对称密钥加密和非对称密钥加密有什么区别",p:`
对称密钥加密是最简单的一种加密方式，加解密都是相同的密钥，好处是加解密效率快，但是不安全，如果有人拿到了这个密钥谁都可以进行解密
非对称密钥会有两把密钥，一把是私钥，只有自己才有；一把是公钥，可以发 ...`,l:"Interview/Safe/中间人攻击.html#对称密钥加密和非对称密钥加密有什么区别",a:"对称密钥加密和非对称密钥加密有什么区别"},"85.3":{t:"https-加密过程",p:`
客户端请求网址，例如www.baidu.com
服务端存储着公钥和私钥
服务器把 CA 数字证书（包含公钥）响应给客户端
客户端解析证书拿到公钥，生成随机的 KEY
客户端把解密后的 KEY 传递给 ...`,l:"Interview/Safe/中间人攻击.html#https-加密过程",a:"https-加密过程"},"85.4":{t:"中间人攻击的过程",p:`
客户端请求被劫持，将所有的请求发送到中间人的服务器
中间人服务器返回自己的证书
客户端创建随机数，使用中间人证书中的公钥进行加密发送给中间人服务器，中间人使用私钥对随机数解密并构造对称加密，对之后传 ...`,l:"Interview/Safe/中间人攻击.html#中间人攻击的过程",a:"中间人攻击的过程"},"85.5":{t:"怎么预防中间人攻击",p:`使用正规厂商的证书，慎用免费的
`,l:"Interview/Safe/中间人攻击.html#怎么预防中间人攻击",a:"怎么预防中间人攻击"},"86.0":{t:"防护原理",p:`
验证文件类型和大小
存储上传的文件在非 Web 可访问目录下
生成唯一且安全的文件名

`,l:"Interview/Safe/文件上传漏洞.html",a:"防护原理"},"87.0":{t:"区分用户是人还是机器",p:`

防止恶意破解：通过要求用户输入验证码，可以防止用户使用自动化程序对密码、账号不断尝试


防止刷票和灌水：可以阻止自动化程序大规模注册账号、刷屏或在论坛上发布大量无意义的帖子，保护网站资源免受滥用 ...`,l:"Interview/Safe/验证码.html",a:"区分用户是人还是机器"},"88.0":{t:"watch-的-deep-true-是怎么实现的",p:"当用户知道了 watch 中的 depp 属性为 true 时，如果当前监控的值是数组类型。会对对象中的每一项进行求值，此时会将当前 watcher 存入到对应属性的依赖中，这样数组中对象发生变化时也 ...",l:"Interview/Vue/Computed-Watch.html",a:"watch-的-deep-true-是怎么实现的"},"88.1":{t:"computed-和-watch-的区别",p:`
Computed本质是一个具备缓存的watcher，依赖的属性发生变化就会更新视图。 适用于计算比较消耗性能的计算场景。当表达式过于复杂时，在模板中放入过多逻辑会让模板难以维护，可以将复杂的逻辑放入 ...`,l:"Interview/Vue/Computed-Watch.html#computed-和-watch-的区别",a:"computed-和-watch-的区别"},"88.2":{t:"computed-的实现",p:`
初始化 data， 使用 Object.defineProperty 把这些属性全部转为 getter/setter。
初始化 computed, 遍历 computed 里的每个属性，每个 com ...`,l:"Interview/Vue/Computed-Watch.html#computed-的实现",a:"computed-的实现"},"88.3":{t:"watch-原理",p:`watch 本质上是为每个监听属性 setter 创建了一个 watcher，当被监听的属性更新时，调用传入的回调函数。常见的配置选项有 deep 和 immediate，对应原理如下

deep：深 ...`,l:"Interview/Vue/Computed-Watch.html#watch-原理",a:"watch-原理"},"89.0":{t:"vue-路由传参",p:`
使用 query 方法传入的参数使用this.$route.query接收
使用 params 方法传入的参数使用this.$route.params接收

`,l:"Interview/Vue/vue-router.html",a:"vue-路由传参"},"89.1":{t:"route-和-router-的区别",p:`
route：当前 router 跳转对象，里面可以获取 name、path、query、params 等
router：是 vue-router 的实例，想要导航到不同 URL，使用 router. ...`,l:"Interview/Vue/vue-router.html#route-和-router-的区别",a:"route-和-router-的区别"},"89.2":{t:"怎么定义动态路由-怎么获取传过来的参数",p:`在 router 目录下的 index.js 文件中，对 path 属性加上 /:id，使用 router 对象的 params.if 获取动态参数
`,l:"Interview/Vue/vue-router.html#怎么定义动态路由-怎么获取传过来的参数",a:"怎么定义动态路由-怎么获取传过来的参数"},"89.3":{t:"vue-里面-router-link-在电脑上有用-安卓上没反应怎么解决",p:`在安卓上有问题是 babel 的问题，安装 babel polypill 插件解决
`,l:"Interview/Vue/vue-router.html#vue-里面-router-link-在电脑上有用-安卓上没反应怎么解决",a:"vue-里面-router-link-在电脑上有用-安卓上没反应怎么解决"},"89.4":{t:"hash-和-history-路由模式实现原理",p:`**hash**模式
早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL中 # 后面的内容。比如下面这个网站，它的 lo ...`,l:"Interview/Vue/vue-router.html#hash-和-history-路由模式实现原理",a:"hash-和-history-路由模式实现原理"},"89.5":{t:"router-view-和-router-link-是怎么起作用的",p:`
vue-router中两个重要组件router-link和router-view，分别起到路由导航作用和组件内容渲染作用
使用中router-link默认生成一个a标签，设置to属性定义跳转path ...`,l:"Interview/Vue/vue-router.html#router-view-和-router-link-是怎么起作用的",a:"router-view-和-router-link-是怎么起作用的"},"89.6":{t:"了解-history-有哪些方法吗",p:"history 这个对象在html5的时候新加入两个api history.pushState() 和 history.repalceState() 这两个API可以在不进行刷新的情况下，操作浏览器的 ...",l:"Interview/Vue/vue-router.html#了解-history-有哪些方法吗",a:"了解-history-有哪些方法吗"},"89.7":{t:"怎么监听-pushstate-和-replacestate-的变化",p:`利用自定义事件new Event()创建这两个事件，并全局监听
`,l:"Interview/Vue/vue-router.html#怎么监听-pushstate-和-replacestate-的变化",a:"怎么监听-pushstate-和-replacestate-的变化"},"89.8":{t:"vue-router-如何保护路由",p:`
vue-router中保护路由的方法叫做路由守卫，主要用来通过跳转或取消的方式守卫导航。
路由守卫有三个级别：全局、路由独享、组件级。影响范围由大到小，例如全局的router.beforeEach( ...`,l:"Interview/Vue/vue-router.html#vue-router-如何保护路由",a:"vue-router-如何保护路由"},"89.9":{t:"怎么实现路由懒加载",p:`
当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。利用路由懒加载我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样会更加高效，是一种优化手段 ...`,l:"Interview/Vue/vue-router.html#怎么实现路由懒加载",a:"怎么实现路由懒加载"},"89.10":{t:"怎么从零开始实现一个-vue-路由",p:`一个SPA应用的路由需要解决的问题是页面跳转内容改变同时不刷新，同时路由还需要以插件形式存在，所以：

首先我会定义一个createRouter函数，返回路由器实例，实例内部做几件事


保存用户传入 ...`,l:"Interview/Vue/vue-router.html#怎么从零开始实现一个-vue-路由",a:"怎么从零开始实现一个-vue-路由"},"90.0":{t:"proxy-与-object-defineproperty-优劣对比",p:`Object.defineProperty()存在的问题：

不能监听数组的变化：无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应
必须遍历对象的每个属性：只能劫持对象的属性，从而需要 ...`,l:"Interview/Vue/Vue2-Vue3.html",a:"proxy-与-object-defineproperty-优劣对比"},"90.1":{t:"ref-和-reactive-的区别",p:`reactive 用于处理对象类型的数据响应式，底层采用 new Proxy（）
ref 通常用于处理单值的响应式问题，底层采用的是 Object.defineProperty()
`,l:"Interview/Vue/Vue2-Vue3.html#ref-和-reactive-的区别",a:"ref-和-reactive-的区别"},"90.2":{t:"watch-和-watcheffect-的区别",p:`
watch 需要手动指定要监视的数据和回调函数，具有更高的灵活性和定制性。watchEffect 会自动追踪函数内部使用的响应式数据，不需要显示指定
watch 可以监视多个数据，可以在回调函数中处 ...`,l:"Interview/Vue/Vue2-Vue3.html#watch-和-watcheffect-的区别",a:"watch-和-watcheffect-的区别"},"90.3":{t:"composition-api-和-options-api-有什么不同",p:`
在逻辑组织和逻辑复用方面，Composition API是优于Options API
因为Composition API几乎是函数，会有更好的类型推断。
Composition API对 tree- ...`,l:"Interview/Vue/Vue2-Vue3.html#composition-api-和-options-api-有什么不同",a:"composition-api-和-options-api-有什么不同"},"90.4":{t:"vue3-对-vue2-有什么优势",p:`
性能更好（编译优化、使用proxy等）
体积更小
更好的TS支持
更好的代码组织
更好的逻辑抽离
更多新功能

`,l:"Interview/Vue/Vue2-Vue3.html#vue3-对-vue2-有什么优势",a:"vue3-对-vue2-有什么优势"},"90.5":{t:"vue3-和-vue2-生命周期有什么区别",p:`Options API​生命周期

beforeDestroy改为beforeUnmount
destroyed改为umounted
其他沿用vue2生命周期

`,l:"Interview/Vue/Vue2-Vue3.html#vue3-和-vue2-生命周期有什么区别",a:"vue3-和-vue2-生命周期有什么区别"},"90.6":{t:"composition-api-和-react-hooks-的区别",p:`
Composition API的setup(相当于created、beforeCreate的合集)只会调用一次，而React Hooks函数在渲染过程中会被多次调用
Composition API无 ...`,l:"Interview/Vue/Vue2-Vue3.html#composition-api-和-react-hooks-的区别",a:"composition-api-和-react-hooks-的区别"},"90.7":{t:"vue3-新特性",p:`
api层面Vue3新特性主要包括：Composition API、SFC Composition API语法糖、Teleport传送门、Fragments 片段、Emits选项、自定义渲染器、SFC ...`,l:"Interview/Vue/Vue2-Vue3.html#vue3-新特性",a:"vue3-新特性"},"90.8":{t:"vue3-速度快的原因",p:`Vue3.0 性能提升体现在哪些方面

代码层面性能优化主要体现在全新响应式API，基于Proxy实现，性能更好（获取到哪一层才触发响应式get，不是像vue2一次性递归监听数据）
编译层面做了更多编 ...`,l:"Interview/Vue/Vue2-Vue3.html#vue3-速度快的原因",a:"vue3-速度快的原因"},"90.9":{t:"为什么需要-ref、toref、torefs",p:`为什么需要用 ref

返回值类型，会丢失响应式
如在setup、computed、合成函数，都有可能返回值类型
Vue如不定义ref，用户将制造ref，反而更混乱

为何 ref 需要.value  ...`,l:"Interview/Vue/Vue2-Vue3.html#为什么需要-ref、toref、torefs",a:"为什么需要-ref、toref、torefs"},"90.10":{t:"setup-如何获取组件实例",p:`
在setup和其他composition API中没有this
通过getCurrentInstance获取当前实例
若使用options API可以照常使用this

`,l:"Interview/Vue/Vue2-Vue3.html#setup-如何获取组件实例",a:"setup-如何获取组件实例"},"91.0":{t:"从-vuex-中获取的数据能直接更改吗",p:`不能直接更改，需要浅拷贝对象之后更改，否则会报错
`,l:"Interview/Vue/Vuex.html",a:"从-vuex-中获取的数据能直接更改吗"},"91.1":{t:"vuex-中-actions-和-mutations-有什么区别",p:`
改 Vuex 的 store 中的状态的唯一方法是提交 mutation，mutation 非常类似于事件：每个 mutation 都有一个字符串的类型 (type)和一个 回调函数 (handle ...`,l:"Interview/Vue/Vuex.html#vuex-中-actions-和-mutations-有什么区别",a:"vuex-中-actions-和-mutations-有什么区别"},"91.2":{t:"怎么监听-vuex-数据的变化",p:`
可以通过watch选项或者watch方法监听状态
可以使用vuex提供的 API：store.subscribe()


watch选项方式，可以以字符串形式监听$store.state.xx；su ...`,l:"Interview/Vue/Vuex.html#怎么监听-vuex-数据的变化",a:"怎么监听-vuex-数据的变化"},"91.3":{t:"vuex-页面刷新数据丢失怎么解决",p:`
vuex只是在内存保存状态，刷新之后就会丢失，如果要持久化就要存起来
localStorage就很合适，提交mutation的时候同时存入localStorage，store中把值取出作为state ...`,l:"Interview/Vue/Vuex.html#vuex-页面刷新数据丢失怎么解决",a:"vuex-页面刷新数据丢失怎么解决"},"91.4":{t:"pinia-有什么优点",p:`1. pinia 是什么？


在Vue3中，可以使用传统的Vuex来实现状态管理，也可以使用最新的pinia来实现状态管理，我们来看看官网如何解释pinia的：Pinia 是 Vue 的存储库，它允 ...`,l:"Interview/Vue/Vuex.html#pinia-有什么优点",a:"pinia-有什么优点"},"91.5":{t:"从零开始实现一个-vuex-说说思路",p:`
官方说vuex是一个状态管理模式和库，并确保这些状态以可预期的方式变更。可见要实现一个vuex


要实现一个Store存储全局状态
要提供修改状态所需 API：commit(type, paylo ...`,l:"Interview/Vue/Vuex.html#从零开始实现一个-vuex-说说思路",a:"从零开始实现一个-vuex-说说思路"},"92.0":{t:"数据绑定机制",p:`采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，
在数据变动时发布消息给订阅者，触发相应的监听回调。
`,l:"Interview/Vue/原理.html",a:"数据绑定机制"},"92.1":{t:"template-编译",p:`
转换成 AST 树，得到 render 函数返回 VNode
首先，通过 compile 编译器把 template 编译成 AST 语法树（abstract syntax tree 即 源代码的抽 ...`,l:"Interview/Vue/原理.html#template-编译",a:"template-编译"},"92.2":{t:"怎么监听对象或数组某个属性的变化",p:`$set
`,l:"Interview/Vue/原理.html#怎么监听对象或数组某个属性的变化",a:"怎么监听对象或数组某个属性的变化"},"92.3":{t:"什么是虚拟-dom-作用是什么",p:`只是一层真实 DOM 的抽象,以 JavaScript 对象作为基础的树.用对象的属性来描述节点,最终可以通过一系列操作使这棵树映射到真实环境上.
创建虚拟 DOM 是为了更好将虚拟的节点渲染到页面视 ...`,l:"Interview/Vue/原理.html#什么是虚拟-dom-作用是什么",a:"什么是虚拟-dom-作用是什么"},"92.4":{t:"vue-怎么检测数组的变化",p:`vue2 中并没有使用 defineProperty 来检测数组（性能差），vue2 采用重写数组的方法来实现（7 个变异的方法，能改变原数组的方法）
通过原型链 + 函数劫持的方式实现的（缺陷是不能 ...`,l:"Interview/Vue/原理.html#vue-怎么检测数组的变化",a:"vue-怎么检测数组的变化"},"92.5":{t:"vue-怎么进行依赖收集",p:`依赖收集的目的是等数据变化了可以自动更新视图
每个属性都有自己的 dep 属性，存放所依赖的 watcher，当属性变化后会通知自己对应的 watcher 去更新，默认在初始化的时候会调用 rende ...`,l:"Interview/Vue/原理.html#vue-怎么进行依赖收集",a:"vue-怎么进行依赖收集"},"92.6":{t:"vue-中-key-的作用和原理",p:`key 给每一个 vnode 一个唯一的 id，可以依靠 key，更准确、更快的拿到 oldVnode 中对应的节点，更新组件时判断两个节点是否相同，相同就复用，不相同就删除旧的创建新的
vue 和  ...`,l:"Interview/Vue/原理.html#vue-中-key-的作用和原理",a:"vue-中-key-的作用和原理"},"92.7":{t:"new-vue-过程做了什么",p:`
内部会初始化组件绑定的事件，初始化组件的父子关系$parent $children $root
初始化响应式数据 data、computed、props、watch、method，同时也初始化了 p ...`,l:"Interview/Vue/原理.html#new-vue-过程做了什么",a:"new-vue-过程做了什么"},"92.8":{t:"diff-算法原理",p:`DOM操作是非常昂贵的，因此我们需要尽量地减少DOM操作。这就需要找出本次DOM必须更新的节点来更新，其他的不更新，这个找出的过程，就需要应用 diff 算法

vue的diff算法是平级比较，不考虑 ...`,l:"Interview/Vue/原理.html#diff-算法原理",a:"diff-算法原理"},"92.9":{t:"响应式数据原理",p:`Vue2
数据劫持 + 观察者模式
对象内部通过 defineReactive 方法，使用 Object.defineProperty 来劫持各个属性的 setter、getter（只会劫持已经存在的 ...`,l:"Interview/Vue/原理.html#响应式数据原理",a:"响应式数据原理"},"92.10":{t:"vue-实例挂载的过程中发生了什么",p:`
挂载过程指的是app.mount()过程，这个过程中整体上做了两件事：初始化和建立更新机制
初始化会创建组件实例、初始化组件状态，创建各种响应式数据
建立更新机制这一步会立即执行一次组件更新函数，这 ...`,l:"Interview/Vue/原理.html#vue-实例挂载的过程中发生了什么",a:"vue-实例挂载的过程中发生了什么"},"92.11":{t:"为什么-vue-采用异步渲染",p:`
Vue 是组件级更新，如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染，所以为了性能， Vue 会在本轮数据更新后，在异步更新视图。核心思想 nextTick

当数据发生了变化时，首 ...`,l:"Interview/Vue/原理.html#为什么-vue-采用异步渲染",a:"为什么-vue-采用异步渲染"},"92.12":{t:"nexttick-实现原理",p:`主要是使用了宏任务和微任务，定义一个异步方法，多次调用 nextTick 会将方法存入到队列中，通过这个异步方法清空当前队列

nextTick 中的回调是在下次 DOM 更新循环结束之后执行延迟回调 ...`,l:"Interview/Vue/原理.html#nexttick-实现原理",a:"nexttick-实现原理"},"92.13":{t:"v-model-实现原理",p:"我们在 vue 项目中主要使用 v-model 指令在表单 input、textarea、select 等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖（可以看成是value + ...",l:"Interview/Vue/原理.html#v-model-实现原理",a:"v-model-实现原理"},"92.14":{t:"diff-算法的时间复杂度",p:`两个树的完全 diff 算法是一个时间复杂度为 O(n3)，Vue 进行了优化，转换成了 O(n)复杂度的问题（只比较同级不考虑跨级问题）
`,l:"Interview/Vue/原理.html#diff-算法的时间复杂度",a:"diff-算法的时间复杂度"},"93.0":{t:"谈谈对-vue-的理解",p:`
vue 是一套用于构建用户界面的渐进式框架，核心库只关心视图层
是一个声明式框架，更关注结果
收到 MVVM 模式启发，简化了映射关系
采用虚拟 DOM，比较新旧虚拟节点，找到变化再进行更新，提高性 ...`,l:"Interview/Vue/基础知识.html",a:"谈谈对-vue-的理解"},"93.1":{t:"为什么-vue-组件中-data-必须是函数",p:`
根实例对象 data 可以是对象也可以是函数，因为根实例是单例，不会产生数据污染情况
组件实例对象 data 必须是函数，.vue 文件在使用的时候实际上会转换成一个 class，一个组件被复用多次 ...`,l:"Interview/Vue/基础知识.html#为什么-vue-组件中-data-必须是函数",a:"为什么-vue-组件中-data-必须是函数"},"93.2":{t:"v-show-和-v-if-的区别",p:`区别

v-show 隐藏则是为该元素添加 css-display:none，dom元素依旧还在，v-if显示隐藏是将dom元素整个添加或删除
编译过程：v-if 切换有一个局部编译/缺陷的过程，切换 ...`,l:"Interview/Vue/基础知识.html#v-show-和-v-if-的区别",a:"v-show-和-v-if-的区别"},"93.3":{t:"为什么-v-if-和-v-for-不建议一起使用",p:`
在 vue2 中，v-for 的优先级是高于 v-if 的，把它们放在一起，输出的渲染函数中可以看出会先执行循环再判断条件，哪怕只渲染列表中一小部分元素，也得在每次重新渲染的时候遍历整个列表，这会比 ...`,l:"Interview/Vue/基础知识.html#为什么-v-if-和-v-for-不建议一起使用",a:"为什么-v-if-和-v-for-不建议一起使用"},"93.4":{t:"怎么获取-dom",p:`使用 ref 和 refs
先给标签设置一个 ref 值，再通过this.$refs.domName 来获取
`,l:"Interview/Vue/基础知识.html#怎么获取-dom",a:"怎么获取-dom"},"93.5":{t:"vue-初始化页面闪动问题",p:`在 vue 初始化之前，由于 div 是不归 vue 管的，所以写的代码在还没有解析的情况下会容易出现花屏现象，看到类似{{message}}的字样
可以在 css 里加
[v-cloak] {
   ...`,l:"Interview/Vue/基础知识.html#vue-初始化页面闪动问题",a:"vue-初始化页面闪动问题"},"93.6":{t:"ajax-请求应该放在-methods-还是-vuex-中",p:`
如果请求来的数据不是要被其它组件共用，仅仅在请求的组件内使用，就不需要放入 vuex 的 state 中
如果被其它地方复用，就放在 action 中，方便复用

`,l:"Interview/Vue/基础知识.html#ajax-请求应该放在-methods-还是-vuex-中",a:"ajax-请求应该放在-methods-还是-vuex-中"},"93.7":{t:"对-spa-页面的理解-优缺点",p:"SPA，单页面应用，只在 web 页面初始化的时候加载相应的 HTML、CSS 和 JavaScript，一旦页面加载完成，SPA 不会因为用户的操作进行页面的重新加载或跳转，而是利用路由机制实现 H ...",l:"Interview/Vue/基础知识.html#对-spa-页面的理解-优缺点",a:"对-spa-页面的理解-优缺点"},"93.8":{t:"spa-首屏加载慢怎么解决",p:`什么叫首屏加载时间：浏览器从响应用户输入网站地址,到首屏内容渲染完成的时间,整个网页不一定要全部渲染完成,但是需要展示当前视窗需要的内容
加载慢的原因：

网络延时问题
资源文件体积过大
是否发生重复 ...`,l:"Interview/Vue/基础知识.html#spa-首屏加载慢怎么解决",a:"spa-首屏加载慢怎么解决"},"93.9":{t:"对-keep-alive-的理解",p:`
keep-alive 是 Vue 内置的一个组件，可以实现组件缓存，当组件切换时不会对当前组件进行卸载。一般结合路由和动态组件一起使用，用于缓存组件
提供 include 和 exclude 属性， ...`,l:"Interview/Vue/基础知识.html#对-keep-alive-的理解",a:"对-keep-alive-的理解"},"93.10":{t:"vue-observable-有了解过吗",p:`让一个对象变成响应式数据,Vue 内部会用它来处理 data 函数返回的对象
使用场景: 实现非父子组件通信
`,l:"Interview/Vue/基础知识.html#vue-observable-有了解过吗",a:"vue-observable-有了解过吗"},"93.11":{t:"既然-vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-dom-进行-diff-检测差异",p:"vue 设计的每一个组件一个 watcher，没有采用一个属性对应一个 watcher，这样会导致大量的 watcher 的产生而浪费内存，如果粒度过低也无法精准检测变化，所以采用 diff 算法+组 ...",l:"Interview/Vue/基础知识.html#既然-vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-dom-进行-diff-检测差异",a:"既然-vue-通过数据劫持可以精准探测数据变化-为什么还需要虚拟-dom-进行-diff-检测差异"},"93.12":{t:"vue-mixin-使用场景和原理",p:`
在日常的开发中，我们经常会遇到在不同的组件中经常会需要用到一些相同或者相似的代码，这些代码的功能相对独立，可以通过 Vue 的 mixin 功能抽离公共的业务逻辑，原理类似“对象的继承”，当组件初始 ...`,l:"Interview/Vue/基础知识.html#vue-mixin-使用场景和原理",a:"vue-mixin-使用场景和原理"},"93.13":{t:"对-mvvm-的理解",p:"MVVM是Model-View-ViewModel缩写，也就是把MVC中的Controller演变成ViewModel。Model层代表数据模型（也就是前端声明的静态数据或者是通过网络请求获取的数据） ...",l:"Interview/Vue/基础知识.html#对-mvvm-的理解",a:"对-mvvm-的理解"},"93.14":{t:"vue-组件为什么只有一个根元素",p:`
vue2中组件确实只能有一个根，但vue3中组件已经可以多根节点了。
之所以需要这样是因为vdom是一颗单根树形结构，patch方法在遍历的时候从根节点开始遍历，它要求只有一个根节点。组件也会转换为 ...`,l:"Interview/Vue/基础知识.html#vue-组件为什么只有一个根元素",a:"vue-组件为什么只有一个根元素"},"93.15":{t:"函数式组件的优势和原理",p:`
函数式组件需要在声明组件是指定 functional:true
不需要实例化，所以没有this,this通过render函数的第二个参数context来代替
没有生命周期钩子函数，不能使用计算属性， ...`,l:"Interview/Vue/基础知识.html#函数式组件的优势和原理",a:"函数式组件的优势和原理"},"93.16":{t:"组件之间通信方式有哪些",p:`

props / $emit 适用 父子组件通信

父组件向子组件传递数据是通过 prop 传递的，子组件传递数据给父组件是通过$emit 触发事件来做到的



ref 与 $parent / $ ...`,l:"Interview/Vue/基础知识.html#组件之间通信方式有哪些",a:"组件之间通信方式有哪些"},"93.17":{t:"vue-如何扩展一个组件",p:`
常见的组件扩展方法有：mixins，slots，extends等
混入mixins是分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的 ...`,l:"Interview/Vue/基础知识.html#vue-如何扩展一个组件",a:"vue-如何扩展一个组件"},"93.18":{t:"子组件可以直接改父组件的数据吗",p:`
所有的 prop 都使得其父子之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解。 ...`,l:"Interview/Vue/基础知识.html#子组件可以直接改父组件的数据吗",a:"子组件可以直接改父组件的数据吗"},"93.19":{t:"组件和插件有什么区别",p:`1. 组件是什么
组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在 Vue 中每一个.vue 文件都可以视为一个组件
组件的优势

降低整个系统的耦合度，在保持接口不 ...`,l:"Interview/Vue/基础知识.html#组件和插件有什么区别",a:"组件和插件有什么区别"},"93.20":{t:"sync-和-v-model-的区别",p:`

.sync修饰符可以实现父子组件之间的双向绑定，并且可以实现子组件同步修改父组件的值，相比较与v-model来说,sync修饰符就简单很多了


一个组件上可以有多个.sync修饰符


相同点
 ...`,l:"Interview/Vue/基础知识.html#sync-和-v-model-的区别",a:"sync-和-v-model-的区别"},"93.21":{t:"ssr-的理解",p:`
Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏 ...`,l:"Interview/Vue/基础知识.html#ssr-的理解",a:"ssr-的理解"},"93.22":{t:"delete-和-vue-delete-删除数组的区别",p:`
delete只是被删除的元素变成了 empty/undefined 其他的元素的键值还是不变。
Vue.delete直接删除了数组 改变了数组的键值。

`,l:"Interview/Vue/基础知识.html#delete-和-vue-delete-删除数组的区别",a:"delete-和-vue-delete-删除数组的区别"},"93.23":{t:"vue-ref-的作用",p:`
获取dom元素this.$refs.box
获取子组件中的data this.$refs.box.msg
调用子组件中的方法this.$refs.box.open()

`,l:"Interview/Vue/基础知识.html#vue-ref-的作用",a:"vue-ref-的作用"},"93.24":{t:"vue-loader-是什么-有什么作用",p:`
vue-loader是用于处理单文件组件（SFC，Single-File Component）的webpack loader
因为有了vue-loader，我们就可以在项目中编写SFC格式的Vue组 ...`,l:"Interview/Vue/基础知识.html#vue-loader-是什么-有什么作用",a:"vue-loader-是什么-有什么作用"},"93.25":{t:"从-0-到-1-自己构架一个-vue-项目-有哪些步骤-哪些重要插件、目录结构怎么组织",p:`
从0创建一个项目我大致会做以下事情：项目构建、引入必要插件、代码规范、提交规范、常用库和组件
目前vue3项目我会用vite或者create-vue创建项目
接下来引入必要插件：路由插件vue-ro ...`,l:"Interview/Vue/基础知识.html#从-0-到-1-自己构架一个-vue-项目-有哪些步骤-哪些重要插件、目录结构怎么组织",a:"从-0-到-1-自己构架一个-vue-项目-有哪些步骤-哪些重要插件、目录结构怎么组织"},"94.0":{t:"对生命周期的理解",p:"Vue 的生命周期即一个 Vue 实例从被创建到被销毁的过程 可以分为 8 个阶段： beforeCreate：实例创建前 created：实例创建完成 beforeMount：挂载前 mounted ...",l:"Interview/Vue/生命周期.html",a:"对生命周期的理解"},"94.1":{t:"什么时候使用-beforedestory",p:`在 vue 实例销毁之前被调用，可以执行一些清理和释放资源的工作

清理定时器，避免内存泄露和不必要的开销
取消异步操作，确保在销毁实例时不会触发不必要的回调或产生不稳定的行为
清理订阅，如果使用了观 ...`,l:"Interview/Vue/生命周期.html#什么时候使用-beforedestory",a:"什么时候使用-beforedestory"},"94.2":{t:"vue-的父组件和子组件生命周期钩子函数执行顺序",p:`

加载渲染过程
父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&g ...`,l:"Interview/Vue/生命周期.html#vue-的父组件和子组件生命周期钩子函数执行顺序",a:"vue-的父组件和子组件生命周期钩子函数执行顺序"},"94.3":{t:"在那个生命周期中调用异步请求",p:"可以在 created 和 mounted 生命周期中调用异步请求，如果需要在组件实例被创建时立即获取数据并且不依赖于 DOM 元素，可以使用 created；如果需要等待 DOM 准备好才执行一些操 ...",l:"Interview/Vue/生命周期.html#在那个生命周期中调用异步请求",a:"在那个生命周期中调用异步请求"},"95.0":{t:"babel-主要用于将新版本的代码转换为向后兼容的-js-语法-​-polyfill-方式-以便能够运行在各版本的浏览器或其他环境中",p:`基本原理
首先将源码转成抽象语法树，然后对语法树进行处理生成新的语法树，最后将新语法树生成新的 JS 代码
1）通过babylon将 js 转化成 ast (抽象语法树)
2）通过babel-trav ...`,l:"Interview/工程化/babel原理.html",a:"babel-主要用于将新版本的代码转换为向后兼容的-js-语法-​-polyfill-方式-以便能够运行在各版本的浏览器或其他环境中"},"96.0":{t:"loader-是什么",p:`webpack 只能处理 js 格式的资源，任何非 js 文件都必须被对应的 loader 处理转换成 js 代码
`,l:"Interview/工程化/loader.html",a:"loader-是什么"},"96.1":{t:"手写一个-loader",p:`// 作用：将css内容，通过style标签插入到页面中
// source为要处理的css源文件
function loader(source) {
  let style = \`
    let  ...`,l:"Interview/工程化/loader.html#手写一个-loader",a:"手写一个-loader"},"96.2":{t:"loader-的执行顺序",p:`相同优先级的 loader 链，执行顺序为从右到左，从下到上
`,l:"Interview/工程化/loader.html#loader-的执行顺序",a:"loader-的执行顺序"},"96.3":{t:"常见的-loader",p:`
style-loader：把 css 注入到 JavaScript 中，通过 DOM 操作去加载 css
css-loader：加载 css
sass-loader：把 sass/scss 代码转换 ...`,l:"Interview/工程化/loader.html#常见的-loader",a:"常见的-loader"},"97.0":{t:"扩展-webpack-功能",p:"\r",l:"Interview/工程化/Plugin.html",a:"扩展-webpack-功能"},"97.1":{t:"工作原理",p:`webpack 通过内部的事件流机制保证了插件的有序性，底层是利用发布订阅模式，webpack 在运行过程中会广播事件，插件只需要监听它所关系的事件，在特定的时间对资源做处理
`,l:"Interview/工程化/Plugin.html#工作原理",a:"工作原理"},"97.2":{t:"编写一个插件",p:`// 自定义一个名为MyPlugin插件，该插件在打包完成后，在控制台输出&quot;打包已完成&quot;
class MyPlugin {
  // 原型上需要定义apply 的方法
  appl ...`,l:"Interview/工程化/Plugin.html#编写一个插件",a:"编写一个插件"},"98.0":{t:"webpack-构建流程",p:`1. 从入口文件开始解析
2. 查找入口文件引入了哪些js文件，找到依赖关系
3. 递归遍历引入的其它js，生成最终的依赖关系图
4. 将ES6语法转化成ES5
5. 最终生成一个可以在浏览器加载执行 ...`,l:"Interview/工程化/Webpack构建流程.html",a:"webpack-构建流程"},"98.1":{t:"完整版",p:"1. webpack 从项目的`entry`入口文件开始递归分析，调用所有配置的 `loader`对模块进行编译（因为 webpack 默认只能识别 js 代码，所以如 css 文件、.vue 结尾的 ...",l:"Interview/工程化/Webpack构建流程.html#完整版",a:"完整版"},"99.0":{t:"文件指纹是打包后输出的文件名的后缀",p:`
Hash：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改
Chunkhash：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chun ...`,l:"Interview/工程化/文件指纹.html",a:"文件指纹是打包后输出的文件名的后缀"},"100.0":{t:"什么是热更新原理",p:`开发过程中，代码发生变动后，webpack 会重新编译，编译后浏览器替换修改的模块，局部刷新，无需刷新整个页面
好处：节省开发时间，提升开发体验
`,l:"Interview/工程化/热更新原理.html",a:"什么是热更新原理"},"100.1":{t:"原理",p:`主要是通过 webscoket 实现，建立本地服务器和浏览器的双向通信，当代码变化后，重新编译后，通知浏览器请求更新的模块，替换原有的模块

通过 webpack-dev-server 开启 serv ...`,l:"Interview/工程化/热更新原理.html#原理",a:"原理"},"101.0":{t:"js",p:`const getJSON = function (url) {
return new Promise((resolve, reject) =&gt; {
const xhr = new XMLHtt ...`,l:"Interview/手写/AJAX.html",a:"js"},"102.0":{t:"js",p:`// call
Function.prototype.myCall = function(context,...args){
context = context || window
context.f ...`,l:"Interview/手写/call-apply-bind.html",a:"js"},"103.0":{t:"接收多个函数为参数-由右向左依次执行函数",p:`function compose(...fns) {
  // 首先需要判断参数是否为空
  if (fns.length === 0) {
    throw new Error(&quot;必须传 ...`,l:"Interview/手写/compose.html",a:"接收多个函数为参数-由右向左依次执行函数"},"104.0":{t:"js",p:`function myInstanceof(obj, constructor) {
if (typeof obj !== &quot;object&quot; || obj === null) ret ...`,l:"Interview/手写/instanceof.html",a:"js"},"105.0":{t:"js",p:`class _LazyMan {
constructor(name) {
this.tasks = [];
const task = () =&gt; {
console.log(Hi! This i ...`,l:"Interview/手写/LazyMan.html",a:"js"},"106.0":{t:"js",p:`// 缓存淘汰策略，移除最近最少被访问的数据项
class LRUCache {
constructor(capacity) {
this.map = new Map();
this.capacity ...`,l:"Interview/手写/LRU.html",a:"js"},"107.0":{t:"_1-创建一个对象-该对象的原型指向构造函数的原型",p:`
调用该构造函数，构造函数的 this 指向新生成的对象
判断构造函数是否有返回值，如果有返回值且返回值是一个对象或方法，就返回这个值，否则返回新生成的对象

function myNew(const ...`,l:"Interview/手写/new.html",a:"_1-创建一个对象-该对象的原型指向构造函数的原型"},"108.0":{t:"promise",p:`class Promise {
  constructor(fn) {
    // resolve时的回调函数列表
    this.resolveTask = [];
    // reject时 ...`,l:"Interview/手写/Promise.html",a:"promise"},"108.1":{t:"race-all",p:`class Promise {
  // race静态方法，返回promises列表中第一个执行完的结果
  static race(promises) {
    return new Promis ...`,l:"Interview/手写/Promise.html#race-all",a:"race-all"},"108.2":{t:"retry",p:`/*
 * @param {function} fn - 方法名
 * @param {number} delay - 延迟的时间
 * @param {number} times - 重发的次数
  ...`,l:"Interview/手写/Promise.html#retry",a:"retry"},"109.0":{t:"settimeout-模拟实现-setinterval",p:`function mySetInterval(callback, delay) {
  function interval() {
    callback(); // 首先执行回调函数
    ti ...`,l:"Interview/手写/setTimeout-setInterval.html",a:"settimeout-模拟实现-setinterval"},"110.0":{t:"js",p:`function sleep(ms) {
return new Promise((resolve) =&gt; setTimeout(resolve, ms));
}

`,l:"Interview/手写/sleep.html",a:"js"},"111.0":{t:"js",p:`function curry(fn) {
return function curried(...args) {
if (args.length &lt; fn.length) {
return fun ...`,l:"Interview/手写/函数柯里化.html",a:"js"},"112.0":{t:"js",p:`[
{
id: 1,
text: '节点1',
parentId: 0 //这里用0表示为顶级节点
},
{
id: 2,
text: '节点1_1',
parentId: 1 //通过这个字段来确定 ...`,l:"Interview/手写/列表转成树形结构.html",a:"js"},"113.0":{t:"js",p:`class EventEmitter {
constructor() {
// 创建一个空对象存储事件和对应的回调函数
this.events = {};
}
// 实现订阅
on(type, cal ...`,l:"Interview/手写/发布订阅.html",a:"js"},"114.0":{t:"js",p:`{
tag: 'DIV',
attrs:{
id:'app'
},
children: [
{
tag: 'SPAN',
children: [
{ tag: 'A', children: [] }
 ...`,l:"Interview/手写/将虚拟dom转换成真实dom.html",a:"js"},"115.0":{t:"js",p:`// 递归的方法
function flat(arr) {
let res = [];
for (let i = 0; i &lt; arr.length; i++) {
if (Array.isAr ...`,l:"Interview/手写/并行限制的Promise调度器.html",a:"js"},"116.0":{t:"js",p:`// 递归的方法
function flat(arr) {
let res = [];
for (let i = 0; i &lt; arr.length; i++) {
if (Array.isAr ...`,l:"Interview/手写/扁平化.html",a:"js"},"117.0":{t:"冒泡",p:`function bubbleSort(arr) {
  // 缓存数组长度
  const len = arr.length;
  // 外层循环用于控制从头到尾的比较+交换到底有多少轮
  for ...`,l:"Interview/手写/排序.html",a:"冒泡"},"117.1":{t:"选择排序",p:` 循环遍历数组，每次都找出当前范围内的最小值，把它放在当前范围的头部，然后缩小排序范围，重复，直到数组完全有序

function selectSort(arr) {
  // 缓存数组长度
  co ...`,l:"Interview/手写/排序.html#选择排序",a:"选择排序"},"117.2":{t:"插入排序",p:` 找到元素在它前面那个序列中的正确位置

function insertSort(arr) {
  // 缓存数组长度
  const len = arr.length;
  // temp 用来保存 ...`,l:"Interview/手写/排序.html#插入排序",a:"插入排序"},"117.3":{t:"快速排序",p:`// 定义一个名为sortArray的函数，它接受一个数组nums作为输入参数
var sortArray = function(nums) {
    // 如果数组长度小于2，表示数组已经有序或为 ...`,l:"Interview/手写/排序.html#快速排序",a:"快速排序"},"117.4":{t:"归并排序",p:` 将需要被排序的数组从中间分割为两半，然后再将分割出来的每个子数组各分割为两半，重复以上操作，直到单个子数组只有一个元素为止

 从粒度最小的子数组开始，两两合并，确保每次合并出来的数组都是有序的

 ...`,l:"Interview/手写/排序.html#归并排序",a:"归并排序"},"118.0":{t:"js",p:`// 方法1 使用set
[...new Set(arr)];
// 方法2 使用includes
let uniArr = [];
for (const item of arr) {
if (!un ...`,l:"Interview/手写/数组去重.html",a:"js"},"119.0":{t:"js",p:`[
{
id: 1,
text: '节点1',
parentId: 0,
children: [
{
id:2,
text: '节点1_1',
parentId:1
}
]
}
]
转成
[
{
id ...`,l:"Interview/手写/树形结构转换成列表.html",a:"js"},"120.0":{t:"js",p:`function deepClone(obj, hash = new WeakMap()) {
if (!(typeof obj === &quot;object&quot; &amp;&amp; o ...`,l:"Interview/手写/深拷贝.html",a:"js"},"121.0":{t:"js",p:`function pipe(...functions) {
return function (input) {
return functions.reduce((value, func) =&gt;  ...`,l:"Interview/手写/管道函数.html",a:"js"},"122.0":{t:"节流",p:`某个函数在一定时间间隔内只执行一次，在规定的延迟时间内无视后来产生的函数调用请求，也不会延长时间
控制函数执行频率的技术，确保函数在一定时间间隔内最多执行一次，以减轻高频率触发函数的性能问题。一般情况 ...`,l:"Interview/手写/防抖节流.html",a:"节流"},"122.1":{t:"防抖",p:`是指某个函数在规定的时间段内，无论触发多少次回调，只执行最后
一般用于处理需要等待一段时间后稳定下来的事件，比如输入框的输入事件、滚动事件、窗口大小调
核心思想就是当函数被触发后，设置一个定时器，在一 ...`,l:"Interview/手写/防抖节流.html#防抖",a:"防抖"},"123.0":{t:"算法记录",p:`::: tip
这里主要记录学习算法时的解题思路，只作为记录，题目主要来源于代码随想录，侵删！
:::
`,l:"Problem/index.html",a:"算法记录"},"124.0":{t:"题目",p:`反转字符串 https://leetcode.cn/problems/reverse-string/
description:
编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s  ...`,l:"Problem/双指针/反转字符串.html",a:"题目"},"125.0":{t:"题目",p:`反转字符串中的单词 https://leetcode.cn/problems/reverse-words-in-a-string/
description:
给你一个字符串 s ，请你反转字符串中 单 ...`,l:"Problem/双指针/反转字符串中的单词.html",a:"题目"},"126.0":{t:"题目",p:`路径加密 https://leetcode.cn/problems/ti-huan-kong-ge-lcof/description/
description:
假定一段路径记作字符串 path，其中 ...`,l:"Problem/双指针/路径加密.html",a:"题目"},"127.0":{t:"题目",p:`三数之和: https://leetcode.cn/problems/3sum/
description:
给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nu ...`,l:"Problem/哈希表/三数之和.html",a:"题目"},"128.0":{t:"题目",p:`两个数组的交集: https://leetcode.cn/problems/intersection-of-two-arrays/
description:
给定两个数组 nums1 和 nums2  ...`,l:"Problem/哈希表/两个数组的交集.html",a:"题目"},"129.0":{t:"题目",p:`两数之和:https://leetcode.cn/problems/two-sum/
description:
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标 ...`,l:"Problem/哈希表/两数之和.html",a:"题目"},"130.0":{t:"题目",p:`四数之和:https://leetcode.cn/problems/4sum/
description:
给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足 ...`,l:"Problem/哈希表/四数之和.html",a:"题目"},"131.0":{t:"题目",p:`四数相加: https://leetcode.cn/problems/4sum-ii/
description:
给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是  ...`,l:"Problem/哈希表/四数相加.html",a:"题目"},"132.0":{t:"题目",p:`快乐数:https://leetcode.cn/problems/happy-number/
description:
编写一个算法来判断一个数 n 是不是快乐数。
「快乐数」 定义为：
对于一个正整 ...`,l:"Problem/哈希表/快乐数.html",a:"题目"},"133.0":{t:"题目",p:`有效的字母异位词 : https://leetcode.cn/problems/valid-anagram/
description:
给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s ...`,l:"Problem/哈希表/有效的字母异位词.html",a:"题目"},"134.0":{t:"二分查找的思路",p:`二分查找也叫折半查找，用于在有序数组查找特定的元素；通过将查找区间分为两半，不断缩小查找区间，根据中间元素和目标元素
的比较关系来确定目标元素在那一半，直到找到元素或者确定不存在。
`,l:"Problem/数组/二分查找.html",a:"二分查找的思路"},"134.1":{t:"步骤",p:`
初始化左右边界
计算中间位置
比较中间元素和目标元素的大小

如果中间元素等于目标元素，查找成功，返回中间元素的索引
如果中间元素大于目标元素，说明目标元素在左半部分，更新中间元素为 mid-1，继 ...`,l:"Problem/数组/二分查找.html#步骤",a:"步骤"},"134.2":{t:"题目",p:`力扣 704.二分查找 https://leetcode.cn/problems/binary-search/description/
description:
给定一个 n 个元素有序的（升序）整型 ...`,l:"Problem/数组/二分查找.html#题目",a:"题目"},"135.0":{t:"题目",p:`有序数组的平方 https://leetcode.cn/problems/squares-of-a-sorted-array/
description:
给你一个按 非递减顺序 排序的整数数组 num ...`,l:"Problem/数组/有序数组的平方.html",a:"题目"},"136.0":{t:"题目",p:`力扣 27. 移除元素 https://leetcode.cn/problems/remove-element/
description:
给你一个数组 nums 和一个值 val，你需要 原地 移除 ...`,l:"Problem/数组/移除元素.html",a:"题目"},"137.0":{t:"题目",p:`螺旋矩阵 II https://leetcode.cn/problems/spiral-matrix-ii/
description:
给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元 ...`,l:"Problem/数组/螺旋矩阵.html",a:"题目"},"138.0":{t:"题目",p:`长度最小的子数组 https://leetcode.cn/problems/minimum-size-subarray-sum/
description:
给定一个含有 n 个正整数的数组和一个正整数 ...`,l:"Problem/数组/长度最小的子数组.html",a:"题目"},"139.0":{t:"题目",p:`description:
解题思路：
`,l:"Problem/模板.html",a:"题目"},"140.0":{t:"题目",p:`两两交换链表中的节点 https://leetcode.cn/problems/swap-nodes-in-pairs/
description:
给你一个链表，两两交换其中相邻的节点，并返回交换后链 ...`,l:"Problem/链表/两两交换链表中的节点.html",a:"题目"},"141.0":{t:"题目",p:`删除链表的倒数第 N 个结点 https://leetcode.cn/problems/remove-nth-node-from-end-of-list/
description:
给你一个链表，删除 ...`,l:"Problem/链表/删除链表的倒数第N个节点.html",a:"题目"},"142.0":{t:"题目",p:`环形链表 : https://leetcode.cn/problems/linked-list-cycle-ii/
description:
给定一个链表的头节点 head ，返回链表开始入环的第一个 ...`,l:"Problem/链表/环形链表.html",a:"题目"},"143.0":{t:"链式存储",p:`每一个元素中存储当前节点的值和指向下一个节点的指针
JavaScript 实现
function ListNode(val, next) {
  this.val = val === undefine ...`,l:"Problem/链表/理论基础.html",a:"链式存储"},"144.0":{t:"题目",p:`移除链表元素 https://leetcode.cn/problems/remove-linked-list-elements/
description:
给你一个链表的头节点 head 和一个整数  ...`,l:"Problem/链表/移除链表元素.html",a:"题目"},"145.0":{t:"题目",p:`反转链表:https://leetcode.cn/problems/reverse-linked-list/
description:
给你单链表的头节点 head ，请你反转链表，并返回反转后的链表 ...`,l:"Problem/链表/翻转链表.html",a:"题目"},"146.0":{t:"题目",p:`链表相交: https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/
description:
给你两个单链表的头节点 h ...`,l:"Problem/链表/链表相交.html",a:"题目"},"147.0":{t:"编程踩坑积累与总结",p:`::: tip
这里主要记录项目中的关键技术!
:::
`,l:"Project/index.html",a:"编程踩坑积累与总结"},"148.0":{t:"测试-1",p:"",l:"Project/project1/1.html",a:"测试-1"},"149.0":{t:"编程踩坑积累与总结",p:`::: tip
这里主要记录面试遇到的真题!
:::
`,l:"Relay/index.html",a:"编程踩坑积累与总结"},"150.0":{t:"搭建环境",p:`初始化 node 环境 yarn init -y
安装 webpack yarn add webpack webpack-cli -D -D 表示开发依赖
`,l:"Relay/webpack/基础.html",a:"搭建环境"},"150.1":{t:"手动配置-webpack",p:`默认配置名为 webpack.config.js
// webpack是node写出来的
const path = require(&quot;path&quot;);
module.exports  ...`,l:"Relay/webpack/基础.html#手动配置-webpack",a:"手动配置-webpack"},"150.2":{t:"插件",p:"\r",l:"Relay/webpack/基础.html#插件",a:"插件"},"150.3":{t:"htmlwebpackplugin",p:`在 webpack 构建过程中自动生成 HTML 文件，并自动引入 Webpack 生成的 JS 和 CSS 文件
new HtmlWebpackPlugin({
  title: &quot;Web ...`,l:"Relay/webpack/基础.html#htmlwebpackplugin",a:"htmlwebpackplugin"},"150.4":{t:"mini-css-extract-plugin",p:`将 css 样式文件从 JavaScript 文件中分离出来并且单独打包
new MiniCssExtractPlugin({
   filename: &quot;main.css&quot;,
} ...`,l:"Relay/webpack/基础.html#mini-css-extract-plugin",a:"mini-css-extract-plugin"},"150.5":{t:"optimize-css-assets-webpack-plugin",p:`优化压缩 css 资源
`,l:"Relay/webpack/基础.html#optimize-css-assets-webpack-plugin",a:"optimize-css-assets-webpack-plugin"},"150.6":{t:"uglifyjs-webpack-plugin",p:`压缩 js 文件
 optimization: {
    //优化项
    minimizer: [
      new UglifyJsPlugin({
        cache: true, ...`,l:"Relay/webpack/基础.html#uglifyjs-webpack-plugin",a:"uglifyjs-webpack-plugin"},"150.7":{t:"loader",p:`webpack 只能理解 JavaScript 文件，loader 的作用就是将非 JavaScript 文件转换成 webpack 可以理解的模块
特点：

功能单一
执行顺序：默认从右向左，从下到 ...`,l:"Relay/webpack/基础.html#loader",a:"loader"},"150.8":{t:"css-loader",p:`解析 @import 这种语法的
`,l:"Relay/webpack/基础.html#css-loader",a:"css-loader"},"150.9":{t:"style-loader",p:`把 css 插入到 head 的标签中
`,l:"Relay/webpack/基础.html#style-loader",a:"style-loader"},"150.10":{t:"less-loader",p:`将 less 文件转换成 css 文件
`,l:"Relay/webpack/基础.html#less-loader",a:"less-loader"},"150.11":{t:"postcss-loader",p:`自动添加前缀
`,l:"Relay/webpack/基础.html#postcss-loader",a:"postcss-loader"},"150.12":{t:"babel-loader-babel-core-babel-preset-env",p:`将 ES6 转化成 ES5
`,l:"Relay/webpack/基础.html#babel-loader-babel-core-babel-preset-env",a:"babel-loader-babel-core-babel-preset-env"},"150.13":{t:"url-loader",p:`处理图片
如果想要实现打包文件分类，添加
options: {
  outputPath: &quot;&quot;;
}

`,l:"Relay/webpack/基础.html#url-loader",a:"url-loader"}},n={previewLength:100,buttonLabel:"搜索",placeholder:"情输入关键词"},r={INDEX_DATA:e,PREVIEW_LOOKUP:t,Options:n};export{r as default};
