import{_ as s,c as n,o as a,d as l}from"./app.78019af7.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"webpack","slug":"webpack","link":"#webpack","children":[{"level":3,"title":"不要让 loader 做太多事情","slug":"不要让-loader-做太多事情","link":"#不要让-loader-做太多事情","children":[]},{"level":3,"title":"处理第三方库","slug":"处理第三方库","link":"#处理第三方库","children":[]},{"level":3,"title":"使用 Happypack 将 loder 由单进程转换成多进程","slug":"使用-happypack-将-loder-由单进程转换成多进程","link":"#使用-happypack-将-loder-由单进程转换成多进程","children":[]}]},{"level":2,"title":"构建结果体积压缩","slug":"构建结果体积压缩","link":"#构建结果体积压缩","children":[]},{"level":2,"title":"Gzip 压缩","slug":"gzip-压缩","link":"#gzip-压缩","children":[]},{"level":2,"title":"图片优化","slug":"图片优化","link":"#图片优化","children":[{"level":3,"title":"JPEG/JPG","slug":"jpeg-jpg","link":"#jpeg-jpg","children":[]},{"level":3,"title":"PNG","slug":"png","link":"#png","children":[]},{"level":3,"title":"SVG","slug":"svg","link":"#svg","children":[]},{"level":3,"title":"Base64","slug":"base64","link":"#base64","children":[]},{"level":3,"title":"Webp","slug":"webp","link":"#webp","children":[]}]}],"relativePath":"Interview/Performance/网络篇.md"}'),p={name:"Interview/Performance/网络篇.md"},o=l(`<p>在网络层面进行优化，有三个地方可以进行优化，分别是 DNS 解析、TCP 连接和 HTTP 请求/响应，对于 DNS 和 TCP 连接这两个步骤，前端可以做的非常有限，核心是在 HTTP 连接上进行优化。</p><p>HTTP 优化有两个大方向：减少请求次数和减少单次请求所花费的时间。主要通过 webpack 去优化：</p><h2 id="webpack" tabindex="-1">webpack <a class="header-anchor" href="#webpack" aria-hidden="true">#</a></h2><h3 id="不要让-loader-做太多事情" tabindex="-1">不要让 loader 做太多事情 <a class="header-anchor" href="#不要让-loader-做太多事情" aria-hidden="true">#</a></h3><p>不要让 loader 做太多事情，比如说 babel-loader，babel-loader 功能很强大，但是也很慢，可以使用 include 或 exclude 帮我们避免不必要的转译，或者通过开启缓存将转译结果缓存至文件系统，只需要为 loader 添加 cacheDirectory=true，<code>loader:&#39;babel-loader?cacheDirectory=true&#39;</code>，这样至少可以将 babel-loader 的工作效率提升两倍，当然，其它 loader 原理也一样。</p><h3 id="处理第三方库" tabindex="-1">处理第三方库 <a class="header-anchor" href="#处理第三方库" aria-hidden="true">#</a></h3><p>使用 DllPlugin，这个插件会把第三方库单独打包到一个文件中，这个文件就是一个单纯的依赖库。这个依赖库不会跟着你的业务代码一起被打包，只有当依赖自身发生版本变化时才会重新打包。</p><p>使用 DllPlugin 的步骤</p><ol><li>基于 dll 的配置文件，打包 dll 库</li><li>基于 webpack.config.js 文件，打包业务代码</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#F6F6F4;">dll 配置文件</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">path</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> webpack </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">webpack</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">module</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    entry</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 依赖的库数组</span></span>
<span class="line"><span style="color:#F6F6F4;">      vendor</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">prop-types</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">babel-polyfill</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">react</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">react-dom</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">react-router-dom</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      ]</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">    output</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      path</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> path.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(__dirname, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">dist</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">      filename</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">[name].js</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      library</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">[name]_[hash]</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">    plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> webpack.</span><span style="color:#62E884;">DllPlugin</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// DllPlugin的name属性需要和libary保持一致</span></span>
<span class="line"><span style="color:#F6F6F4;">        name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">[name]_[hash]</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        path</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> path.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(__dirname, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">dist</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">[name]-manifest.json</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// context需要和webpack.config.js保持一致</span></span>
<span class="line"><span style="color:#F6F6F4;">        context</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> __dirname,</span></span>
<span class="line"><span style="color:#F6F6F4;">      }),</span></span>
<span class="line"><span style="color:#F6F6F4;">    ],</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">编译完成之后，运行这个文件，dist文件夹多出两个文件   vendor</span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;">manifest.json  vendor.js</span></span>
<span class="line"><span style="color:#F6F6F4;">在webpack.config.js中对dll做配置</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">path</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> webpack </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">webpack</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">module</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  mode</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">production</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 编译入口</span></span>
<span class="line"><span style="color:#F6F6F4;">  entry</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    main</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">./src/index.js</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 目标文件</span></span>
<span class="line"><span style="color:#F6F6F4;">  output</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    path</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> path.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(__dirname, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">dist/</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">    filename</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">[name].js</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// dll相关配置</span></span>
<span class="line"><span style="color:#F6F6F4;">  plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> webpack.</span><span style="color:#62E884;">DllReferencePlugin</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">      context</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> __dirname,</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// manifest就是我们第一步中打包出来的json文件</span></span>
<span class="line"><span style="color:#F6F6F4;">      manifest</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">./dist/vendor-manifest.json</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">    })</span></span>
<span class="line"><span style="color:#F6F6F4;">  ]</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light" tabindex="0"><code><span class="line"><span style="color:#24292E;">dll 配置文件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">webpack</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;webpack&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    entry: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 依赖的库数组</span></span>
<span class="line"><span style="color:#24292E;">      vendor: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;prop-types&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;babel-polyfill&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;react-dom&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;react-router-dom&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    output: {</span></span>
<span class="line"><span style="color:#24292E;">      path: path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">      filename: </span><span style="color:#032F62;">&#39;[name].js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      library: </span><span style="color:#032F62;">&#39;[name]_[hash]&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    plugins: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> webpack.</span><span style="color:#6F42C1;">DllPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// DllPlugin的name属性需要和libary保持一致</span></span>
<span class="line"><span style="color:#24292E;">        name: </span><span style="color:#032F62;">&#39;[name]_[hash]&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        path: path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;dist&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;[name]-manifest.json&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// context需要和webpack.config.js保持一致</span></span>
<span class="line"><span style="color:#24292E;">        context: __dirname,</span></span>
<span class="line"><span style="color:#24292E;">      }),</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">编译完成之后，运行这个文件，dist文件夹多出两个文件   vendor</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">manifest.json  vendor.js</span></span>
<span class="line"><span style="color:#24292E;">在webpack.config.js中对dll做配置</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">webpack</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;webpack&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mode: </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 编译入口</span></span>
<span class="line"><span style="color:#24292E;">  entry: {</span></span>
<span class="line"><span style="color:#24292E;">    main: </span><span style="color:#032F62;">&#39;./src/index.js&#39;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 目标文件</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    path: path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;dist/&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&#39;[name].js&#39;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// dll相关配置</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> webpack.</span><span style="color:#6F42C1;">DllReferencePlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      context: __dirname,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// manifest就是我们第一步中打包出来的json文件</span></span>
<span class="line"><span style="color:#24292E;">      manifest: </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./dist/vendor-manifest.json&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="使用-happypack-将-loder-由单进程转换成多进程" tabindex="-1">使用 Happypack 将 loder 由单进程转换成多进程 <a class="header-anchor" href="#使用-happypack-将-loder-由单进程转换成多进程" aria-hidden="true">#</a></h3><p>webpack 是单线程的，如果同一时刻存在多个任务，只能排队一个一个的等待处理，但是 CPU 是多核的，Happypack 会充分释放 CPU 在多核并发方面的优势，帮我们把任务分解给多个子进程去并发执行，大大提升打包效率。使用方法：只需要把 laoder 的配置转移到 Happypack 中即可。</p><h2 id="构建结果体积压缩" tabindex="-1">构建结果体积压缩 <a class="header-anchor" href="#构建结果体积压缩" aria-hidden="true">#</a></h2><p>将文件结果可视化，找出导致体积过大的原因</p><p>包组成可视化工具：webpack-bundle-analyer，配置方式和普通 plugin 一样，能够以矩形树图的形式将包内各个模块的大小和依赖关系呈现出来。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> BundleAnalyzerPlugin </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">webpack-bundle-analyzer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).BundleAnalyzerPlugin;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">module</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BundleAnalyzerPlugin</span><span style="color:#F6F6F4;">()],</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">BundleAnalyzerPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;webpack-bundle-analyzer&quot;</span><span style="color:#24292E;">).BundleAnalyzerPlugin;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BundleAnalyzerPlugin</span><span style="color:#24292E;">()],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span></code></pre></div><p>删除冗余代码：Tree-Shaking，基于 import/export 语法，Tree-Shaking 可以在编译的过程中知道哪些模块并没有被真正的使用，这些没用的代码，在最后打包的时候会被去除</p><p>按需加载：一次不加载完所有的文件内容，只加载此刻需要用到的那部分，当需要更多内容时，再对用到的内容进行即时加载。在 webpack 的配置文件中，在 output 对象：<code>chunkFilename: &#39;[name].[chunkhash:5].chunk.js&#39;,</code>，写路由的时候</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> getComponent </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> (location, cb) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  require.ensure([], (require) =&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    cb(null, require(&#39;../pages/BugComponent&#39;).default)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }, &#39;bug&#39;)</span></span>
<span class="line"><span style="color:#F6F6F4;">},</span></span>
<span class="line"><span style="color:#F6F6F4;">...</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;Route path=&quot;/bug&quot; getComponent={getComponent}&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light" tabindex="0"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getComponent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (location, cb) {</span></span>
<span class="line"><span style="color:#24292E;">  require.ensure([], (require) =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    cb(null, require(&#39;../pages/BugComponent&#39;).default)</span></span>
<span class="line"><span style="color:#24292E;">  }, &#39;bug&#39;)</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">...</span></span>
<span class="line"><span style="color:#24292E;">&lt;Route path=&quot;/bug&quot; getComponent={getComponent}&gt;</span></span>
<span class="line"></span></code></pre></div><p>核心就是 require.ensure[] 这个方法，这是一个异步的方法，webpack 在打包时，BugComponent 会被单独打成一个文件，只有在我们跳转到这个路由的时候，这个异步方法的回调才会生效，才会真正的去获取这个组件的内容，这就是按需加载。</p><h2 id="gzip-压缩" tabindex="-1">Gzip 压缩 <a class="header-anchor" href="#gzip-压缩" aria-hidden="true">#</a></h2><p>在请求头中通过 accept-encoding：gzip 来开启 Gzip 压缩，服务端压缩，客户端解压，一般情况下，如果处理的是具备一定规模的项目，压缩后通常能减少响应 70%左右的大小。Gzip 压缩的原理是在一个文本文件中找出一些重复的字符串，临时替换它们，从而使整个文件变小，所以说文件中代码的重复率越高，压缩的效率就越高，使用 Gzip 的收益也就越大。一般来说，Gzip 压缩是服务器的工作，服务器接收到需要压缩的文件，会启动自己的 CPU 去完成这个任务，压缩本身也是需要耗费时间的，所以可以理解为以服务器压缩的时间开销和 CPU 开销为代价，省下了一些传输过程中的时间开销，但是我们都知道服务器的 CPU 的性能不是无限的，如果存在大量的压缩需求，服务器也是扛不住的，如果服务器慢下来了，用户还是要等，所以 Webpack 存在 Gzip 压缩操作，就是在构建的过程中去做一些服务器的工作，为服务器分压。</p><h2 id="图片优化" tabindex="-1">图片优化 <a class="header-anchor" href="#图片优化" aria-hidden="true">#</a></h2><p>图片在所有资源中所占的比重是非常大的，当下应用比较广泛的 Web 图片格式有 JPEG/JPG、PNG、WebP、Base64、SVG 等。</p><p>首先，在计算机中，像素是用二进制表示的，不同的图片格式中像素与二进制位数之间的对应关系是不同的。一个像素对应的二进制位数越多，它可以表示的颜色种类就越多，成像效果就越细腻，文件体积相应就越大，一个二进制位表示两种颜色，0 1 黑 白，如果一个图片格式对应的二进制位数有 n 个，那么它就可以呈现 2^n 种颜色。</p><h3 id="jpeg-jpg" tabindex="-1">JPEG/JPG <a class="header-anchor" href="#jpeg-jpg" aria-hidden="true">#</a></h3><p>有损压缩、体积小、加载快、不支持透明</p><p>最大的特点就是有损压缩，这种压缩算法很高效，所有 JPG 是一种非常轻巧的图片格式，JPG 格式有 24 位存储单个图，可以呈现多达 1600 万中颜色，一般场景下足以应对。适用于呈现色彩丰富的图片，在我们日常的开发中，JPG 图片经常作为大的背景图、轮播图或 Banner 图。使用 JPG 呈现大图，既可以保证图片的质量，文件体积也不会太大。但是也存在一定的缺陷：当处理矢量图形和 Logo 等线条感较强，颜色对比强烈的图像时，人为压缩导致的图片模糊会非常明显。而且不支持透明</p><h3 id="png" tabindex="-1">PNG <a class="header-anchor" href="#png" aria-hidden="true">#</a></h3><p>是一种无损压缩的高保真的图片格式，8 和 24 代表的是二进制的位数，PNG-8 最多支持 256 种颜色，PNG-24 最多支持 1600 万种颜色，PNG 图片具有比 JPG 更强的色彩表现力，对线条的处理更加细腻，对透明度有良好的支持。当追求最佳的显示效果，不在意文件体积大小的时候，推荐使用 PNG-24，但是在日常开发中，我们为了避免文件体积过大，一般不使用 PNG 去处理较复杂的图片，所有会优先选择 PNG-8。一般用于呈现小的 Logo、颜色简单且对比强烈的图片或背景。</p><h3 id="svg" tabindex="-1">SVG <a class="header-anchor" href="#svg" aria-hidden="true">#</a></h3><p>文本文件、体积小、不失真、兼容性好</p><p>SVG 是一种基于 XML 语法的图像格式，SVG 对图像的处理不是基于像素点，而是基于对图像的形状描述。对比 PNG 和 JPG，文件体积更小，可压缩性更强。最显著的优势是可以无限放大不失真，而且因为 SVG 是文本文件，我们既可以像写代码一样定义 SVG，也可以把他写在 HTML 里成为 DOM 的一部分，也可以把对图形的描述写入以.svg 为后缀的独立文件，使得 SVG 文件可以被非常多的工具读取和修改，很灵活。缺点是渲染成本比较高，有一定的学习成本。常用于图标。</p><h3 id="base64" tabindex="-1">Base64 <a class="header-anchor" href="#base64" aria-hidden="true">#</a></h3><p>文本文件、依赖编码、小图标解决方案</p><p>和精灵图一样，都是用于解决小图标的，精灵图就是将小图标合并到一张图片上，然后利用 CSS 的背景定位来显示其中每一部分的技术。Base64 的出现，也是为了减少加载网页图片时对服务器的请求次数，从而提升网站性能。Base64 是一种用于传输 8 位字节码的编码方式，通过对图片进行 Base64 编码，我们可以直接将编码结果写入到 HTML 或 CSS，从而减少 HTTP 请求的次数。Base64 编码之后，图片的大小会膨胀为原文件的 4/3，如果把大图也编码到 HTML 或 CSS 文件中，后者的体积会明显增加，即便减少了 HTTP 请求，无法弥补这庞大的体积带来的性能开销。只有在传输非常小的图片的时候，Base64 带来的文件体积膨胀、以及浏览器解析 Base64 的时间开销，和节省掉的 HTTP 请求开销相比，可以忽略不计，此时才能体现出优势。什么时候才会用？满足以下条件，图片的实际尺寸很小（一般小于 2kb），图片没有办法以雪碧图的形式和其它小图结合，图片的更新频率非常低（不需要重复编码和修改文件内容，维护成本低）</p><h3 id="webp" tabindex="-1">Webp <a class="header-anchor" href="#webp" aria-hidden="true">#</a></h3><p>Google 开发的旨在加快图片加载速度的图片格式，支持有损压缩和无损压缩。</p><p>优点：具备 JPG、PNG 一样的优点，可以显示动态图片。</p><p>缺点：对除 Chrome 之外的浏览器兼容性较差，会增加服务端的负担，和编码 JPG 文件相比，编码同样质量的 WebP 文件会占用更多的计算资源</p><p>应用场景：在站点先进行兼容性的预判，如果浏览器环境支持 webp，优先使用 webp 格式，否则把图片降级为 JGP；还有就是让后端去根据 HTTP 头部的 Accept 字段来决定返回什么格式的图片。当 Accept 字段包含 image/webp 时，返回 webp 格式的图片，否则返回原图。</p>`,41),e=[o];function c(t,r,y,F,i,E){return a(),n("div",null,e)}const u=s(p,[["render",c]]);export{h as __pageData,u as default};
