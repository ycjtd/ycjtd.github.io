import{_ as t,c as e,o as l,d as i}from"./app.a84b4934.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/network/长短轮询.md"}'),_={name:"Interview/network/长短轮询.md"},o=i("<p>短沦陷：</p><ul><li>浏览器每隔一段时间向服务器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行 响应。</li><li>这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。</li></ul><p>优缺点 👇</p><ul><li>优点是比较简单，易于理解。</li><li>缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。</li></ul><p>长轮询：</p><ul><li>首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将 这个请求挂起，然后判断服务器端数据是否有更新。</li><li>如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。</li></ul><p>优缺点 👇</p><ul><li>长轮询和短轮询比起来，它的优点是<strong>明显减少了很多不必要的 http 请求次数</strong>，相比之下节约了资源。</li><li>长轮询的缺点在于，连接挂起也会导致资源的浪费</li></ul><p>WebSocket</p><ul><li>WebSocket 是 Html5 定义的一个新协议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。</li><li>使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息。</li></ul>",10),p=[o];function r(a,c,n,s,u,d){return l(),e("div",null,p)}const m=t(_,[["render",r]]);export{h as __pageData,m as default};
