import{_ as s,c as a,o as n,d as l}from"./app.78019af7.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是同源策略","slug":"什么是同源策略","link":"#什么是同源策略","children":[]},{"level":2,"title":"跨域解决方案","slug":"跨域解决方案","link":"#跨域解决方案","children":[{"level":3,"title":"jsonp","slug":"jsonp","link":"#jsonp","children":[]},{"level":3,"title":"CORS","slug":"cors","link":"#cors","children":[]},{"level":3,"title":"Node 中间件代理","slug":"node-中间件代理","link":"#node-中间件代理","children":[]}]}],"relativePath":"Interview/Browser/跨域问题.md"}'),p={name:"Interview/Browser/跨域问题.md"},o=l(`<p>参考文章：</p><p><a href="https://juejin.cn/post/6844903767226351623" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903767226351623</a> <a href="https://segmentfault.com/a/1190000010719058" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000010719058</a></p><h2 id="什么是同源策略" tabindex="-1">什么是同源策略 <a class="header-anchor" href="#什么是同源策略" aria-hidden="true">#</a></h2><p>同源就是指 URL 中的协议（http/https）、域名（<a href="http://www.baidu.com" target="_blank" rel="noreferrer">www.baidu.com</a>）、端口号（80）都相同</p><p>同源策略就是浏览器的一种重要的安全策略，通过限制不同源之间的资源不能相互访问来保证浏览器的安全</p><p><strong>同源策略限制的内容：</strong></p><ul><li>Cookie、LocalStorage、IndexDB 等存储性内容</li><li>DOM 节点</li><li>AJAX 发送请求后，结果被浏览器拦截了</li></ul><h2 id="跨域解决方案" tabindex="-1">跨域解决方案 <a class="header-anchor" href="#跨域解决方案" aria-hidden="true">#</a></h2><h3 id="jsonp" tabindex="-1">jsonp <a class="header-anchor" href="#jsonp" aria-hidden="true">#</a></h3><p><strong>原理</strong></p><p>利用<code>script</code>标签没有跨域限制的漏洞，网页可以得到从其它来源动态产生的 JSON 数据</p><p>优点是简单兼容性好，可以用于解决主流浏览器的跨域数据访问的问题</p><p>缺点是只支持 get 请求方法</p><p><strong>实现</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7B7F8B;">// index.html</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">jsonp</span><span style="color:#F6F6F4;">({ </span><span style="color:#FFB86C;font-style:italic;">url</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">params</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#F6F6F4;"> }) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> script </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">createElement</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">script</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    window[callback] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">(data);</span></span>
<span class="line"><span style="color:#F6F6F4;">      document.body.</span><span style="color:#62E884;">removeChild</span><span style="color:#F6F6F4;">(script);</span></span>
<span class="line"><span style="color:#F6F6F4;">    };</span></span>
<span class="line"><span style="color:#F6F6F4;">    params </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { </span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">params, callback }; </span><span style="color:#7B7F8B;">// wd=b&amp;callback=show</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arrs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [];</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> params) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      arrs.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">key</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">=</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">params[key]</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">\`</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    script.src </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\`</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">url</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">?</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">arrs.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&amp;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">\`</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    document.body.</span><span style="color:#62E884;">appendChild</span><span style="color:#F6F6F4;">(script);</span></span>
<span class="line"><span style="color:#F6F6F4;">  });</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">jsonp</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">  url</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://localhost:3000/say</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#7B7F8B;">// 请求地址</span></span>
<span class="line"><span style="color:#F6F6F4;">  params</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { wd</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Iloveyou</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> }, </span><span style="color:#7B7F8B;">// 参数</span></span>
<span class="line"><span style="color:#F6F6F4;">  callback</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">show</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">}).</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(data);</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// index.html</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jsonp</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">url</span><span style="color:#24292E;">, </span><span style="color:#E36209;">params</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> script </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    window[callback] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">      document.body.</span><span style="color:#6F42C1;">removeChild</span><span style="color:#24292E;">(script);</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    params </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">params, callback }; </span><span style="color:#6A737D;">// wd=b&amp;callback=show</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arrs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> params) {</span></span>
<span class="line"><span style="color:#24292E;">      arrs.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}=\${</span><span style="color:#24292E;">params</span><span style="color:#032F62;">[</span><span style="color:#24292E;">key</span><span style="color:#032F62;">]</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    script.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">url</span><span style="color:#032F62;">}?\${</span><span style="color:#24292E;">arrs</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">join</span><span style="color:#032F62;">(</span><span style="color:#032F62;">&quot;&amp;&quot;</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(script);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">jsonp</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  url: </span><span style="color:#032F62;">&quot;http://localhost:3000/say&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 请求地址</span></span>
<span class="line"><span style="color:#24292E;">  params: { wd: </span><span style="color:#032F62;">&quot;Iloveyou&quot;</span><span style="color:#24292E;"> }, </span><span style="color:#6A737D;">// 参数</span></span>
<span class="line"><span style="color:#24292E;">  callback: </span><span style="color:#032F62;">&quot;show&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span></code></pre></div><h3 id="cors" tabindex="-1">CORS <a class="header-anchor" href="#cors" aria-hidden="true">#</a></h3><p>服务端设置<code>Access-Control-Allow-Origin</code>开启 CORS，这个属性表示的是那个域名可以访问资源，如果设置为通配符表示所有网站都可以访问资源</p><p>使用这种方式解决跨域，在发送请求的时候会出现简单请求和复杂请求</p><p><strong>简单请求</strong></p><p>满足以下条件的就是简单请求</p><ul><li>get</li><li>head</li><li>post</li></ul><p>Content-Type 的值为下面三个之一</p><ul><li>text/align</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><p><strong>复杂请求</strong></p><p>不符合以上的就是复杂请求，发送复杂请求，会在正式通信之前，增加一次 HTTP 查询请求（预检请求），option 方法，通过这个请求来获取服务端是否允许跨域请求</p><h3 id="node-中间件代理" tabindex="-1">Node 中间件代理 <a class="header-anchor" href="#node-中间件代理" aria-hidden="true">#</a></h3><p>服务器向服务器请求不用遵循同源策略</p><ul><li>接受客户端请求</li><li>将请求转发给服务器</li><li>拿到服务器响应数据</li><li>将响应转发给客户端</li></ul>`,28),e=[o];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
