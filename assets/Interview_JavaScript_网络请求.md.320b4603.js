import{_ as s,c as a,o as n,d as l}from"./app.58c7925b.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"axios、ajax、fetch 的区别","slug":"axios、ajax、fetch-的区别","link":"#axios、ajax、fetch-的区别","children":[]}],"relativePath":"Interview/JavaScript/网络请求.md"}'),p={name:"Interview/JavaScript/网络请求.md"},o=l(`<p><strong>ajax</strong></p><p>是一种异步通信的方法，通过直接由 js 脚本向服务器发起 http 通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法</p><p>用途：无刷新获取服务器数据</p><ul><li><p>优点：</p><ul><li>通过异步模式，提升了用户体验.</li><li>优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用.</li><li><code>Ajax</code>在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</li><li><code>Ajax</code>可以实现动态刷新（局部刷新）</li></ul></li><li><p>缺点：</p><ul><li>安全问题 <code>AJAX</code>暴露了与服务器交互的细节。</li><li>对搜索引擎的支持比较弱。 SEO</li><li>不容易调试。</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#7B7F8B;">//1：创建Ajax对象</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> xhr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> window.XMLHttpRequest</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">XMLHttpRequest</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ActiveXObject</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Microsoft.XMLHTTP</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 兼容IE6及以下版本</span></span>
<span class="line"><span style="color:#7B7F8B;">//2：配置 Ajax请求地址</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">get</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">index.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//3：发送请求</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 严谨写法</span></span>
<span class="line"><span style="color:#7B7F8B;">//4:监听请求，接受响应</span></span>
<span class="line"><span style="color:#F6F6F4;">xhr.</span><span style="color:#62E884;">onreadysatechange</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((xhr.readySate </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> xhr.status </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> xhr.status </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">304</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(xhr.responsetXML);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light" tabindex="0"><code><span class="line"><span style="color:#6A737D;">//1：创建Ajax对象</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> xhr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.XMLHttpRequest</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLHttpRequest</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ActiveXObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Microsoft.XMLHTTP&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 兼容IE6及以下版本</span></span>
<span class="line"><span style="color:#6A737D;">//2：配置 Ajax请求地址</span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;index.xml&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//3：发送请求</span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 严谨写法</span></span>
<span class="line"><span style="color:#6A737D;">//4:监听请求，接受响应</span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">onreadysatechange</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((xhr.readySate </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> xhr.status </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> xhr.status </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">304</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(xhr.responsetXML);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span></code></pre></div><h3 id="axios、ajax、fetch-的区别" tabindex="-1">axios、ajax、fetch 的区别 <a class="header-anchor" href="#axios、ajax、fetch-的区别" aria-hidden="true">#</a></h3><ul><li>ajax 是一种技术统称，基于原生的 XHR 开发，已经有了 fetch 的替代方案。</li><li>fetch 是一个原生的 API，用于进行网络请求，支持 Promise API，但在某些方面功能较为简单，需要进行封装来处理错误、超时等情况。</li><li>axios 是一个第三方库，可以用于浏览器和 Node.js 环境中发出 HTTP 请求，支持 Promise API，提供了更多的功能和选项，如拦截请求和响应、转换数据、取消请求等。</li></ul>`,7),e=[o];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{x as __pageData,h as default};
