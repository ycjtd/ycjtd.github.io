import{_ as t,c as e,o,d as i}from"./app.72c7cb6e.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Interview/network/SSO单点登录.md"}'),l={name:"Interview/network/SSO单点登录.md"},r=i("<p><strong>概念：</strong></p><p>当用户在身份认证服务器上登录过一次之后，即可获取访问单点登录系统中的其它关联系统和应用软件的权限。</p><p><strong>实现机制</strong>：</p><blockquote><p>当用户第一次访问应用系统 1 的时候，因为还没有登录，会被引导到认证系统中进行登录；根据用户提供的登录信息，认证系统进行身份校验，如果通过校验，应该返回给用户一个认证的凭据－－ticket；用户再访问别的应用的时候就会将这个 ticket 带上，作为自己认证的凭据，应用系统接受到请求之后会把 ticket 送到认证系统进行校验，检查 ticket 的合法性。如果通过校验，用户就可以在不用再次登录的情况下访问应用系统 2 和应用系统 3 了。</p></blockquote><p>需要注意两点：</p><ul><li>系统共享，统一的认证系统</li><li>信息识别，让应用系统能够识别已经登录过的用户(其实要把 ticket 发送到认证系统进行校验)</li></ul><p><strong>优点：</strong></p><ul><li>单点登录：用户只需登录一次，即可通过单点登录系统（eTrueSSO）访问后台的多个 应用系统，二次登陆时无需重新输入用户名和密码</li><li>基于角色访问控制：根据用户的角色和 URL 实现访问控制功能</li><li>集群：通过集群功能，实现多台服务器之间的动态负载均衡</li><li>传输加密：支持多种对称和非对称加密算法，保证用户信息在传输过程中不被窃取和篡改</li></ul><p><strong>缺点：</strong></p><ul><li>不利于重构， 因为涉及到的系统很多，要重构必须要兼容所有的系统，可能很耗时</li><li>无人看守桌面，因为只需要登录一次，所有的授权的应用系统都可以访问，可能导致一些很重要的信息泄露</li></ul>",10),_=[r];function n(s,c,p,a,u,d){return o(),e("div",null,_)}const g=t(l,[["render",n]]);export{k as __pageData,g as default};
