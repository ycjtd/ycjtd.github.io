import{_ as e,c as a,o as t,a as i}from"./app.d0de5917.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"如何阻止事件冒泡和默认事件","slug":"如何阻止事件冒泡和默认事件","link":"#如何阻止事件冒泡和默认事件","children":[]},{"level":3,"title":"事件捕获和冒泡","slug":"事件捕获和冒泡","link":"#事件捕获和冒泡","children":[]}],"relativePath":"Interview/JavaScript/事件.md"}'),l={name:"Interview/JavaScript/事件.md"},r=i('<h3 id="如何阻止事件冒泡和默认事件" tabindex="-1">如何阻止事件冒泡和默认事件 <a class="header-anchor" href="#如何阻止事件冒泡和默认事件" aria-hidden="true">#</a></h3><ul><li>标准的 DOM 对象中可以使用事件对象的 stopPropagation()方法来阻止冒泡，在 IE8 以下中 IE 的事件对象通过设置事件对象的 cancleBubble 属性为 true 来阻止冒泡</li><li>默认事件的话通过事件对象的 preventDefault 方法来阻止，IE 通过设置事件对象的 returnValue 属性为 false 来阻止默认事件</li></ul><h3 id="事件捕获和冒泡" tabindex="-1">事件捕获和冒泡 <a class="header-anchor" href="#事件捕获和冒泡" aria-hidden="true">#</a></h3><p>事件捕获阶段 处于目标阶段 事件冒泡阶段</p><p>事件流是一个事件沿着特定数据结构传播的过程。冒泡和捕获是事件流在 DOM 中两种不同的传播方法</p><ul><li>事件捕获：当鼠标点击或者触发 dom 事件时，浏览器会从根节点开始由外到内进行事件传播，就是说点击了子元素，如果父元素通过事件捕获方式注册了对应的事件的话，会先触发父元素绑定的事件</li><li>事件冒泡：和事件捕获相反，顺序是由内到外传播，直到根节点</li><li>在支持 addEventListener()的浏览器中，可以调用事件对象的 stopPropagation() 方法以阻止事件的继续传播。如果在同一对象上定义了其他处理程序，剩下的处理程序将依旧被调用，但调用 stopPropagation() 之后任何其他对象上的事件处理程序将不会被调用。不仅可以阻止事件在冒泡阶段的传播，还能阻止事件在捕获阶段的传播。IE9 之前的 IE 不支持 stopPropagation()方法，而是设置事件对象 cancelBubble 属性为 true 来实现阻止事件进一步传播。</li><li>e.preventDefault() 可以阻止事件的默认行为发生，默认行为是指：点击 a 标签就转跳到其他页面、拖拽一个图片到浏览器会自动打开、点击表单的提交按钮会提交表单。</li><li>事件委托：在 js 中性能优化的一个主要思想就是减少 dom 操作，事件委托是利用了事件的冒泡原理实现的，当我们为最外层的节点添加点击事件，那么里面的 ul、li、a 的点击事件会冒泡到最外层节点上，委托它代为执行事件</li></ul>',6),n=[r];function o(s,c,_,d,p,u){return t(),a("div",null,n)}const v=e(l,[["render",o]]);export{f as __pageData,v as default};
