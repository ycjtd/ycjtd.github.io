import{_ as e,c as a,o as d,a as t}from"./app.d0de5917.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"Node 是什么？","slug":"node-是什么","link":"#node-是什么","children":[]},{"level":3,"title":"解决了什么问题？","slug":"解决了什么问题","link":"#解决了什么问题","children":[]},{"level":3,"title":"js 单线程","slug":"js-单线程","link":"#js-单线程","children":[]},{"level":3,"title":"同步异步和阻塞非阻塞","slug":"同步异步和阻塞非阻塞","link":"#同步异步和阻塞非阻塞","children":[]}],"relativePath":"BackEnd/NodeJS/Node基本概念.md"}'),i={name:"BackEnd/NodeJS/Node基本概念.md"},r=t('<h3 id="node-是什么" tabindex="-1">Node 是什么？ <a class="header-anchor" href="#node-是什么" aria-hidden="true">#</a></h3><p>是一个基于 Chrome V8 引擎的 JavaScript 运行环境</p><h3 id="解决了什么问题" tabindex="-1">解决了什么问题？ <a class="header-anchor" href="#解决了什么问题" aria-hidden="true">#</a></h3><p>在处理高并发，I/O 密集场景有明显的性能优势。</p><p>高并发：同一时间并发访问服务器</p><h3 id="js-单线程" tabindex="-1">js 单线程 <a class="header-anchor" href="#js-单线程" aria-hidden="true">#</a></h3><p>Node 的主线程是单线程的，主要是为了</p><ul><li>节约内存，且不需要再切换执行上下文</li><li>不需要管锁的问题</li></ul><h3 id="同步异步和阻塞非阻塞" tabindex="-1">同步异步和阻塞非阻塞 <a class="header-anchor" href="#同步异步和阻塞非阻塞" aria-hidden="true">#</a></h3><p>同步就是再执行某段代码时，代码没有得到返回之前，其它代码无法执行，当得到了返回值后可以继续执行其他代码</p><p>异步就是再执行某段代码的时候，代码不好立即得到返回结果，可以继续执行其它代码，返回值通过回调来获取</p>',11),n=[r];function l(o,s,c,h,_,p){return d(),a("div",null,n)}const N=e(i,[["render",l]]);export{f as __pageData,N as default};
