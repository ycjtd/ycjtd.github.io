import{_ as t,c as o,o as r,d as e}from"./app.a84b4934.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"原型的作用","slug":"原型的作用","link":"#原型的作用","children":[]},{"level":3,"title":"原型链","slug":"原型链","link":"#原型链","children":[]},{"level":3,"title":"原型链和作用域链的区别","slug":"原型链和作用域链的区别","link":"#原型链和作用域链的区别","children":[]},{"level":3,"title":"proto、prototype、constructor","slug":"proto、prototype、constructor","link":"#proto、prototype、constructor","children":[]}],"relativePath":"Interview/JavaScript/原型-原型链.md"}'),a={name:"Interview/JavaScript/原型-原型链.md"},c=e('<h3 id="原型的作用" tabindex="-1">原型的作用 <a class="header-anchor" href="#原型的作用" aria-hidden="true">#</a></h3><p>原型被定义为给其它对象提供共享属性的对象，函数的实例可以共享原型上的属性和方法</p><h3 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-hidden="true">#</a></h3><p>作用就是当你在访问一个对象上的属性的时候，如果该对象内部不存在这个属性，那么就会去它的<strong>proto</strong>属性所指向的原型对象上查找，如果依旧不存在，就会去原型的<strong>proto</strong>属性所指向的原型对象上去查找，直到找到 null，这个查找的路线就是原型链</p><h3 id="原型链和作用域链的区别" tabindex="-1">原型链和作用域链的区别 <a class="header-anchor" href="#原型链和作用域链的区别" aria-hidden="true">#</a></h3><p>原型链是查找对象上的属性，作用域链是查找当前上下文中的变量</p><h3 id="proto、prototype、constructor" tabindex="-1">proto、prototype、constructor <a class="header-anchor" href="#proto、prototype、constructor" aria-hidden="true">#</a></h3><ol><li>js 对象分为两种，普通对象和函数对象</li><li>proto 和 constructor 是对象独有的，prototype 是函数对象独有的，作用是给特定类型的所有实例提供共享的属性和方法，但是在 js 中，函数也是对象，所以函数也有 proto 和 constructor 属性</li><li>constructor 是对象独有的，是一个对象指向一个函数，这个函数就是这个对象的构造函数，构造函数.prototype.constructor === 构造函数本身</li><li>一个对象的 proto 指向其构造函数的 prototype，<code>函数创建的对象.__proto__ === 该函数.prototype</code></li></ol>',8),n=[c];function i(p,s,l,d,_,h){return r(),o("div",null,n)}const v=t(a,[["render",i]]);export{f as __pageData,v as default};
